<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AWSSDK.Lex</name>
    </assembly>
    <members>
        <member name="T:Amazon.Lex.AmazonLexConfig">
            <summary>
            Configuration for accessing Amazon Lex service
            </summary>
        </member>
        <member name="M:Amazon.Lex.AmazonLexConfig.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Amazon.Lex.AmazonLexConfig.RegionEndpointServiceName">
            <summary>
            The constant used to lookup in the region hash the endpoint.
            </summary>
        </member>
        <member name="P:Amazon.Lex.AmazonLexConfig.ServiceVersion">
            <summary>
            Gets the ServiceVersion property.
            </summary>
        </member>
        <member name="P:Amazon.Lex.AmazonLexConfig.UserAgent">
            <summary>
            Gets the value of UserAgent property.
            </summary>
        </member>
        <member name="T:Amazon.Lex.AmazonLexException">
            <summary>
             Common exception for the Lex service.
             </summary>
        </member>
        <member name="M:Amazon.Lex.AmazonLexException.#ctor(System.String)">
            <summary>
            Construct instance of AmazonLexException
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Amazon.Lex.AmazonLexException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of AmazonLexException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Lex.AmazonLexException.#ctor(System.Exception)">
            <summary>
            Construct instance of AmazonLexException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Lex.AmazonLexException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of AmazonLexException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Lex.AmazonLexException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of AmazonLexException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Lex.AmazonLexException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the AmazonLexException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:Amazon.Lex.Internal.AmazonLexMetadata">
            <summary>
            Service metadata for  Amazon Lex service
            </summary>
        </member>
        <member name="P:Amazon.Lex.Internal.AmazonLexMetadata.ServiceId">
            <summary>
            Gets the value of the Service Id.
            </summary>
        </member>
        <member name="P:Amazon.Lex.Internal.AmazonLexMetadata.OperationNameMapping">
            <summary>
            Gets the dictionary that gives mapping of renamed operations
            </summary>
        </member>
        <member name="T:Amazon.Lex.Model.ActiveContext">
            <summary>
            A context is a variable that contains information about the current state of the conversation
            between a user and Amazon Lex. Context can be set automatically by Amazon Lex when
            an intent is fulfilled, or it can be set at runtime using the <code>PutContent</code>,
            <code>PutText</code>, or <code>PutSession</code> operation.
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.ActiveContext.Name">
            <summary>
            Gets and sets the property Name. 
            <para>
            The name of the context.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.ActiveContext.Parameters">
            <summary>
            Gets and sets the property Parameters. 
            <para>
            State variables for the current context. You can use these values as default values
            for slots in subsequent events.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.ActiveContext.TimeToLive">
            <summary>
            Gets and sets the property TimeToLive. 
            <para>
            The length of time or number of turns that a context remains active.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Lex.Model.ActiveContextTimeToLive">
            <summary>
            The length of time or number of turns that a context remains active.
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.ActiveContextTimeToLive.TimeToLiveInSeconds">
            <summary>
            Gets and sets the property TimeToLiveInSeconds. 
            <para>
            The number of seconds that the context should be active after it is first sent in
            a <code>PostContent</code> or <code>PostText</code> response. You can set the value
            between 5 and 86,400 seconds (24 hours).
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.ActiveContextTimeToLive.TurnsToLive">
            <summary>
            Gets and sets the property TurnsToLive. 
            <para>
            The number of conversation turns that the context should be active. A conversation
            turn is one <code>PostContent</code> or <code>PostText</code> request and the corresponding
            response from Amazon Lex.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Lex.Model.BadGatewayException">
            <summary>
            Either the Amazon Lex bot is still building, or one of the dependent services (Amazon
            Polly, AWS Lambda) failed with an internal service error.
            </summary>
        </member>
        <member name="M:Amazon.Lex.Model.BadGatewayException.#ctor(System.String)">
            <summary>
            Constructs a new BadGatewayException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.Lex.Model.BadGatewayException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of BadGatewayException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Lex.Model.BadGatewayException.#ctor(System.Exception)">
            <summary>
            Construct instance of BadGatewayException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Lex.Model.BadGatewayException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of BadGatewayException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Lex.Model.BadGatewayException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of BadGatewayException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Lex.Model.BadGatewayException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the BadGatewayException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.Lex.Model.BadGatewayException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.Lex.Model.BadRequestException">
            <summary>
            Request validation failed, there is no usable message in the context, or the bot
            build failed, is still in progress, or contains unbuilt changes.
            </summary>
        </member>
        <member name="M:Amazon.Lex.Model.BadRequestException.#ctor(System.String)">
            <summary>
            Constructs a new BadRequestException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.Lex.Model.BadRequestException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of BadRequestException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Lex.Model.BadRequestException.#ctor(System.Exception)">
            <summary>
            Construct instance of BadRequestException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Lex.Model.BadRequestException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of BadRequestException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Lex.Model.BadRequestException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of BadRequestException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Lex.Model.BadRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the BadRequestException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.Lex.Model.BadRequestException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.Lex.Model.Button">
            <summary>
            Represents an option to be shown on the client platform (Facebook, Slack, etc.)
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.Button.Text">
            <summary>
            Gets and sets the property Text. 
            <para>
            Text that is visible to the user on the button.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.Button.Value">
            <summary>
            Gets and sets the property Value. 
            <para>
            The value sent to Amazon Lex when a user chooses the button. For example, consider
            button text "NYC." When the user chooses the button, the value sent can be "New York
            City."
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Lex.Model.ConflictException">
            <summary>
            Two clients are using the same AWS account, Amazon Lex bot, and user ID.
            </summary>
        </member>
        <member name="M:Amazon.Lex.Model.ConflictException.#ctor(System.String)">
            <summary>
            Constructs a new ConflictException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.Lex.Model.ConflictException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ConflictException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Lex.Model.ConflictException.#ctor(System.Exception)">
            <summary>
            Construct instance of ConflictException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Lex.Model.ConflictException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ConflictException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Lex.Model.ConflictException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ConflictException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Lex.Model.ConflictException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the ConflictException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.Lex.Model.ConflictException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.Lex.Model.DeleteSessionRequest">
            <summary>
            Container for the parameters to the DeleteSession operation.
            Removes session information for a specified bot, alias, and user ID.
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.DeleteSessionRequest.BotAlias">
            <summary>
            Gets and sets the property BotAlias. 
            <para>
            The alias in use for the bot that contains the session data.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.DeleteSessionRequest.BotName">
            <summary>
            Gets and sets the property BotName. 
            <para>
            The name of the bot that contains the session data.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.DeleteSessionRequest.UserId">
            <summary>
            Gets and sets the property UserId. 
            <para>
            The identifier of the user associated with the session data.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Lex.Model.DeleteSessionResponse">
            <summary>
            This is the response object from the DeleteSession operation.
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.DeleteSessionResponse.BotAlias">
            <summary>
            Gets and sets the property BotAlias. 
            <para>
            The alias in use for the bot associated with the session data.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.DeleteSessionResponse.BotName">
            <summary>
            Gets and sets the property BotName. 
            <para>
            The name of the bot associated with the session data.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.DeleteSessionResponse.SessionId">
            <summary>
            Gets and sets the property SessionId. 
            <para>
            The unique identifier for the session.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.DeleteSessionResponse.UserId">
            <summary>
            Gets and sets the property UserId. 
            <para>
            The ID of the client application user.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Lex.Model.DependencyFailedException">
            <summary>
            One of the dependencies, such as AWS Lambda or Amazon Polly, threw an exception.
            For example, 
            
             <ul> <li> 
            <para>
            If Amazon Lex does not have sufficient permissions to call a Lambda function.
            </para>
             </li> <li> 
            <para>
            If a Lambda function takes longer than 30 seconds to execute.
            </para>
             </li> <li> 
            <para>
            If a fulfillment Lambda function returns a <code>Delegate</code> dialog action without
            removing any slot values.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="M:Amazon.Lex.Model.DependencyFailedException.#ctor(System.String)">
            <summary>
            Constructs a new DependencyFailedException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.Lex.Model.DependencyFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of DependencyFailedException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Lex.Model.DependencyFailedException.#ctor(System.Exception)">
            <summary>
            Construct instance of DependencyFailedException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Lex.Model.DependencyFailedException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of DependencyFailedException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Lex.Model.DependencyFailedException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of DependencyFailedException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Lex.Model.DependencyFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the DependencyFailedException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.Lex.Model.DependencyFailedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.Lex.Model.DialogAction">
            <summary>
            Describes the next action that the bot should take in its interaction with the user
            and provides information about the context in which the action takes place. Use the
            <code>DialogAction</code> data type to set the interaction to a specific state, or
            to return the interaction to a previous state.
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.DialogAction.FulfillmentState">
            <summary>
            Gets and sets the property FulfillmentState. 
            <para>
            The fulfillment state of the intent. The possible values are:
            </para>
             <ul> <li> 
            <para>
             <code>Failed</code> - The Lambda function associated with the intent failed to fulfill
            the intent.
            </para>
             </li> <li> 
            <para>
             <code>Fulfilled</code> - The intent has fulfilled by the Lambda function associated
            with the intent. 
            </para>
             </li> <li> 
            <para>
             <code>ReadyForFulfillment</code> - All of the information necessary for the intent
            is present and the intent ready to be fulfilled by the client application.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.DialogAction.IntentName">
            <summary>
            Gets and sets the property IntentName. 
            <para>
            The name of the intent.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.DialogAction.Message">
            <summary>
            Gets and sets the property Message. 
            <para>
            The message that should be shown to the user. If you don't specify a message, Amazon
            Lex will use the message configured for the intent.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.DialogAction.MessageFormat">
            <summary>
            Gets and sets the property MessageFormat. <ul> <li> 
            <para>
             <code>PlainText</code> - The message contains plain UTF-8 text.
            </para>
             </li> <li> 
            <para>
             <code>CustomPayload</code> - The message is a custom format for the client.
            </para>
             </li> <li> 
            <para>
             <code>SSML</code> - The message contains text formatted for voice output.
            </para>
             </li> <li> 
            <para>
             <code>Composite</code> - The message contains an escaped JSON object containing one
            or more messages. For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/howitworks-manage-prompts.html">Message
            Groups</a>. 
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.DialogAction.Slots">
            <summary>
            Gets and sets the property Slots. 
            <para>
            Map of the slots that have been gathered and their values. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.DialogAction.SlotToElicit">
            <summary>
            Gets and sets the property SlotToElicit. 
            <para>
            The name of the slot that should be elicited from the user.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.DialogAction.Type">
            <summary>
            Gets and sets the property Type. 
            <para>
            The next action that the bot should take in its interaction with the user. The possible
            values are:
            </para>
             <ul> <li> 
            <para>
             <code>ConfirmIntent</code> - The next action is asking the user if the intent is
            complete and ready to be fulfilled. This is a yes/no question such as "Place the order?"
            </para>
             </li> <li> 
            <para>
             <code>Close</code> - Indicates that the there will not be a response from the user.
            For example, the statement "Your order has been placed" does not require a response.
            </para>
             </li> <li> 
            <para>
             <code>Delegate</code> - The next action is determined by Amazon Lex.
            </para>
             </li> <li> 
            <para>
             <code>ElicitIntent</code> - The next action is to determine the intent that the user
            wants to fulfill.
            </para>
             </li> <li> 
            <para>
             <code>ElicitSlot</code> - The next action is to elicit a slot value from the user.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="T:Amazon.Lex.Model.GenericAttachment">
            <summary>
            Represents an option rendered to the user when a prompt is shown. It could be an image,
            a button, a link, or text.
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.GenericAttachment.AttachmentLinkUrl">
            <summary>
            Gets and sets the property AttachmentLinkUrl. 
            <para>
            The URL of an attachment to the response card.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.GenericAttachment.Buttons">
            <summary>
            Gets and sets the property Buttons. 
            <para>
            The list of options to show to the user.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.GenericAttachment.ImageUrl">
            <summary>
            Gets and sets the property ImageUrl. 
            <para>
            The URL of an image that is displayed to the user.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.GenericAttachment.SubTitle">
            <summary>
            Gets and sets the property SubTitle. 
            <para>
            The subtitle shown below the title.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.GenericAttachment.Title">
            <summary>
            Gets and sets the property Title. 
            <para>
            The title of the option.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Lex.Model.GetSessionRequest">
            <summary>
            Container for the parameters to the GetSession operation.
            Returns session information for a specified bot, alias, and user ID.
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.GetSessionRequest.BotAlias">
            <summary>
            Gets and sets the property BotAlias. 
            <para>
            The alias in use for the bot that contains the session data.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.GetSessionRequest.BotName">
            <summary>
            Gets and sets the property BotName. 
            <para>
            The name of the bot that contains the session data.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.GetSessionRequest.CheckpointLabelFilter">
            <summary>
            Gets and sets the property CheckpointLabelFilter. 
            <para>
            A string used to filter the intents returned in the <code>recentIntentSummaryView</code>
            structure. 
            </para>
             
            <para>
            When you specify a filter, only intents with their <code>checkpointLabel</code> field
            set to that string are returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.GetSessionRequest.UserId">
            <summary>
            Gets and sets the property UserId. 
            <para>
            The ID of the client application user. Amazon Lex uses this to identify a user's conversation
            with your bot. 
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Lex.Model.GetSessionResponse">
            <summary>
            This is the response object from the GetSession operation.
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.GetSessionResponse.ActiveContexts">
            <summary>
            Gets and sets the property ActiveContexts. 
            <para>
            A list of active contexts for the session. A context can be set when an intent is
            fulfilled or by calling the <code>PostContent</code>, <code>PostText</code>, or <code>PutSession</code>
            operation.
            </para>
             
            <para>
            You can use a context to control the intents that can follow up an intent, or to modify
            the operation of your application.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.GetSessionResponse.DialogAction">
            <summary>
            Gets and sets the property DialogAction. 
            <para>
            Describes the current state of the bot.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.GetSessionResponse.RecentIntentSummaryView">
            <summary>
            Gets and sets the property RecentIntentSummaryView. 
            <para>
            An array of information about the intents used in the session. The array can contain
            a maximum of three summaries. If more than three intents are used in the session,
            the <code>recentIntentSummaryView</code> operation contains information about the
            last three intents used.
            </para>
             
            <para>
            If you set the <code>checkpointLabelFilter</code> parameter in the request, the array
            contains only the intents with the specified label.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.GetSessionResponse.SessionAttributes">
            <summary>
            Gets and sets the property SessionAttributes. 
            <para>
            Map of key/value pairs representing the session-specific context information. It contains
            application information passed between Amazon Lex and a client application.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.GetSessionResponse.SessionId">
            <summary>
            Gets and sets the property SessionId. 
            <para>
            A unique identifier for the session.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Lex.Model.IntentConfidence">
            <summary>
            Provides a score that indicates the confidence that Amazon Lex has that an intent
            is the one that satisfies the user's intent.
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.IntentConfidence.Score">
            <summary>
            Gets and sets the property Score. 
            <para>
            A score that indicates how confident Amazon Lex is that an intent satisfies the user's
            intent. Ranges between 0.00 and 1.00. Higher scores indicate higher confidence.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Lex.Model.IntentSummary">
            <summary>
            Provides information about the state of an intent. You can use this information to
            get the current state of an intent so that you can process the intent, or so that
            you can return the intent to its previous state.
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.IntentSummary.CheckpointLabel">
            <summary>
            Gets and sets the property CheckpointLabel. 
            <para>
            A user-defined label that identifies a particular intent. You can use this label to
            return to a previous intent. 
            </para>
             
            <para>
            Use the <code>checkpointLabelFilter</code> parameter of the <code>GetSessionRequest</code>
            operation to filter the intents returned by the operation to those with only the specified
            label.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.IntentSummary.ConfirmationStatus">
            <summary>
            Gets and sets the property ConfirmationStatus. 
            <para>
            The status of the intent after the user responds to the confirmation prompt. If the
            user confirms the intent, Amazon Lex sets this field to <code>Confirmed</code>. If
            the user denies the intent, Amazon Lex sets this value to <code>Denied</code>. The
            possible values are:
            </para>
             <ul> <li> 
            <para>
             <code>Confirmed</code> - The user has responded "Yes" to the confirmation prompt,
            confirming that the intent is complete and that it is ready to be fulfilled.
            </para>
             </li> <li> 
            <para>
             <code>Denied</code> - The user has responded "No" to the confirmation prompt.
            </para>
             </li> <li> 
            <para>
             <code>None</code> - The user has never been prompted for confirmation; or, the user
            was prompted but did not confirm or deny the prompt.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.IntentSummary.DialogActionType">
            <summary>
            Gets and sets the property DialogActionType. 
            <para>
            The next action that the bot should take in its interaction with the user. The possible
            values are:
            </para>
             <ul> <li> 
            <para>
             <code>ConfirmIntent</code> - The next action is asking the user if the intent is
            complete and ready to be fulfilled. This is a yes/no question such as "Place the order?"
            </para>
             </li> <li> 
            <para>
             <code>Close</code> - Indicates that the there will not be a response from the user.
            For example, the statement "Your order has been placed" does not require a response.
            </para>
             </li> <li> 
            <para>
             <code>ElicitIntent</code> - The next action is to determine the intent that the user
            wants to fulfill.
            </para>
             </li> <li> 
            <para>
             <code>ElicitSlot</code> - The next action is to elicit a slot value from the user.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.IntentSummary.FulfillmentState">
            <summary>
            Gets and sets the property FulfillmentState. 
            <para>
            The fulfillment state of the intent. The possible values are:
            </para>
             <ul> <li> 
            <para>
             <code>Failed</code> - The Lambda function associated with the intent failed to fulfill
            the intent.
            </para>
             </li> <li> 
            <para>
             <code>Fulfilled</code> - The intent has fulfilled by the Lambda function associated
            with the intent. 
            </para>
             </li> <li> 
            <para>
             <code>ReadyForFulfillment</code> - All of the information necessary for the intent
            is present and the intent ready to be fulfilled by the client application.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.IntentSummary.IntentName">
            <summary>
            Gets and sets the property IntentName. 
            <para>
            The name of the intent.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.IntentSummary.Slots">
            <summary>
            Gets and sets the property Slots. 
            <para>
            Map of the slots that have been gathered and their values. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.IntentSummary.SlotToElicit">
            <summary>
            Gets and sets the property SlotToElicit. 
            <para>
            The next slot to elicit from the user. If there is not slot to elicit, the field is
            blank.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Lex.Model.InternalFailureException">
            <summary>
            Internal service error. Retry the call.
            </summary>
        </member>
        <member name="M:Amazon.Lex.Model.InternalFailureException.#ctor(System.String)">
            <summary>
            Constructs a new InternalFailureException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.Lex.Model.InternalFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InternalFailureException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Lex.Model.InternalFailureException.#ctor(System.Exception)">
            <summary>
            Construct instance of InternalFailureException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Lex.Model.InternalFailureException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InternalFailureException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Lex.Model.InternalFailureException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InternalFailureException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Lex.Model.InternalFailureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the InternalFailureException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.Lex.Model.InternalFailureException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.ActiveContextMarshaller">
            <summary>
            ActiveContext Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.ActiveContextMarshaller.Marshall(Amazon.Lex.Model.ActiveContext,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.Lex.Model.Internal.MarshallTransformations.ActiveContextMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.ActiveContextTimeToLiveMarshaller">
            <summary>
            ActiveContextTimeToLive Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.ActiveContextTimeToLiveMarshaller.Marshall(Amazon.Lex.Model.ActiveContextTimeToLive,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.Lex.Model.Internal.MarshallTransformations.ActiveContextTimeToLiveMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.ActiveContextTimeToLiveUnmarshaller">
            <summary>
            Response Unmarshaller for ActiveContextTimeToLive Object
            </summary>  
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.ActiveContextTimeToLiveUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#Lex#Model#ActiveContextTimeToLive,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.ActiveContextTimeToLiveUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.ActiveContextTimeToLiveUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.ActiveContextUnmarshaller">
            <summary>
            Response Unmarshaller for ActiveContext Object
            </summary>  
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.ActiveContextUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#Lex#Model#ActiveContext,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.ActiveContextUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.ActiveContextUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.BadGatewayExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for BadGatewayException Object
            </summary>  
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.BadGatewayExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.BadGatewayExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.BadGatewayExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.BadRequestExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for BadRequestException Object
            </summary>  
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.BadRequestExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.BadRequestExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.BadRequestExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.ButtonUnmarshaller">
            <summary>
            Response Unmarshaller for Button Object
            </summary>  
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.ButtonUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#Lex#Model#Button,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.ButtonUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.ButtonUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.ConflictExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for ConflictException Object
            </summary>  
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.ConflictExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.ConflictExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.ConflictExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.DeleteSessionRequestMarshaller">
            <summary>
            DeleteSession Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.DeleteSessionRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.DeleteSessionRequestMarshaller.Marshall(Amazon.Lex.Model.DeleteSessionRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.DeleteSessionRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.DeleteSessionResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DeleteSession operation
            </summary>  
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.DeleteSessionResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.DeleteSessionResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.DeleteSessionResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.DependencyFailedExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for DependencyFailedException Object
            </summary>  
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.DependencyFailedExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.DependencyFailedExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.DependencyFailedExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.DialogActionMarshaller">
            <summary>
            DialogAction Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.DialogActionMarshaller.Marshall(Amazon.Lex.Model.DialogAction,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.Lex.Model.Internal.MarshallTransformations.DialogActionMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.DialogActionUnmarshaller">
            <summary>
            Response Unmarshaller for DialogAction Object
            </summary>  
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.DialogActionUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#Lex#Model#DialogAction,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.DialogActionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.DialogActionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.GenericAttachmentUnmarshaller">
            <summary>
            Response Unmarshaller for GenericAttachment Object
            </summary>  
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.GenericAttachmentUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#Lex#Model#GenericAttachment,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.GenericAttachmentUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.GenericAttachmentUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.GetSessionRequestMarshaller">
            <summary>
            GetSession Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.GetSessionRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.GetSessionRequestMarshaller.Marshall(Amazon.Lex.Model.GetSessionRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.GetSessionRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.GetSessionResponseUnmarshaller">
            <summary>
            Response Unmarshaller for GetSession operation
            </summary>  
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.GetSessionResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.GetSessionResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.GetSessionResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.IntentConfidenceUnmarshaller">
            <summary>
            Response Unmarshaller for IntentConfidence Object
            </summary>  
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.IntentConfidenceUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#Lex#Model#IntentConfidence,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.IntentConfidenceUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.IntentConfidenceUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.IntentSummaryMarshaller">
            <summary>
            IntentSummary Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.IntentSummaryMarshaller.Marshall(Amazon.Lex.Model.IntentSummary,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.Lex.Model.Internal.MarshallTransformations.IntentSummaryMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.IntentSummaryUnmarshaller">
            <summary>
            Response Unmarshaller for IntentSummary Object
            </summary>  
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.IntentSummaryUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#Lex#Model#IntentSummary,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.IntentSummaryUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.IntentSummaryUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.InternalFailureExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for InternalFailureException Object
            </summary>  
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.InternalFailureExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.InternalFailureExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.InternalFailureExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.LimitExceededExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for LimitExceededException Object
            </summary>  
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.LimitExceededExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.LimitExceededExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.LimitExceededExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.LoopDetectedExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for LoopDetectedException Object
            </summary>  
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.LoopDetectedExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.LoopDetectedExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.LoopDetectedExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.NotAcceptableExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for NotAcceptableException Object
            </summary>  
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.NotAcceptableExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.NotAcceptableExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.NotAcceptableExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.NotFoundExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for NotFoundException Object
            </summary>  
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.NotFoundExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.NotFoundExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.NotFoundExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.PostContentRequestMarshaller">
            <summary>
            PostContent Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.PostContentRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.PostContentRequestMarshaller.Marshall(Amazon.Lex.Model.PostContentRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.PostContentRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.PostContentResponseUnmarshaller">
            <summary>
            Response Unmarshaller for PostContent operation
            </summary>  
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.PostContentResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.PostContentResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.PostContentResponseUnmarshaller.HasStreamingProperty">
            <summary>
            Overriden to return true indicating the response contains streaming data.
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.PostContentResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.PostTextRequestMarshaller">
            <summary>
            PostText Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.PostTextRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.PostTextRequestMarshaller.Marshall(Amazon.Lex.Model.PostTextRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.PostTextRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.PostTextResponseUnmarshaller">
            <summary>
            Response Unmarshaller for PostText operation
            </summary>  
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.PostTextResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.PostTextResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.PostTextResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.PredictedIntentUnmarshaller">
            <summary>
            Response Unmarshaller for PredictedIntent Object
            </summary>  
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.PredictedIntentUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#Lex#Model#PredictedIntent,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.PredictedIntentUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.PredictedIntentUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.PutSessionRequestMarshaller">
            <summary>
            PutSession Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.PutSessionRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.PutSessionRequestMarshaller.Marshall(Amazon.Lex.Model.PutSessionRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.PutSessionRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.PutSessionResponseUnmarshaller">
            <summary>
            Response Unmarshaller for PutSession operation
            </summary>  
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.PutSessionResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.PutSessionResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.PutSessionResponseUnmarshaller.HasStreamingProperty">
            <summary>
            Overriden to return true indicating the response contains streaming data.
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.PutSessionResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.RequestTimeoutExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for RequestTimeoutException Object
            </summary>  
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.RequestTimeoutExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.RequestTimeoutExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.RequestTimeoutExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.ResponseCardUnmarshaller">
            <summary>
            Response Unmarshaller for ResponseCard Object
            </summary>  
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.ResponseCardUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#Lex#Model#ResponseCard,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.ResponseCardUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.ResponseCardUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.SentimentResponseUnmarshaller">
            <summary>
            Response Unmarshaller for SentimentResponse Object
            </summary>  
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.SentimentResponseUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#Lex#Model#SentimentResponse,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.SentimentResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.SentimentResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.Internal.MarshallTransformations.UnsupportedMediaTypeExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for UnsupportedMediaTypeException Object
            </summary>  
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.UnsupportedMediaTypeExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Lex.Model.Internal.MarshallTransformations.UnsupportedMediaTypeExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Lex.Model.Internal.MarshallTransformations.UnsupportedMediaTypeExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Lex.Model.LimitExceededException">
            <summary>
            Exceeded a limit.
            </summary>
        </member>
        <member name="M:Amazon.Lex.Model.LimitExceededException.#ctor(System.String)">
            <summary>
            Constructs a new LimitExceededException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.Lex.Model.LimitExceededException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of LimitExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Lex.Model.LimitExceededException.#ctor(System.Exception)">
            <summary>
            Construct instance of LimitExceededException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Lex.Model.LimitExceededException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LimitExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Lex.Model.LimitExceededException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LimitExceededException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Lex.Model.LimitExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the LimitExceededException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.Lex.Model.LimitExceededException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="P:Amazon.Lex.Model.LimitExceededException.RetryAfterSeconds">
            <summary>
            Gets and sets the property RetryAfterSeconds.
            </summary>
        </member>
        <member name="T:Amazon.Lex.Model.LoopDetectedException">
            <summary>
            This exception is not used.
            </summary>
        </member>
        <member name="M:Amazon.Lex.Model.LoopDetectedException.#ctor(System.String)">
            <summary>
            Constructs a new LoopDetectedException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.Lex.Model.LoopDetectedException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of LoopDetectedException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Lex.Model.LoopDetectedException.#ctor(System.Exception)">
            <summary>
            Construct instance of LoopDetectedException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Lex.Model.LoopDetectedException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LoopDetectedException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Lex.Model.LoopDetectedException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LoopDetectedException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Lex.Model.LoopDetectedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the LoopDetectedException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.Lex.Model.LoopDetectedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.Lex.Model.NotAcceptableException">
            <summary>
            The accept header in the request does not have a valid value.
            </summary>
        </member>
        <member name="M:Amazon.Lex.Model.NotAcceptableException.#ctor(System.String)">
            <summary>
            Constructs a new NotAcceptableException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.Lex.Model.NotAcceptableException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of NotAcceptableException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Lex.Model.NotAcceptableException.#ctor(System.Exception)">
            <summary>
            Construct instance of NotAcceptableException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Lex.Model.NotAcceptableException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of NotAcceptableException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Lex.Model.NotAcceptableException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of NotAcceptableException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Lex.Model.NotAcceptableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the NotAcceptableException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.Lex.Model.NotAcceptableException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.Lex.Model.NotFoundException">
            <summary>
            The resource (such as the Amazon Lex bot or an alias) that is referred to is not found.
            </summary>
        </member>
        <member name="M:Amazon.Lex.Model.NotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new NotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.Lex.Model.NotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of NotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Lex.Model.NotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of NotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Lex.Model.NotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of NotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Lex.Model.NotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of NotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Lex.Model.NotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the NotFoundException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.Lex.Model.NotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.Lex.Model.PostContentRequest">
            <summary>
            Container for the parameters to the PostContent operation.
            Sends user input (text or speech) to Amazon Lex. Clients use this API to send text
            and audio requests to Amazon Lex at runtime. Amazon Lex interprets the user input
            using the machine learning model that it built for the bot. 
            
             
            <para>
            The <code>PostContent</code> operation supports audio input at 8kHz and 16kHz. You
            can use 8kHz audio to achieve higher speech recognition accuracy in telephone audio
            applications. 
            </para>
             
            <para>
             In response, Amazon Lex returns the next message to convey to the user. Consider
            the following example messages: 
            </para>
             <ul> <li> 
            <para>
             For a user input "I would like a pizza," Amazon Lex might return a response with
            a message eliciting slot data (for example, <code>PizzaSize</code>): "What size pizza
            would you like?". 
            </para>
             </li> <li> 
            <para>
             After the user provides all of the pizza order information, Amazon Lex might return
            a response with a message to get user confirmation: "Order the pizza?". 
            </para>
             </li> <li> 
            <para>
             After the user replies "Yes" to the confirmation prompt, Amazon Lex might return
            a conclusion statement: "Thank you, your cheese pizza has been ordered.". 
            </para>
             </li> </ul> 
            <para>
             Not all Amazon Lex messages require a response from the user. For example, conclusion
            statements do not require a response. Some messages require only a yes or no response.
            In addition to the <code>message</code>, Amazon Lex provides additional context about
            the message in the response that you can use to enhance client behavior, such as displaying
            the appropriate client user interface. Consider the following examples: 
            </para>
             <ul> <li> 
            <para>
             If the message is to elicit slot data, Amazon Lex returns the following context information:
            
            </para>
             <ul> <li> 
            <para>
             <code>x-amz-lex-dialog-state</code> header set to <code>ElicitSlot</code> 
            </para>
             </li> <li> 
            <para>
             <code>x-amz-lex-intent-name</code> header set to the intent name in the current context
            
            </para>
             </li> <li> 
            <para>
             <code>x-amz-lex-slot-to-elicit</code> header set to the slot name for which the <code>message</code>
            is eliciting information 
            </para>
             </li> <li> 
            <para>
             <code>x-amz-lex-slots</code> header set to a map of slots configured for the intent
            with their current values 
            </para>
             </li> </ul> </li> <li> 
            <para>
             If the message is a confirmation prompt, the <code>x-amz-lex-dialog-state</code>
            header is set to <code>Confirmation</code> and the <code>x-amz-lex-slot-to-elicit</code>
            header is omitted. 
            </para>
             </li> <li> 
            <para>
             If the message is a clarification prompt configured for the intent, indicating that
            the user intent is not understood, the <code>x-amz-dialog-state</code> header is set
            to <code>ElicitIntent</code> and the <code>x-amz-slot-to-elicit</code> header is omitted.
            
            </para>
             </li> </ul> 
            <para>
             In addition, Amazon Lex also returns your application-specific <code>sessionAttributes</code>.
            For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html">Managing
            Conversation Context</a>. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostContentRequest.Accept">
            <summary>
            Gets and sets the property Accept. 
            <para>
             You pass this value as the <code>Accept</code> HTTP header. 
            </para>
             
            <para>
             The message Amazon Lex returns in the response can be either text or speech based
            on the <code>Accept</code> HTTP header value in the request. 
            </para>
             <ul> <li> 
            <para>
             If the value is <code>text/plain; charset=utf-8</code>, Amazon Lex returns text in
            the response. 
            </para>
             </li> <li> 
            <para>
             If the value begins with <code>audio/</code>, Amazon Lex returns speech in the response.
            Amazon Lex uses Amazon Polly to generate the speech (using the configuration you specified
            in the <code>Accept</code> header). For example, if you specify <code>audio/mpeg</code>
            as the value, Amazon Lex returns speech in the MPEG format.
            </para>
             </li> <li> 
            <para>
            If the value is <code>audio/pcm</code>, the speech returned is <code>audio/pcm</code>
            in 16-bit, little endian format. 
            </para>
             </li> <li> 
            <para>
            The following are the accepted values:
            </para>
             <ul> <li> 
            <para>
            audio/mpeg
            </para>
             </li> <li> 
            <para>
            audio/ogg
            </para>
             </li> <li> 
            <para>
            audio/pcm
            </para>
             </li> <li> 
            <para>
            text/plain; charset=utf-8
            </para>
             </li> <li> 
            <para>
            audio/* (defaults to mpeg)
            </para>
             </li> </ul> </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostContentRequest.ActiveContexts">
            <summary>
            Gets and sets the property ActiveContexts. 
            <para>
            A list of contexts active for the request. A context can be activated when a previous
            intent is fulfilled, or by including the context in the request,
            </para>
             
            <para>
            If you don't specify a list of contexts, Amazon Lex will use the current list of contexts
            for the session. If you specify an empty list, all contexts for the session are cleared.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostContentRequest.BotAlias">
            <summary>
            Gets and sets the property BotAlias. 
            <para>
            Alias of the Amazon Lex bot.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostContentRequest.BotName">
            <summary>
            Gets and sets the property BotName. 
            <para>
            Name of the Amazon Lex bot.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostContentRequest.ContentType">
            <summary>
            Gets and sets the property ContentType. 
            <para>
             You pass this value as the <code>Content-Type</code> HTTP header. 
            </para>
             
            <para>
             Indicates the audio format or text. The header value must start with one of the following
            prefixes: 
            </para>
             <ul> <li> 
            <para>
            PCM format, audio data must be in little-endian byte order.
            </para>
             <ul> <li> 
            <para>
            audio/l16; rate=16000; channels=1
            </para>
             </li> <li> 
            <para>
            audio/x-l16; sample-rate=16000; channel-count=1
            </para>
             </li> <li> 
            <para>
            audio/lpcm; sample-rate=8000; sample-size-bits=16; channel-count=1; is-big-endian=false
            
            </para>
             </li> </ul> </li> <li> 
            <para>
            Opus format
            </para>
             <ul> <li> 
            <para>
            audio/x-cbr-opus-with-preamble; preamble-size=0; bit-rate=256000; frame-size-milliseconds=4
            </para>
             </li> </ul> </li> <li> 
            <para>
            Text format
            </para>
             <ul> <li> 
            <para>
            text/plain; charset=utf-8
            </para>
             </li> </ul> </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostContentRequest.InputStream">
            <summary>
            Gets and sets the property InputStream. 
            <para>
             User input in PCM or Opus audio format or text format as described in the <code>Content-Type</code>
            HTTP header. 
            </para>
             
            <para>
            You can stream audio data to Amazon Lex or you can create a local buffer that captures
            all of the audio data before sending. In general, you get better performance if you
            stream audio data rather than buffering the data locally.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostContentRequest.RequestAttributes">
            <summary>
            Gets and sets the property RequestAttributes. 
            <para>
            You pass this value as the <code>x-amz-lex-request-attributes</code> HTTP header.
            </para>
             
            <para>
            Request-specific information passed between Amazon Lex and a client application. The
            value must be a JSON serialized and base64 encoded map with string keys and values.
            The total size of the <code>requestAttributes</code> and <code>sessionAttributes</code>
            headers is limited to 12 KB.
            </para>
             
            <para>
            The namespace <code>x-amz-lex:</code> is reserved for special attributes. Don't create
            any request attributes with the prefix <code>x-amz-lex:</code>.
            </para>
             
            <para>
            For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs">Setting
            Request Attributes</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostContentRequest.SessionAttributes">
            <summary>
            Gets and sets the property SessionAttributes. 
            <para>
            You pass this value as the <code>x-amz-lex-session-attributes</code> HTTP header.
            </para>
             
            <para>
            Application-specific information passed between Amazon Lex and a client application.
            The value must be a JSON serialized and base64 encoded map with string keys and values.
            The total size of the <code>sessionAttributes</code> and <code>requestAttributes</code>
            headers is limited to 12 KB.
            </para>
             
            <para>
            For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs">Setting
            Session Attributes</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostContentRequest.UserId">
            <summary>
            Gets and sets the property UserId. 
            <para>
            The ID of the client application user. Amazon Lex uses this to identify a user's conversation
            with your bot. At runtime, each request must contain the <code>userID</code> field.
            </para>
             
            <para>
            To decide the user ID to use for your application, consider the following factors.
            </para>
             <ul> <li> 
            <para>
            The <code>userID</code> field must not contain any personally identifiable information
            of the user, for example, name, personal identification numbers, or other end user
            personal information.
            </para>
             </li> <li> 
            <para>
            If you want a user to start a conversation on one device and continue on another device,
            use a user-specific identifier.
            </para>
             </li> <li> 
            <para>
            If you want the same user to be able to have two independent conversations on two
            different devices, choose a device-specific identifier.
            </para>
             </li> <li> 
            <para>
            A user can't have two independent conversations with two different versions of the
            same bot. For example, a user can't have a conversation with the PROD and BETA versions
            of the same bot. If you anticipate that a user will need to have conversation with
            two different versions, for example, while testing, include the bot alias in the user
            ID to separate the two conversations.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="M:Amazon.Lex.Model.PostContentRequest.CreateSigner">
            <summary>
            Get the signer to use for this request.
            </summary>
            <returns>A signer for this request.</returns>
        </member>
        <member name="T:Amazon.Lex.Model.PostContentResponse">
            <summary>
            This is the response object from the PostContent operation.
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostContentResponse.ActiveContexts">
            <summary>
            Gets and sets the property ActiveContexts. 
            <para>
            A list of active contexts for the session. A context can be set when an intent is
            fulfilled or by calling the <code>PostContent</code>, <code>PostText</code>, or <code>PutSession</code>
            operation.
            </para>
             
            <para>
            You can use a context to control the intents that can follow up an intent, or to modify
            the operation of your application.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostContentResponse.AlternativeIntents">
            <summary>
            Gets and sets the property AlternativeIntents. 
            <para>
            One to four alternative intents that may be applicable to the user's intent.
            </para>
             
            <para>
            Each alternative includes a score that indicates how confident Amazon Lex is that
            the intent matches the user's intent. The intents are sorted by the confidence score.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostContentResponse.AudioStream">
            <summary>
            Gets and sets the property AudioStream. 
            <para>
            The prompt (or statement) to convey to the user. This is based on the bot configuration
            and context. For example, if Amazon Lex did not understand the user intent, it sends
            the <code>clarificationPrompt</code> configured for the bot. If the intent requires
            confirmation before taking the fulfillment action, it sends the <code>confirmationPrompt</code>.
            Another example: Suppose that the Lambda function successfully fulfilled the intent,
            and sent a message to convey to the user. Then Amazon Lex sends that message in the
            response. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostContentResponse.BotVersion">
            <summary>
            Gets and sets the property BotVersion. 
            <para>
            The version of the bot that responded to the conversation. You can use this information
            to help determine if one version of a bot is performing better than another version.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostContentResponse.ContentType">
            <summary>
            Gets and sets the property ContentType. 
            <para>
            Content type as specified in the <code>Accept</code> HTTP header in the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostContentResponse.DialogState">
            <summary>
            Gets and sets the property DialogState. 
            <para>
            Identifies the current state of the user interaction. Amazon Lex returns one of the
            following values as <code>dialogState</code>. The client can optionally use this information
            to customize the user interface. 
            </para>
             <ul> <li> 
            <para>
             <code>ElicitIntent</code> - Amazon Lex wants to elicit the user's intent. Consider
            the following examples: 
            </para>
             
            <para>
             For example, a user might utter an intent ("I want to order a pizza"). If Amazon
            Lex cannot infer the user intent from this utterance, it will return this dialog state.
            
            </para>
             </li> <li> 
            <para>
             <code>ConfirmIntent</code> - Amazon Lex is expecting a "yes" or "no" response. 
            </para>
             
            <para>
            For example, Amazon Lex wants user confirmation before fulfilling an intent. Instead
            of a simple "yes" or "no" response, a user might respond with additional information.
            For example, "yes, but make it a thick crust pizza" or "no, I want to order a drink."
            Amazon Lex can process such additional information (in these examples, update the
            crust type slot or change the intent from OrderPizza to OrderDrink). 
            </para>
             </li> <li> 
            <para>
             <code>ElicitSlot</code> - Amazon Lex is expecting the value of a slot for the current
            intent. 
            </para>
             
            <para>
             For example, suppose that in the response Amazon Lex sends this message: "What size
            pizza would you like?". A user might reply with the slot value (e.g., "medium"). The
            user might also provide additional information in the response (e.g., "medium thick
            crust pizza"). Amazon Lex can process such additional information appropriately. 
            </para>
             </li> <li> 
            <para>
             <code>Fulfilled</code> - Conveys that the Lambda function has successfully fulfilled
            the intent. 
            </para>
             </li> <li> 
            <para>
             <code>ReadyForFulfillment</code> - Conveys that the client has to fulfill the request.
            
            </para>
             </li> <li> 
            <para>
             <code>Failed</code> - Conveys that the conversation with the user failed. 
            </para>
             
            <para>
             This can happen for various reasons, including that the user does not provide an
            appropriate response to prompts from the service (you can configure how many times
            Amazon Lex can prompt a user for specific information), or if the Lambda function
            fails to fulfill the intent. 
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostContentResponse.EncodedInputTranscript">
            <summary>
            Gets and sets the property EncodedInputTranscript. 
            <para>
            The text used to process the request.
            </para>
             
            <para>
            If the input was an audio stream, the <code>encodedInputTranscript</code> field contains
            the text extracted from the audio stream. This is the text that is actually processed
            to recognize intents and slot values. You can use this information to determine if
            Amazon Lex is correctly processing the audio that you send.
            </para>
             
            <para>
            The <code>encodedInputTranscript</code> field is base-64 encoded. You must decode
            the field before you can use the value.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostContentResponse.EncodedMessage">
            <summary>
            Gets and sets the property EncodedMessage. 
            <para>
            The message to convey to the user. The message can come from the bot's configuration
            or from a Lambda function.
            </para>
             
            <para>
            If the intent is not configured with a Lambda function, or if the Lambda function
            returned <code>Delegate</code> as the <code>dialogAction.type</code> in its response,
            Amazon Lex decides on the next course of action and selects an appropriate message
            from the bot's configuration based on the current interaction context. For example,
            if Amazon Lex isn't able to understand user input, it uses a clarification prompt
            message.
            </para>
             
            <para>
            When you create an intent you can assign messages to groups. When messages are assigned
            to groups Amazon Lex returns one message from each group in the response. The message
            field is an escaped JSON string containing the messages. For more information about
            the structure of the JSON string returned, see <a>msg-prompts-formats</a>.
            </para>
             
            <para>
            If the Lambda function returns a message, Amazon Lex passes it to the client in its
            response.
            </para>
             
            <para>
            The <code>encodedMessage</code> field is base-64 encoded. You must decode the field
            before you can use the value.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostContentResponse.InputTranscript">
            <summary>
            Gets and sets the property InputTranscript. 
            <para>
            The text used to process the request.
            </para>
             
            <para>
            You can use this field only in the de-DE, en-AU, en-GB, en-US, es-419, es-ES, es-US,
            fr-CA, fr-FR, and it-IT locales. In all other locales, the <code>inputTranscript</code>
            field is null. You should use the <code>encodedInputTranscript</code> field instead.
            </para>
             
            <para>
            If the input was an audio stream, the <code>inputTranscript</code> field contains
            the text extracted from the audio stream. This is the text that is actually processed
            to recognize intents and slot values. You can use this information to determine if
            Amazon Lex is correctly processing the audio that you send.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostContentResponse.IntentName">
            <summary>
            Gets and sets the property IntentName. 
            <para>
            Current user intent that Amazon Lex is aware of.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostContentResponse.Message">
            <summary>
            Gets and sets the property Message. 
            <para>
            You can only use this field in the de-DE, en-AU, en-GB, en-US, es-419, es-ES, es-US,
            fr-CA, fr-FR, and it-IT locales. In all other locales, the <code>message</code> field
            is null. You should use the <code>encodedMessage</code> field instead.
            </para>
             
            <para>
            The message to convey to the user. The message can come from the bot's configuration
            or from a Lambda function.
            </para>
             
            <para>
            If the intent is not configured with a Lambda function, or if the Lambda function
            returned <code>Delegate</code> as the <code>dialogAction.type</code> in its response,
            Amazon Lex decides on the next course of action and selects an appropriate message
            from the bot's configuration based on the current interaction context. For example,
            if Amazon Lex isn't able to understand user input, it uses a clarification prompt
            message.
            </para>
             
            <para>
            When you create an intent you can assign messages to groups. When messages are assigned
            to groups Amazon Lex returns one message from each group in the response. The message
            field is an escaped JSON string containing the messages. For more information about
            the structure of the JSON string returned, see <a>msg-prompts-formats</a>.
            </para>
             
            <para>
            If the Lambda function returns a message, Amazon Lex passes it to the client in its
            response.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostContentResponse.MessageFormat">
            <summary>
            Gets and sets the property MessageFormat. 
            <para>
            The format of the response message. One of the following values:
            </para>
             <ul> <li> 
            <para>
             <code>PlainText</code> - The message contains plain UTF-8 text.
            </para>
             </li> <li> 
            <para>
             <code>CustomPayload</code> - The message is a custom format for the client.
            </para>
             </li> <li> 
            <para>
             <code>SSML</code> - The message contains text formatted for voice output.
            </para>
             </li> <li> 
            <para>
             <code>Composite</code> - The message contains an escaped JSON object containing one
            or more messages from the groups that messages were assigned to when the intent was
            created.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostContentResponse.NluIntentConfidence">
            <summary>
            Gets and sets the property NluIntentConfidence. 
            <para>
            Provides a score that indicates how confident Amazon Lex is that the returned intent
            is the one that matches the user's intent. The score is between 0.0 and 1.0.
            </para>
             
            <para>
            The score is a relative score, not an absolute score. The score may change based on
            improvements to Amazon Lex. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostContentResponse.SentimentResponse">
            <summary>
            Gets and sets the property SentimentResponse. 
            <para>
            The sentiment expressed in an utterance.
            </para>
             
            <para>
            When the bot is configured to send utterances to Amazon Comprehend for sentiment analysis,
            this field contains the result of the analysis.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostContentResponse.SessionAttributes">
            <summary>
            Gets and sets the property SessionAttributes. 
            <para>
             Map of key/value pairs representing the session-specific context information. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostContentResponse.SessionId">
            <summary>
            Gets and sets the property SessionId. 
            <para>
            The unique identifier for the session.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostContentResponse.Slots">
            <summary>
            Gets and sets the property Slots. 
            <para>
            Map of zero or more intent slots (name/value pairs) Amazon Lex detected from the user
            input during the conversation. The field is base-64 encoded.
            </para>
             
            <para>
            Amazon Lex creates a resolution list containing likely values for a slot. The value
            that it returns is determined by the <code>valueSelectionStrategy</code> selected
            when the slot type was created or updated. If <code>valueSelectionStrategy</code>
            is set to <code>ORIGINAL_VALUE</code>, the value provided by the user is returned,
            if the user value is similar to the slot values. If <code>valueSelectionStrategy</code>
            is set to <code>TOP_RESOLUTION</code> Amazon Lex returns the first value in the resolution
            list or, if there is no resolution list, null. If you don't specify a <code>valueSelectionStrategy</code>,
            the default is <code>ORIGINAL_VALUE</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostContentResponse.SlotToElicit">
            <summary>
            Gets and sets the property SlotToElicit. 
            <para>
             If the <code>dialogState</code> value is <code>ElicitSlot</code>, returns the name
            of the slot for which Amazon Lex is eliciting a value. 
            </para>
            </summary>
        </member>
        <member name="M:Amazon.Lex.Model.PostContentResponse.Dispose">
            <summary>
            Disposes of all managed and unmanaged resources.
            </summary>
        </member>
        <member name="T:Amazon.Lex.Model.PostTextRequest">
            <summary>
            Container for the parameters to the PostText operation.
            Sends user input to Amazon Lex. Client applications can use this API to send requests
            to Amazon Lex at runtime. Amazon Lex then interprets the user input using the machine
            learning model it built for the bot. 
            
             
            <para>
             In response, Amazon Lex returns the next <code>message</code> to convey to the user
            an optional <code>responseCard</code> to display. Consider the following example messages:
            
            </para>
             <ul> <li> 
            <para>
             For a user input "I would like a pizza", Amazon Lex might return a response with
            a message eliciting slot data (for example, PizzaSize): "What size pizza would you
            like?" 
            </para>
             </li> <li> 
            <para>
             After the user provides all of the pizza order information, Amazon Lex might return
            a response with a message to obtain user confirmation "Proceed with the pizza order?".
            
            </para>
             </li> <li> 
            <para>
             After the user replies to a confirmation prompt with a "yes", Amazon Lex might return
            a conclusion statement: "Thank you, your cheese pizza has been ordered.". 
            </para>
             </li> </ul> 
            <para>
             Not all Amazon Lex messages require a user response. For example, a conclusion statement
            does not require a response. Some messages require only a "yes" or "no" user response.
            In addition to the <code>message</code>, Amazon Lex provides additional context about
            the message in the response that you might use to enhance client behavior, for example,
            to display the appropriate client user interface. These are the <code>slotToElicit</code>,
            <code>dialogState</code>, <code>intentName</code>, and <code>slots</code> fields in
            the response. Consider the following examples: 
            </para>
             <ul> <li> 
            <para>
            If the message is to elicit slot data, Amazon Lex returns the following context information:
            </para>
             <ul> <li> 
            <para>
             <code>dialogState</code> set to ElicitSlot 
            </para>
             </li> <li> 
            <para>
             <code>intentName</code> set to the intent name in the current context 
            </para>
             </li> <li> 
            <para>
             <code>slotToElicit</code> set to the slot name for which the <code>message</code>
            is eliciting information 
            </para>
             </li> <li> 
            <para>
             <code>slots</code> set to a map of slots, configured for the intent, with currently
            known values 
            </para>
             </li> </ul> </li> <li> 
            <para>
             If the message is a confirmation prompt, the <code>dialogState</code> is set to ConfirmIntent
            and <code>SlotToElicit</code> is set to null. 
            </para>
             </li> <li> 
            <para>
            If the message is a clarification prompt (configured for the intent) that indicates
            that user intent is not understood, the <code>dialogState</code> is set to ElicitIntent
            and <code>slotToElicit</code> is set to null. 
            </para>
             </li> </ul> 
            <para>
             In addition, Amazon Lex also returns your application-specific <code>sessionAttributes</code>.
            For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html">Managing
            Conversation Context</a>. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostTextRequest.ActiveContexts">
            <summary>
            Gets and sets the property ActiveContexts. 
            <para>
            A list of contexts active for the request. A context can be activated when a previous
            intent is fulfilled, or by including the context in the request,
            </para>
             
            <para>
            If you don't specify a list of contexts, Amazon Lex will use the current list of contexts
            for the session. If you specify an empty list, all contexts for the session are cleared.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostTextRequest.BotAlias">
            <summary>
            Gets and sets the property BotAlias. 
            <para>
            The alias of the Amazon Lex bot.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostTextRequest.BotName">
            <summary>
            Gets and sets the property BotName. 
            <para>
            The name of the Amazon Lex bot.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostTextRequest.InputText">
            <summary>
            Gets and sets the property InputText. 
            <para>
            The text that the user entered (Amazon Lex interprets this text).
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostTextRequest.RequestAttributes">
            <summary>
            Gets and sets the property RequestAttributes. 
            <para>
            Request-specific information passed between Amazon Lex and a client application.
            </para>
             
            <para>
            The namespace <code>x-amz-lex:</code> is reserved for special attributes. Don't create
            any request attributes with the prefix <code>x-amz-lex:</code>.
            </para>
             
            <para>
            For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs">Setting
            Request Attributes</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostTextRequest.SessionAttributes">
            <summary>
            Gets and sets the property SessionAttributes. 
            <para>
            Application-specific information passed between Amazon Lex and a client application.
            </para>
             
            <para>
            For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs">Setting
            Session Attributes</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostTextRequest.UserId">
            <summary>
            Gets and sets the property UserId. 
            <para>
            The ID of the client application user. Amazon Lex uses this to identify a user's conversation
            with your bot. At runtime, each request must contain the <code>userID</code> field.
            </para>
             
            <para>
            To decide the user ID to use for your application, consider the following factors.
            </para>
             <ul> <li> 
            <para>
            The <code>userID</code> field must not contain any personally identifiable information
            of the user, for example, name, personal identification numbers, or other end user
            personal information.
            </para>
             </li> <li> 
            <para>
            If you want a user to start a conversation on one device and continue on another device,
            use a user-specific identifier.
            </para>
             </li> <li> 
            <para>
            If you want the same user to be able to have two independent conversations on two
            different devices, choose a device-specific identifier.
            </para>
             </li> <li> 
            <para>
            A user can't have two independent conversations with two different versions of the
            same bot. For example, a user can't have a conversation with the PROD and BETA versions
            of the same bot. If you anticipate that a user will need to have conversation with
            two different versions, for example, while testing, include the bot alias in the user
            ID to separate the two conversations.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="T:Amazon.Lex.Model.PostTextResponse">
            <summary>
            This is the response object from the PostText operation.
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostTextResponse.ActiveContexts">
            <summary>
            Gets and sets the property ActiveContexts. 
            <para>
            A list of active contexts for the session. A context can be set when an intent is
            fulfilled or by calling the <code>PostContent</code>, <code>PostText</code>, or <code>PutSession</code>
            operation.
            </para>
             
            <para>
            You can use a context to control the intents that can follow up an intent, or to modify
            the operation of your application.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostTextResponse.AlternativeIntents">
            <summary>
            Gets and sets the property AlternativeIntents. 
            <para>
            One to four alternative intents that may be applicable to the user's intent.
            </para>
             
            <para>
            Each alternative includes a score that indicates how confident Amazon Lex is that
            the intent matches the user's intent. The intents are sorted by the confidence score.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostTextResponse.BotVersion">
            <summary>
            Gets and sets the property BotVersion. 
            <para>
            The version of the bot that responded to the conversation. You can use this information
            to help determine if one version of a bot is performing better than another version.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostTextResponse.DialogState">
            <summary>
            Gets and sets the property DialogState. 
            <para>
             Identifies the current state of the user interaction. Amazon Lex returns one of the
            following values as <code>dialogState</code>. The client can optionally use this information
            to customize the user interface. 
            </para>
             <ul> <li> 
            <para>
             <code>ElicitIntent</code> - Amazon Lex wants to elicit user intent. 
            </para>
             
            <para>
            For example, a user might utter an intent ("I want to order a pizza"). If Amazon Lex
            cannot infer the user intent from this utterance, it will return this dialogState.
            </para>
             </li> <li> 
            <para>
             <code>ConfirmIntent</code> - Amazon Lex is expecting a "yes" or "no" response. 
            </para>
             
            <para>
             For example, Amazon Lex wants user confirmation before fulfilling an intent. 
            </para>
             
            <para>
            Instead of a simple "yes" or "no," a user might respond with additional information.
            For example, "yes, but make it thick crust pizza" or "no, I want to order a drink".
            Amazon Lex can process such additional information (in these examples, update the
            crust type slot value, or change intent from OrderPizza to OrderDrink).
            </para>
             </li> <li> 
            <para>
             <code>ElicitSlot</code> - Amazon Lex is expecting a slot value for the current intent.
            
            </para>
             
            <para>
            For example, suppose that in the response Amazon Lex sends this message: "What size
            pizza would you like?". A user might reply with the slot value (e.g., "medium"). The
            user might also provide additional information in the response (e.g., "medium thick
            crust pizza"). Amazon Lex can process such additional information appropriately. 
            </para>
             </li> <li> 
            <para>
             <code>Fulfilled</code> - Conveys that the Lambda function configured for the intent
            has successfully fulfilled the intent. 
            </para>
             </li> <li> 
            <para>
             <code>ReadyForFulfillment</code> - Conveys that the client has to fulfill the intent.
            
            </para>
             </li> <li> 
            <para>
             <code>Failed</code> - Conveys that the conversation with the user failed. 
            </para>
             
            <para>
             This can happen for various reasons including that the user did not provide an appropriate
            response to prompts from the service (you can configure how many times Amazon Lex
            can prompt a user for specific information), or the Lambda function failed to fulfill
            the intent. 
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostTextResponse.IntentName">
            <summary>
            Gets and sets the property IntentName. 
            <para>
            The current user intent that Amazon Lex is aware of.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostTextResponse.Message">
            <summary>
            Gets and sets the property Message. 
            <para>
            The message to convey to the user. The message can come from the bot's configuration
            or from a Lambda function.
            </para>
             
            <para>
            If the intent is not configured with a Lambda function, or if the Lambda function
            returned <code>Delegate</code> as the <code>dialogAction.type</code> its response,
            Amazon Lex decides on the next course of action and selects an appropriate message
            from the bot's configuration based on the current interaction context. For example,
            if Amazon Lex isn't able to understand user input, it uses a clarification prompt
            message.
            </para>
             
            <para>
            When you create an intent you can assign messages to groups. When messages are assigned
            to groups Amazon Lex returns one message from each group in the response. The message
            field is an escaped JSON string containing the messages. For more information about
            the structure of the JSON string returned, see <a>msg-prompts-formats</a>.
            </para>
             
            <para>
            If the Lambda function returns a message, Amazon Lex passes it to the client in its
            response.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostTextResponse.MessageFormat">
            <summary>
            Gets and sets the property MessageFormat. 
            <para>
            The format of the response message. One of the following values:
            </para>
             <ul> <li> 
            <para>
             <code>PlainText</code> - The message contains plain UTF-8 text.
            </para>
             </li> <li> 
            <para>
             <code>CustomPayload</code> - The message is a custom format defined by the Lambda
            function.
            </para>
             </li> <li> 
            <para>
             <code>SSML</code> - The message contains text formatted for voice output.
            </para>
             </li> <li> 
            <para>
             <code>Composite</code> - The message contains an escaped JSON object containing one
            or more messages from the groups that messages were assigned to when the intent was
            created.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostTextResponse.NluIntentConfidence">
            <summary>
            Gets and sets the property NluIntentConfidence. 
            <para>
            Provides a score that indicates how confident Amazon Lex is that the returned intent
            is the one that matches the user's intent. The score is between 0.0 and 1.0. For more
            information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/confidence-scores.html">Confidence
            Scores</a>.
            </para>
             
            <para>
            The score is a relative score, not an absolute score. The score may change based on
            improvements to Amazon Lex.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostTextResponse.ResponseCard">
            <summary>
            Gets and sets the property ResponseCard. 
            <para>
            Represents the options that the user has to respond to the current prompt. Response
            Card can come from the bot configuration (in the Amazon Lex console, choose the settings
            button next to a slot) or from a code hook (Lambda function). 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostTextResponse.SentimentResponse">
            <summary>
            Gets and sets the property SentimentResponse. 
            <para>
            The sentiment expressed in and utterance.
            </para>
             
            <para>
            When the bot is configured to send utterances to Amazon Comprehend for sentiment analysis,
            this field contains the result of the analysis.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostTextResponse.SessionAttributes">
            <summary>
            Gets and sets the property SessionAttributes. 
            <para>
            A map of key-value pairs representing the session-specific context information.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostTextResponse.SessionId">
            <summary>
            Gets and sets the property SessionId. 
            <para>
            A unique identifier for the session.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostTextResponse.Slots">
            <summary>
            Gets and sets the property Slots. 
            <para>
             The intent slots that Amazon Lex detected from the user input in the conversation.
            
            </para>
             
            <para>
            Amazon Lex creates a resolution list containing likely values for a slot. The value
            that it returns is determined by the <code>valueSelectionStrategy</code> selected
            when the slot type was created or updated. If <code>valueSelectionStrategy</code>
            is set to <code>ORIGINAL_VALUE</code>, the value provided by the user is returned,
            if the user value is similar to the slot values. If <code>valueSelectionStrategy</code>
            is set to <code>TOP_RESOLUTION</code> Amazon Lex returns the first value in the resolution
            list or, if there is no resolution list, null. If you don't specify a <code>valueSelectionStrategy</code>,
            the default is <code>ORIGINAL_VALUE</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PostTextResponse.SlotToElicit">
            <summary>
            Gets and sets the property SlotToElicit. 
            <para>
            If the <code>dialogState</code> value is <code>ElicitSlot</code>, returns the name
            of the slot for which Amazon Lex is eliciting a value. 
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Lex.Model.PredictedIntent">
            <summary>
            An intent that Amazon Lex suggests satisfies the user's intent. Includes the name
            of the intent, the confidence that Amazon Lex has that the user's intent is satisfied,
            and the slots defined for the intent.
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PredictedIntent.IntentName">
            <summary>
            Gets and sets the property IntentName. 
            <para>
            The name of the intent that Amazon Lex suggests satisfies the user's intent.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PredictedIntent.NluIntentConfidence">
            <summary>
            Gets and sets the property NluIntentConfidence. 
            <para>
            Indicates how confident Amazon Lex is that an intent satisfies the user's intent.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PredictedIntent.Slots">
            <summary>
            Gets and sets the property Slots. 
            <para>
            The slot and slot values associated with the predicted intent.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Lex.Model.PutSessionRequest">
            <summary>
            Container for the parameters to the PutSession operation.
            Creates a new session or modifies an existing session with an Amazon Lex bot. Use
            this operation to enable your application to set the state of the bot.
            
             
            <para>
            For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/how-session-api.html">Managing
            Sessions</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PutSessionRequest.Accept">
            <summary>
            Gets and sets the property Accept. 
            <para>
            The message that Amazon Lex returns in the response can be either text or speech based
            depending on the value of this field.
            </para>
             <ul> <li> 
            <para>
            If the value is <code>text/plain; charset=utf-8</code>, Amazon Lex returns text in
            the response.
            </para>
             </li> <li> 
            <para>
            If the value begins with <code>audio/</code>, Amazon Lex returns speech in the response.
            Amazon Lex uses Amazon Polly to generate the speech in the configuration that you
            specify. For example, if you specify <code>audio/mpeg</code> as the value, Amazon
            Lex returns speech in the MPEG format.
            </para>
             </li> <li> 
            <para>
            If the value is <code>audio/pcm</code>, the speech is returned as <code>audio/pcm</code>
            in 16-bit, little endian format.
            </para>
             </li> <li> 
            <para>
            The following are the accepted values:
            </para>
             <ul> <li> 
            <para>
             <code>audio/mpeg</code> 
            </para>
             </li> <li> 
            <para>
             <code>audio/ogg</code> 
            </para>
             </li> <li> 
            <para>
             <code>audio/pcm</code> 
            </para>
             </li> <li> 
            <para>
             <code>audio/*</code> (defaults to mpeg)
            </para>
             </li> <li> 
            <para>
             <code>text/plain; charset=utf-8</code> 
            </para>
             </li> </ul> </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PutSessionRequest.ActiveContexts">
            <summary>
            Gets and sets the property ActiveContexts. 
            <para>
            A list of contexts active for the request. A context can be activated when a previous
            intent is fulfilled, or by including the context in the request,
            </para>
             
            <para>
            If you don't specify a list of contexts, Amazon Lex will use the current list of contexts
            for the session. If you specify an empty list, all contexts for the session are cleared.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PutSessionRequest.BotAlias">
            <summary>
            Gets and sets the property BotAlias. 
            <para>
            The alias in use for the bot that contains the session data.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PutSessionRequest.BotName">
            <summary>
            Gets and sets the property BotName. 
            <para>
            The name of the bot that contains the session data.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PutSessionRequest.DialogAction">
            <summary>
            Gets and sets the property DialogAction. 
            <para>
            Sets the next action that the bot should take to fulfill the conversation.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PutSessionRequest.RecentIntentSummaryView">
            <summary>
            Gets and sets the property RecentIntentSummaryView. 
            <para>
            A summary of the recent intents for the bot. You can use the intent summary view to
            set a checkpoint label on an intent and modify attributes of intents. You can also
            use it to remove or add intent summary objects to the list.
            </para>
             
            <para>
            An intent that you modify or add to the list must make sense for the bot. For example,
            the intent name must be valid for the bot. You must provide valid values for:
            </para>
             <ul> <li> 
            <para>
             <code>intentName</code> 
            </para>
             </li> <li> 
            <para>
            slot names
            </para>
             </li> <li> 
            <para>
             <code>slotToElict</code> 
            </para>
             </li> </ul> 
            <para>
            If you send the <code>recentIntentSummaryView</code> parameter in a <code>PutSession</code>
            request, the contents of the new summary view replaces the old summary view. For example,
            if a <code>GetSession</code> request returns three intents in the summary view and
            you call <code>PutSession</code> with one intent in the summary view, the next call
            to <code>GetSession</code> will only return one intent.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PutSessionRequest.SessionAttributes">
            <summary>
            Gets and sets the property SessionAttributes. 
            <para>
            Map of key/value pairs representing the session-specific context information. It contains
            application information passed between Amazon Lex and a client application.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PutSessionRequest.UserId">
            <summary>
            Gets and sets the property UserId. 
            <para>
            The ID of the client application user. Amazon Lex uses this to identify a user's conversation
            with your bot. 
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Lex.Model.PutSessionResponse">
            <summary>
            This is the response object from the PutSession operation.
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PutSessionResponse.ActiveContexts">
            <summary>
            Gets and sets the property ActiveContexts. 
            <para>
            A list of active contexts for the session.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PutSessionResponse.AudioStream">
            <summary>
            Gets and sets the property AudioStream. 
            <para>
            The audio version of the message to convey to the user.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PutSessionResponse.ContentType">
            <summary>
            Gets and sets the property ContentType. 
            <para>
            Content type as specified in the <code>Accept</code> HTTP header in the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PutSessionResponse.DialogState">
            <summary>
            Gets and sets the property DialogState.  <ul> <li> 
            <para>
             <code>ConfirmIntent</code> - Amazon Lex is expecting a "yes" or "no" response to
            confirm the intent before fulfilling an intent.
            </para>
             </li> <li> 
            <para>
             <code>ElicitIntent</code> - Amazon Lex wants to elicit the user's intent.
            </para>
             </li> <li> 
            <para>
             <code>ElicitSlot</code> - Amazon Lex is expecting the value of a slot for the current
            intent.
            </para>
             </li> <li> 
            <para>
             <code>Failed</code> - Conveys that the conversation with the user has failed. This
            can happen for various reasons, including the user does not provide an appropriate
            response to prompts from the service, or if the Lambda function fails to fulfill the
            intent.
            </para>
             </li> <li> 
            <para>
             <code>Fulfilled</code> - Conveys that the Lambda function has sucessfully fulfilled
            the intent.
            </para>
             </li> <li> 
            <para>
             <code>ReadyForFulfillment</code> - Conveys that the client has to fulfill the intent.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PutSessionResponse.EncodedMessage">
            <summary>
            Gets and sets the property EncodedMessage. 
            <para>
            The next message that should be presented to the user.
            </para>
             
            <para>
            The <code>encodedMessage</code> field is base-64 encoded. You must decode the field
            before you can use the value.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PutSessionResponse.IntentName">
            <summary>
            Gets and sets the property IntentName. 
            <para>
            The name of the current intent.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PutSessionResponse.Message">
            <summary>
            Gets and sets the property Message. 
            <para>
            The next message that should be presented to the user.
            </para>
             
            <para>
            You can only use this field in the de-DE, en-AU, en-GB, en-US, es-419, es-ES, es-US,
            fr-CA, fr-FR, and it-IT locales. In all other locales, the <code>message</code> field
            is null. You should use the <code>encodedMessage</code> field instead.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PutSessionResponse.MessageFormat">
            <summary>
            Gets and sets the property MessageFormat. 
            <para>
            The format of the response message. One of the following values:
            </para>
             <ul> <li> 
            <para>
             <code>PlainText</code> - The message contains plain UTF-8 text.
            </para>
             </li> <li> 
            <para>
             <code>CustomPayload</code> - The message is a custom format for the client.
            </para>
             </li> <li> 
            <para>
             <code>SSML</code> - The message contains text formatted for voice output.
            </para>
             </li> <li> 
            <para>
             <code>Composite</code> - The message contains an escaped JSON object containing one
            or more messages from the groups that messages were assigned to when the intent was
            created.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PutSessionResponse.SessionAttributes">
            <summary>
            Gets and sets the property SessionAttributes. 
            <para>
            Map of key/value pairs representing session-specific context information.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PutSessionResponse.SessionId">
            <summary>
            Gets and sets the property SessionId. 
            <para>
            A unique identifier for the session.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PutSessionResponse.Slots">
            <summary>
            Gets and sets the property Slots. 
            <para>
            Map of zero or more intent slots Amazon Lex detected from the user input during the
            conversation.
            </para>
             
            <para>
            Amazon Lex creates a resolution list containing likely values for a slot. The value
            that it returns is determined by the <code>valueSelectionStrategy</code> selected
            when the slot type was created or updated. If <code>valueSelectionStrategy</code>
            is set to <code>ORIGINAL_VALUE</code>, the value provided by the user is returned,
            if the user value is similar to the slot values. If <code>valueSelectionStrategy</code>
            is set to <code>TOP_RESOLUTION</code> Amazon Lex returns the first value in the resolution
            list or, if there is no resolution list, null. If you don't specify a <code>valueSelectionStrategy</code>
            the default is <code>ORIGINAL_VALUE</code>. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.PutSessionResponse.SlotToElicit">
            <summary>
            Gets and sets the property SlotToElicit. 
            <para>
            If the <code>dialogState</code> is <code>ElicitSlot</code>, returns the name of the
            slot for which Amazon Lex is eliciting a value.
            </para>
            </summary>
        </member>
        <member name="M:Amazon.Lex.Model.PutSessionResponse.Dispose">
            <summary>
            Disposes of all managed and unmanaged resources.
            </summary>
        </member>
        <member name="T:Amazon.Lex.Model.RequestTimeoutException">
            <summary>
            The input speech is too long.
            </summary>
        </member>
        <member name="M:Amazon.Lex.Model.RequestTimeoutException.#ctor(System.String)">
            <summary>
            Constructs a new RequestTimeoutException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.Lex.Model.RequestTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of RequestTimeoutException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Lex.Model.RequestTimeoutException.#ctor(System.Exception)">
            <summary>
            Construct instance of RequestTimeoutException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Lex.Model.RequestTimeoutException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of RequestTimeoutException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Lex.Model.RequestTimeoutException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of RequestTimeoutException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Lex.Model.RequestTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the RequestTimeoutException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.Lex.Model.RequestTimeoutException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.Lex.Model.ResponseCard">
            <summary>
            If you configure a response card when creating your bots, Amazon Lex substitutes the
            session attributes and slot values that are available, and then returns it. The response
            card can also come from a Lambda function ( <code>dialogCodeHook</code> and <code>fulfillmentActivity</code>
            on an intent).
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.ResponseCard.ContentType">
            <summary>
            Gets and sets the property ContentType. 
            <para>
            The content type of the response.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.ResponseCard.GenericAttachments">
            <summary>
            Gets and sets the property GenericAttachments. 
            <para>
            An array of attachment objects representing options.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.ResponseCard.Version">
            <summary>
            Gets and sets the property Version. 
            <para>
            The version of the response card format.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Lex.Model.SentimentResponse">
            <summary>
            The sentiment expressed in an utterance.
            
             
            <para>
            When the bot is configured to send utterances to Amazon Comprehend for sentiment analysis,
            this field structure contains the result of the analysis.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.SentimentResponse.SentimentLabel">
            <summary>
            Gets and sets the property SentimentLabel. 
            <para>
            The inferred sentiment that Amazon Comprehend has the highest confidence in.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Lex.Model.SentimentResponse.SentimentScore">
            <summary>
            Gets and sets the property SentimentScore. 
            <para>
            The likelihood that the sentiment was correctly inferred.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Lex.Model.UnsupportedMediaTypeException">
            <summary>
            The Content-Type header (<code>PostContent</code> API) has an invalid value.
            </summary>
        </member>
        <member name="M:Amazon.Lex.Model.UnsupportedMediaTypeException.#ctor(System.String)">
            <summary>
            Constructs a new UnsupportedMediaTypeException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.Lex.Model.UnsupportedMediaTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of UnsupportedMediaTypeException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Lex.Model.UnsupportedMediaTypeException.#ctor(System.Exception)">
            <summary>
            Construct instance of UnsupportedMediaTypeException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Lex.Model.UnsupportedMediaTypeException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of UnsupportedMediaTypeException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Lex.Model.UnsupportedMediaTypeException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of UnsupportedMediaTypeException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Lex.Model.UnsupportedMediaTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the UnsupportedMediaTypeException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.Lex.Model.UnsupportedMediaTypeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.Lex.AmazonLexRequest">
            <summary>
            Base class for Lex operation requests.
            </summary>
        </member>
        <member name="T:Amazon.Lex.ConfirmationStatus">
            <summary>
            Constants used for properties of type ConfirmationStatus.
            </summary>
        </member>
        <member name="F:Amazon.Lex.ConfirmationStatus.Confirmed">
            <summary>
            Constant Confirmed for ConfirmationStatus
            </summary>
        </member>
        <member name="F:Amazon.Lex.ConfirmationStatus.Denied">
            <summary>
            Constant Denied for ConfirmationStatus
            </summary>
        </member>
        <member name="F:Amazon.Lex.ConfirmationStatus.None">
            <summary>
            Constant None for ConfirmationStatus
            </summary>
        </member>
        <member name="M:Amazon.Lex.ConfirmationStatus.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.Lex.ConfirmationStatus.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.Lex.ConfirmationStatus.op_Implicit(System.String)~Amazon.Lex.ConfirmationStatus">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.Lex.ContentType">
            <summary>
            Constants used for properties of type ContentType.
            </summary>
        </member>
        <member name="F:Amazon.Lex.ContentType.ApplicationVndAmazonawsCardGeneric">
            <summary>
            Constant ApplicationVndAmazonawsCardGeneric for ContentType
            </summary>
        </member>
        <member name="M:Amazon.Lex.ContentType.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.Lex.ContentType.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.Lex.ContentType.op_Implicit(System.String)~Amazon.Lex.ContentType">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.Lex.DialogActionType">
            <summary>
            Constants used for properties of type DialogActionType.
            </summary>
        </member>
        <member name="F:Amazon.Lex.DialogActionType.Close">
            <summary>
            Constant Close for DialogActionType
            </summary>
        </member>
        <member name="F:Amazon.Lex.DialogActionType.ConfirmIntent">
            <summary>
            Constant ConfirmIntent for DialogActionType
            </summary>
        </member>
        <member name="F:Amazon.Lex.DialogActionType.Delegate">
            <summary>
            Constant Delegate for DialogActionType
            </summary>
        </member>
        <member name="F:Amazon.Lex.DialogActionType.ElicitIntent">
            <summary>
            Constant ElicitIntent for DialogActionType
            </summary>
        </member>
        <member name="F:Amazon.Lex.DialogActionType.ElicitSlot">
            <summary>
            Constant ElicitSlot for DialogActionType
            </summary>
        </member>
        <member name="M:Amazon.Lex.DialogActionType.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.Lex.DialogActionType.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.Lex.DialogActionType.op_Implicit(System.String)~Amazon.Lex.DialogActionType">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.Lex.DialogState">
            <summary>
            Constants used for properties of type DialogState.
            </summary>
        </member>
        <member name="F:Amazon.Lex.DialogState.ConfirmIntent">
            <summary>
            Constant ConfirmIntent for DialogState
            </summary>
        </member>
        <member name="F:Amazon.Lex.DialogState.ElicitIntent">
            <summary>
            Constant ElicitIntent for DialogState
            </summary>
        </member>
        <member name="F:Amazon.Lex.DialogState.ElicitSlot">
            <summary>
            Constant ElicitSlot for DialogState
            </summary>
        </member>
        <member name="F:Amazon.Lex.DialogState.Failed">
            <summary>
            Constant Failed for DialogState
            </summary>
        </member>
        <member name="F:Amazon.Lex.DialogState.Fulfilled">
            <summary>
            Constant Fulfilled for DialogState
            </summary>
        </member>
        <member name="F:Amazon.Lex.DialogState.ReadyForFulfillment">
            <summary>
            Constant ReadyForFulfillment for DialogState
            </summary>
        </member>
        <member name="M:Amazon.Lex.DialogState.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.Lex.DialogState.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.Lex.DialogState.op_Implicit(System.String)~Amazon.Lex.DialogState">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.Lex.FulfillmentState">
            <summary>
            Constants used for properties of type FulfillmentState.
            </summary>
        </member>
        <member name="F:Amazon.Lex.FulfillmentState.Failed">
            <summary>
            Constant Failed for FulfillmentState
            </summary>
        </member>
        <member name="F:Amazon.Lex.FulfillmentState.Fulfilled">
            <summary>
            Constant Fulfilled for FulfillmentState
            </summary>
        </member>
        <member name="F:Amazon.Lex.FulfillmentState.ReadyForFulfillment">
            <summary>
            Constant ReadyForFulfillment for FulfillmentState
            </summary>
        </member>
        <member name="M:Amazon.Lex.FulfillmentState.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.Lex.FulfillmentState.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.Lex.FulfillmentState.op_Implicit(System.String)~Amazon.Lex.FulfillmentState">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.Lex.MessageFormatType">
            <summary>
            Constants used for properties of type MessageFormatType.
            </summary>
        </member>
        <member name="F:Amazon.Lex.MessageFormatType.Composite">
            <summary>
            Constant Composite for MessageFormatType
            </summary>
        </member>
        <member name="F:Amazon.Lex.MessageFormatType.CustomPayload">
            <summary>
            Constant CustomPayload for MessageFormatType
            </summary>
        </member>
        <member name="F:Amazon.Lex.MessageFormatType.PlainText">
            <summary>
            Constant PlainText for MessageFormatType
            </summary>
        </member>
        <member name="F:Amazon.Lex.MessageFormatType.SSML">
            <summary>
            Constant SSML for MessageFormatType
            </summary>
        </member>
        <member name="M:Amazon.Lex.MessageFormatType.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.Lex.MessageFormatType.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.Lex.MessageFormatType.op_Implicit(System.String)~Amazon.Lex.MessageFormatType">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.Lex.AmazonLexClient">
             <summary>
             Implementation for accessing Lex
            
             Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set
             of operations (API). Your conversational bot uses the runtime API to understand user
             utterances (user input text or voice). For example, suppose a user says "I want pizza",
             your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes
             that the user request is for the OrderPizza intent (one of the intents defined in
             the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit
             required information (slot values, such as pizza size and crust type), and then performs
             fulfillment activity (that you configured when you created the bot). You use the build-time
             API to create and manage your Amazon Lex bot. For a list of build-time operations,
             see the build-time API, .
             </summary>
        </member>
        <member name="M:Amazon.Lex.AmazonLexClient.#ctor">
             <summary>
             Constructs AmazonLexClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
        </member>
        <member name="M:Amazon.Lex.AmazonLexClient.#ctor(Amazon.RegionEndpoint)">
             <summary>
             Constructs AmazonLexClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
             <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.Lex.AmazonLexClient.#ctor(Amazon.Lex.AmazonLexConfig)">
             <summary>
             Constructs AmazonLexClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
             <param name="config">The AmazonLexClient Configuration Object</param>
        </member>
        <member name="M:Amazon.Lex.AmazonLexClient.#ctor(Amazon.Runtime.AWSCredentials)">
            <summary>
            Constructs AmazonLexClient with AWS Credentials
            </summary>
            <param name="credentials">AWS Credentials</param>
        </member>
        <member name="M:Amazon.Lex.AmazonLexClient.#ctor(Amazon.Runtime.AWSCredentials,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonLexClient with AWS Credentials
            </summary>
            <param name="credentials">AWS Credentials</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.Lex.AmazonLexClient.#ctor(Amazon.Runtime.AWSCredentials,Amazon.Lex.AmazonLexConfig)">
            <summary>
            Constructs AmazonLexClient with AWS Credentials and an
            AmazonLexClient Configuration object.
            </summary>
            <param name="credentials">AWS Credentials</param>
            <param name="clientConfig">The AmazonLexClient Configuration Object</param>
        </member>
        <member name="M:Amazon.Lex.AmazonLexClient.#ctor(System.String,System.String)">
            <summary>
            Constructs AmazonLexClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
        </member>
        <member name="M:Amazon.Lex.AmazonLexClient.#ctor(System.String,System.String,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonLexClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.Lex.AmazonLexClient.#ctor(System.String,System.String,Amazon.Lex.AmazonLexConfig)">
            <summary>
            Constructs AmazonLexClient with AWS Access Key ID, AWS Secret Key and an
            AmazonLexClient Configuration object. 
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="clientConfig">The AmazonLexClient Configuration Object</param>
        </member>
        <member name="M:Amazon.Lex.AmazonLexClient.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs AmazonLexClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
        </member>
        <member name="M:Amazon.Lex.AmazonLexClient.#ctor(System.String,System.String,System.String,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonLexClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.Lex.AmazonLexClient.#ctor(System.String,System.String,System.String,Amazon.Lex.AmazonLexConfig)">
            <summary>
            Constructs AmazonLexClient with AWS Access Key ID, AWS Secret Key and an
            AmazonLexClient Configuration object. 
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
            <param name="clientConfig">The AmazonLexClient Configuration Object</param>
        </member>
        <member name="M:Amazon.Lex.AmazonLexClient.CreateSigner">
            <summary>
            Creates the signer for the service.
            </summary>
        </member>
        <member name="P:Amazon.Lex.AmazonLexClient.ServiceMetadata">
            <summary>
            Capture metadata for the service.
            </summary>
        </member>
        <member name="M:Amazon.Lex.AmazonLexClient.Dispose(System.Boolean)">
            <summary>
            Disposes the service client.
            </summary>
        </member>
        <member name="M:Amazon.Lex.AmazonLexClient.DeleteSession(Amazon.Lex.Model.DeleteSessionRequest)">
            <summary>
            Removes session information for a specified bot, alias, and user ID.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteSession service method.</param>
            
            <returns>The response from the DeleteSession service method, as returned by Lex.</returns>
            <exception cref="T:Amazon.Lex.Model.BadRequestException">
            Request validation failed, there is no usable message in the context, or the bot
            build failed, is still in progress, or contains unbuilt changes.
            </exception>
            <exception cref="T:Amazon.Lex.Model.ConflictException">
            Two clients are using the same AWS account, Amazon Lex bot, and user ID.
            </exception>
            <exception cref="T:Amazon.Lex.Model.InternalFailureException">
            Internal service error. Retry the call.
            </exception>
            <exception cref="T:Amazon.Lex.Model.LimitExceededException">
            Exceeded a limit.
            </exception>
            <exception cref="T:Amazon.Lex.Model.NotFoundException">
            The resource (such as the Amazon Lex bot or an alias) that is referred to is not found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/runtime.lex-2016-11-28/DeleteSession">REST API Reference for DeleteSession Operation</seealso>
        </member>
        <member name="M:Amazon.Lex.AmazonLexClient.DeleteSessionAsync(Amazon.Lex.Model.DeleteSessionRequest,System.Threading.CancellationToken)">
            <summary>
            Removes session information for a specified bot, alias, and user ID.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteSession service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeleteSession service method, as returned by Lex.</returns>
            <exception cref="T:Amazon.Lex.Model.BadRequestException">
            Request validation failed, there is no usable message in the context, or the bot
            build failed, is still in progress, or contains unbuilt changes.
            </exception>
            <exception cref="T:Amazon.Lex.Model.ConflictException">
            Two clients are using the same AWS account, Amazon Lex bot, and user ID.
            </exception>
            <exception cref="T:Amazon.Lex.Model.InternalFailureException">
            Internal service error. Retry the call.
            </exception>
            <exception cref="T:Amazon.Lex.Model.LimitExceededException">
            Exceeded a limit.
            </exception>
            <exception cref="T:Amazon.Lex.Model.NotFoundException">
            The resource (such as the Amazon Lex bot or an alias) that is referred to is not found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/runtime.lex-2016-11-28/DeleteSession">REST API Reference for DeleteSession Operation</seealso>
        </member>
        <member name="M:Amazon.Lex.AmazonLexClient.GetSession(Amazon.Lex.Model.GetSessionRequest)">
            <summary>
            Returns session information for a specified bot, alias, and user ID.
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetSession service method.</param>
            
            <returns>The response from the GetSession service method, as returned by Lex.</returns>
            <exception cref="T:Amazon.Lex.Model.BadRequestException">
            Request validation failed, there is no usable message in the context, or the bot
            build failed, is still in progress, or contains unbuilt changes.
            </exception>
            <exception cref="T:Amazon.Lex.Model.InternalFailureException">
            Internal service error. Retry the call.
            </exception>
            <exception cref="T:Amazon.Lex.Model.LimitExceededException">
            Exceeded a limit.
            </exception>
            <exception cref="T:Amazon.Lex.Model.NotFoundException">
            The resource (such as the Amazon Lex bot or an alias) that is referred to is not found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/runtime.lex-2016-11-28/GetSession">REST API Reference for GetSession Operation</seealso>
        </member>
        <member name="M:Amazon.Lex.AmazonLexClient.GetSessionAsync(Amazon.Lex.Model.GetSessionRequest,System.Threading.CancellationToken)">
            <summary>
            Returns session information for a specified bot, alias, and user ID.
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetSession service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetSession service method, as returned by Lex.</returns>
            <exception cref="T:Amazon.Lex.Model.BadRequestException">
            Request validation failed, there is no usable message in the context, or the bot
            build failed, is still in progress, or contains unbuilt changes.
            </exception>
            <exception cref="T:Amazon.Lex.Model.InternalFailureException">
            Internal service error. Retry the call.
            </exception>
            <exception cref="T:Amazon.Lex.Model.LimitExceededException">
            Exceeded a limit.
            </exception>
            <exception cref="T:Amazon.Lex.Model.NotFoundException">
            The resource (such as the Amazon Lex bot or an alias) that is referred to is not found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/runtime.lex-2016-11-28/GetSession">REST API Reference for GetSession Operation</seealso>
        </member>
        <member name="M:Amazon.Lex.AmazonLexClient.PostContent(Amazon.Lex.Model.PostContentRequest)">
            <summary>
            Sends user input (text or speech) to Amazon Lex. Clients use this API to send text
            and audio requests to Amazon Lex at runtime. Amazon Lex interprets the user input
            using the machine learning model that it built for the bot. 
            
             
            <para>
            The <code>PostContent</code> operation supports audio input at 8kHz and 16kHz. You
            can use 8kHz audio to achieve higher speech recognition accuracy in telephone audio
            applications. 
            </para>
             
            <para>
             In response, Amazon Lex returns the next message to convey to the user. Consider
            the following example messages: 
            </para>
             <ul> <li> 
            <para>
             For a user input "I would like a pizza," Amazon Lex might return a response with
            a message eliciting slot data (for example, <code>PizzaSize</code>): "What size pizza
            would you like?". 
            </para>
             </li> <li> 
            <para>
             After the user provides all of the pizza order information, Amazon Lex might return
            a response with a message to get user confirmation: "Order the pizza?". 
            </para>
             </li> <li> 
            <para>
             After the user replies "Yes" to the confirmation prompt, Amazon Lex might return
            a conclusion statement: "Thank you, your cheese pizza has been ordered.". 
            </para>
             </li> </ul> 
            <para>
             Not all Amazon Lex messages require a response from the user. For example, conclusion
            statements do not require a response. Some messages require only a yes or no response.
            In addition to the <code>message</code>, Amazon Lex provides additional context about
            the message in the response that you can use to enhance client behavior, such as displaying
            the appropriate client user interface. Consider the following examples: 
            </para>
             <ul> <li> 
            <para>
             If the message is to elicit slot data, Amazon Lex returns the following context information:
            
            </para>
             <ul> <li> 
            <para>
             <code>x-amz-lex-dialog-state</code> header set to <code>ElicitSlot</code> 
            </para>
             </li> <li> 
            <para>
             <code>x-amz-lex-intent-name</code> header set to the intent name in the current context
            
            </para>
             </li> <li> 
            <para>
             <code>x-amz-lex-slot-to-elicit</code> header set to the slot name for which the <code>message</code>
            is eliciting information 
            </para>
             </li> <li> 
            <para>
             <code>x-amz-lex-slots</code> header set to a map of slots configured for the intent
            with their current values 
            </para>
             </li> </ul> </li> <li> 
            <para>
             If the message is a confirmation prompt, the <code>x-amz-lex-dialog-state</code>
            header is set to <code>Confirmation</code> and the <code>x-amz-lex-slot-to-elicit</code>
            header is omitted. 
            </para>
             </li> <li> 
            <para>
             If the message is a clarification prompt configured for the intent, indicating that
            the user intent is not understood, the <code>x-amz-dialog-state</code> header is set
            to <code>ElicitIntent</code> and the <code>x-amz-slot-to-elicit</code> header is omitted.
            
            </para>
             </li> </ul> 
            <para>
             In addition, Amazon Lex also returns your application-specific <code>sessionAttributes</code>.
            For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html">Managing
            Conversation Context</a>. 
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PostContent service method.</param>
            
            <returns>The response from the PostContent service method, as returned by Lex.</returns>
            <exception cref="T:Amazon.Lex.Model.BadGatewayException">
            Either the Amazon Lex bot is still building, or one of the dependent services (Amazon
            Polly, AWS Lambda) failed with an internal service error.
            </exception>
            <exception cref="T:Amazon.Lex.Model.BadRequestException">
            Request validation failed, there is no usable message in the context, or the bot
            build failed, is still in progress, or contains unbuilt changes.
            </exception>
            <exception cref="T:Amazon.Lex.Model.ConflictException">
            Two clients are using the same AWS account, Amazon Lex bot, and user ID.
            </exception>
            <exception cref="T:Amazon.Lex.Model.DependencyFailedException">
            One of the dependencies, such as AWS Lambda or Amazon Polly, threw an exception.
            For example, 
            
             <ul> <li> 
            <para>
            If Amazon Lex does not have sufficient permissions to call a Lambda function.
            </para>
             </li> <li> 
            <para>
            If a Lambda function takes longer than 30 seconds to execute.
            </para>
             </li> <li> 
            <para>
            If a fulfillment Lambda function returns a <code>Delegate</code> dialog action without
            removing any slot values.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.Lex.Model.InternalFailureException">
            Internal service error. Retry the call.
            </exception>
            <exception cref="T:Amazon.Lex.Model.LimitExceededException">
            Exceeded a limit.
            </exception>
            <exception cref="T:Amazon.Lex.Model.LoopDetectedException">
            This exception is not used.
            </exception>
            <exception cref="T:Amazon.Lex.Model.NotAcceptableException">
            The accept header in the request does not have a valid value.
            </exception>
            <exception cref="T:Amazon.Lex.Model.NotFoundException">
            The resource (such as the Amazon Lex bot or an alias) that is referred to is not found.
            </exception>
            <exception cref="T:Amazon.Lex.Model.RequestTimeoutException">
            The input speech is too long.
            </exception>
            <exception cref="T:Amazon.Lex.Model.UnsupportedMediaTypeException">
            The Content-Type header (<code>PostContent</code> API) has an invalid value.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/runtime.lex-2016-11-28/PostContent">REST API Reference for PostContent Operation</seealso>
        </member>
        <member name="M:Amazon.Lex.AmazonLexClient.PostContentAsync(Amazon.Lex.Model.PostContentRequest,System.Threading.CancellationToken)">
            <summary>
            Sends user input (text or speech) to Amazon Lex. Clients use this API to send text
            and audio requests to Amazon Lex at runtime. Amazon Lex interprets the user input
            using the machine learning model that it built for the bot. 
            
             
            <para>
            The <code>PostContent</code> operation supports audio input at 8kHz and 16kHz. You
            can use 8kHz audio to achieve higher speech recognition accuracy in telephone audio
            applications. 
            </para>
             
            <para>
             In response, Amazon Lex returns the next message to convey to the user. Consider
            the following example messages: 
            </para>
             <ul> <li> 
            <para>
             For a user input "I would like a pizza," Amazon Lex might return a response with
            a message eliciting slot data (for example, <code>PizzaSize</code>): "What size pizza
            would you like?". 
            </para>
             </li> <li> 
            <para>
             After the user provides all of the pizza order information, Amazon Lex might return
            a response with a message to get user confirmation: "Order the pizza?". 
            </para>
             </li> <li> 
            <para>
             After the user replies "Yes" to the confirmation prompt, Amazon Lex might return
            a conclusion statement: "Thank you, your cheese pizza has been ordered.". 
            </para>
             </li> </ul> 
            <para>
             Not all Amazon Lex messages require a response from the user. For example, conclusion
            statements do not require a response. Some messages require only a yes or no response.
            In addition to the <code>message</code>, Amazon Lex provides additional context about
            the message in the response that you can use to enhance client behavior, such as displaying
            the appropriate client user interface. Consider the following examples: 
            </para>
             <ul> <li> 
            <para>
             If the message is to elicit slot data, Amazon Lex returns the following context information:
            
            </para>
             <ul> <li> 
            <para>
             <code>x-amz-lex-dialog-state</code> header set to <code>ElicitSlot</code> 
            </para>
             </li> <li> 
            <para>
             <code>x-amz-lex-intent-name</code> header set to the intent name in the current context
            
            </para>
             </li> <li> 
            <para>
             <code>x-amz-lex-slot-to-elicit</code> header set to the slot name for which the <code>message</code>
            is eliciting information 
            </para>
             </li> <li> 
            <para>
             <code>x-amz-lex-slots</code> header set to a map of slots configured for the intent
            with their current values 
            </para>
             </li> </ul> </li> <li> 
            <para>
             If the message is a confirmation prompt, the <code>x-amz-lex-dialog-state</code>
            header is set to <code>Confirmation</code> and the <code>x-amz-lex-slot-to-elicit</code>
            header is omitted. 
            </para>
             </li> <li> 
            <para>
             If the message is a clarification prompt configured for the intent, indicating that
            the user intent is not understood, the <code>x-amz-dialog-state</code> header is set
            to <code>ElicitIntent</code> and the <code>x-amz-slot-to-elicit</code> header is omitted.
            
            </para>
             </li> </ul> 
            <para>
             In addition, Amazon Lex also returns your application-specific <code>sessionAttributes</code>.
            For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html">Managing
            Conversation Context</a>. 
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PostContent service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PostContent service method, as returned by Lex.</returns>
            <exception cref="T:Amazon.Lex.Model.BadGatewayException">
            Either the Amazon Lex bot is still building, or one of the dependent services (Amazon
            Polly, AWS Lambda) failed with an internal service error.
            </exception>
            <exception cref="T:Amazon.Lex.Model.BadRequestException">
            Request validation failed, there is no usable message in the context, or the bot
            build failed, is still in progress, or contains unbuilt changes.
            </exception>
            <exception cref="T:Amazon.Lex.Model.ConflictException">
            Two clients are using the same AWS account, Amazon Lex bot, and user ID.
            </exception>
            <exception cref="T:Amazon.Lex.Model.DependencyFailedException">
            One of the dependencies, such as AWS Lambda or Amazon Polly, threw an exception.
            For example, 
            
             <ul> <li> 
            <para>
            If Amazon Lex does not have sufficient permissions to call a Lambda function.
            </para>
             </li> <li> 
            <para>
            If a Lambda function takes longer than 30 seconds to execute.
            </para>
             </li> <li> 
            <para>
            If a fulfillment Lambda function returns a <code>Delegate</code> dialog action without
            removing any slot values.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.Lex.Model.InternalFailureException">
            Internal service error. Retry the call.
            </exception>
            <exception cref="T:Amazon.Lex.Model.LimitExceededException">
            Exceeded a limit.
            </exception>
            <exception cref="T:Amazon.Lex.Model.LoopDetectedException">
            This exception is not used.
            </exception>
            <exception cref="T:Amazon.Lex.Model.NotAcceptableException">
            The accept header in the request does not have a valid value.
            </exception>
            <exception cref="T:Amazon.Lex.Model.NotFoundException">
            The resource (such as the Amazon Lex bot or an alias) that is referred to is not found.
            </exception>
            <exception cref="T:Amazon.Lex.Model.RequestTimeoutException">
            The input speech is too long.
            </exception>
            <exception cref="T:Amazon.Lex.Model.UnsupportedMediaTypeException">
            The Content-Type header (<code>PostContent</code> API) has an invalid value.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/runtime.lex-2016-11-28/PostContent">REST API Reference for PostContent Operation</seealso>
        </member>
        <member name="M:Amazon.Lex.AmazonLexClient.PostText(Amazon.Lex.Model.PostTextRequest)">
            <summary>
            Sends user input to Amazon Lex. Client applications can use this API to send requests
            to Amazon Lex at runtime. Amazon Lex then interprets the user input using the machine
            learning model it built for the bot. 
            
             
            <para>
             In response, Amazon Lex returns the next <code>message</code> to convey to the user
            an optional <code>responseCard</code> to display. Consider the following example messages:
            
            </para>
             <ul> <li> 
            <para>
             For a user input "I would like a pizza", Amazon Lex might return a response with
            a message eliciting slot data (for example, PizzaSize): "What size pizza would you
            like?" 
            </para>
             </li> <li> 
            <para>
             After the user provides all of the pizza order information, Amazon Lex might return
            a response with a message to obtain user confirmation "Proceed with the pizza order?".
            
            </para>
             </li> <li> 
            <para>
             After the user replies to a confirmation prompt with a "yes", Amazon Lex might return
            a conclusion statement: "Thank you, your cheese pizza has been ordered.". 
            </para>
             </li> </ul> 
            <para>
             Not all Amazon Lex messages require a user response. For example, a conclusion statement
            does not require a response. Some messages require only a "yes" or "no" user response.
            In addition to the <code>message</code>, Amazon Lex provides additional context about
            the message in the response that you might use to enhance client behavior, for example,
            to display the appropriate client user interface. These are the <code>slotToElicit</code>,
            <code>dialogState</code>, <code>intentName</code>, and <code>slots</code> fields in
            the response. Consider the following examples: 
            </para>
             <ul> <li> 
            <para>
            If the message is to elicit slot data, Amazon Lex returns the following context information:
            </para>
             <ul> <li> 
            <para>
             <code>dialogState</code> set to ElicitSlot 
            </para>
             </li> <li> 
            <para>
             <code>intentName</code> set to the intent name in the current context 
            </para>
             </li> <li> 
            <para>
             <code>slotToElicit</code> set to the slot name for which the <code>message</code>
            is eliciting information 
            </para>
             </li> <li> 
            <para>
             <code>slots</code> set to a map of slots, configured for the intent, with currently
            known values 
            </para>
             </li> </ul> </li> <li> 
            <para>
             If the message is a confirmation prompt, the <code>dialogState</code> is set to ConfirmIntent
            and <code>SlotToElicit</code> is set to null. 
            </para>
             </li> <li> 
            <para>
            If the message is a clarification prompt (configured for the intent) that indicates
            that user intent is not understood, the <code>dialogState</code> is set to ElicitIntent
            and <code>slotToElicit</code> is set to null. 
            </para>
             </li> </ul> 
            <para>
             In addition, Amazon Lex also returns your application-specific <code>sessionAttributes</code>.
            For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html">Managing
            Conversation Context</a>. 
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PostText service method.</param>
            
            <returns>The response from the PostText service method, as returned by Lex.</returns>
            <exception cref="T:Amazon.Lex.Model.BadGatewayException">
            Either the Amazon Lex bot is still building, or one of the dependent services (Amazon
            Polly, AWS Lambda) failed with an internal service error.
            </exception>
            <exception cref="T:Amazon.Lex.Model.BadRequestException">
            Request validation failed, there is no usable message in the context, or the bot
            build failed, is still in progress, or contains unbuilt changes.
            </exception>
            <exception cref="T:Amazon.Lex.Model.ConflictException">
            Two clients are using the same AWS account, Amazon Lex bot, and user ID.
            </exception>
            <exception cref="T:Amazon.Lex.Model.DependencyFailedException">
            One of the dependencies, such as AWS Lambda or Amazon Polly, threw an exception.
            For example, 
            
             <ul> <li> 
            <para>
            If Amazon Lex does not have sufficient permissions to call a Lambda function.
            </para>
             </li> <li> 
            <para>
            If a Lambda function takes longer than 30 seconds to execute.
            </para>
             </li> <li> 
            <para>
            If a fulfillment Lambda function returns a <code>Delegate</code> dialog action without
            removing any slot values.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.Lex.Model.InternalFailureException">
            Internal service error. Retry the call.
            </exception>
            <exception cref="T:Amazon.Lex.Model.LimitExceededException">
            Exceeded a limit.
            </exception>
            <exception cref="T:Amazon.Lex.Model.LoopDetectedException">
            This exception is not used.
            </exception>
            <exception cref="T:Amazon.Lex.Model.NotFoundException">
            The resource (such as the Amazon Lex bot or an alias) that is referred to is not found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/runtime.lex-2016-11-28/PostText">REST API Reference for PostText Operation</seealso>
        </member>
        <member name="M:Amazon.Lex.AmazonLexClient.PostTextAsync(Amazon.Lex.Model.PostTextRequest,System.Threading.CancellationToken)">
            <summary>
            Sends user input to Amazon Lex. Client applications can use this API to send requests
            to Amazon Lex at runtime. Amazon Lex then interprets the user input using the machine
            learning model it built for the bot. 
            
             
            <para>
             In response, Amazon Lex returns the next <code>message</code> to convey to the user
            an optional <code>responseCard</code> to display. Consider the following example messages:
            
            </para>
             <ul> <li> 
            <para>
             For a user input "I would like a pizza", Amazon Lex might return a response with
            a message eliciting slot data (for example, PizzaSize): "What size pizza would you
            like?" 
            </para>
             </li> <li> 
            <para>
             After the user provides all of the pizza order information, Amazon Lex might return
            a response with a message to obtain user confirmation "Proceed with the pizza order?".
            
            </para>
             </li> <li> 
            <para>
             After the user replies to a confirmation prompt with a "yes", Amazon Lex might return
            a conclusion statement: "Thank you, your cheese pizza has been ordered.". 
            </para>
             </li> </ul> 
            <para>
             Not all Amazon Lex messages require a user response. For example, a conclusion statement
            does not require a response. Some messages require only a "yes" or "no" user response.
            In addition to the <code>message</code>, Amazon Lex provides additional context about
            the message in the response that you might use to enhance client behavior, for example,
            to display the appropriate client user interface. These are the <code>slotToElicit</code>,
            <code>dialogState</code>, <code>intentName</code>, and <code>slots</code> fields in
            the response. Consider the following examples: 
            </para>
             <ul> <li> 
            <para>
            If the message is to elicit slot data, Amazon Lex returns the following context information:
            </para>
             <ul> <li> 
            <para>
             <code>dialogState</code> set to ElicitSlot 
            </para>
             </li> <li> 
            <para>
             <code>intentName</code> set to the intent name in the current context 
            </para>
             </li> <li> 
            <para>
             <code>slotToElicit</code> set to the slot name for which the <code>message</code>
            is eliciting information 
            </para>
             </li> <li> 
            <para>
             <code>slots</code> set to a map of slots, configured for the intent, with currently
            known values 
            </para>
             </li> </ul> </li> <li> 
            <para>
             If the message is a confirmation prompt, the <code>dialogState</code> is set to ConfirmIntent
            and <code>SlotToElicit</code> is set to null. 
            </para>
             </li> <li> 
            <para>
            If the message is a clarification prompt (configured for the intent) that indicates
            that user intent is not understood, the <code>dialogState</code> is set to ElicitIntent
            and <code>slotToElicit</code> is set to null. 
            </para>
             </li> </ul> 
            <para>
             In addition, Amazon Lex also returns your application-specific <code>sessionAttributes</code>.
            For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html">Managing
            Conversation Context</a>. 
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PostText service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PostText service method, as returned by Lex.</returns>
            <exception cref="T:Amazon.Lex.Model.BadGatewayException">
            Either the Amazon Lex bot is still building, or one of the dependent services (Amazon
            Polly, AWS Lambda) failed with an internal service error.
            </exception>
            <exception cref="T:Amazon.Lex.Model.BadRequestException">
            Request validation failed, there is no usable message in the context, or the bot
            build failed, is still in progress, or contains unbuilt changes.
            </exception>
            <exception cref="T:Amazon.Lex.Model.ConflictException">
            Two clients are using the same AWS account, Amazon Lex bot, and user ID.
            </exception>
            <exception cref="T:Amazon.Lex.Model.DependencyFailedException">
            One of the dependencies, such as AWS Lambda or Amazon Polly, threw an exception.
            For example, 
            
             <ul> <li> 
            <para>
            If Amazon Lex does not have sufficient permissions to call a Lambda function.
            </para>
             </li> <li> 
            <para>
            If a Lambda function takes longer than 30 seconds to execute.
            </para>
             </li> <li> 
            <para>
            If a fulfillment Lambda function returns a <code>Delegate</code> dialog action without
            removing any slot values.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.Lex.Model.InternalFailureException">
            Internal service error. Retry the call.
            </exception>
            <exception cref="T:Amazon.Lex.Model.LimitExceededException">
            Exceeded a limit.
            </exception>
            <exception cref="T:Amazon.Lex.Model.LoopDetectedException">
            This exception is not used.
            </exception>
            <exception cref="T:Amazon.Lex.Model.NotFoundException">
            The resource (such as the Amazon Lex bot or an alias) that is referred to is not found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/runtime.lex-2016-11-28/PostText">REST API Reference for PostText Operation</seealso>
        </member>
        <member name="M:Amazon.Lex.AmazonLexClient.PutSession(Amazon.Lex.Model.PutSessionRequest)">
            <summary>
            Creates a new session or modifies an existing session with an Amazon Lex bot. Use
            this operation to enable your application to set the state of the bot.
            
             
            <para>
            For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/how-session-api.html">Managing
            Sessions</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutSession service method.</param>
            
            <returns>The response from the PutSession service method, as returned by Lex.</returns>
            <exception cref="T:Amazon.Lex.Model.BadGatewayException">
            Either the Amazon Lex bot is still building, or one of the dependent services (Amazon
            Polly, AWS Lambda) failed with an internal service error.
            </exception>
            <exception cref="T:Amazon.Lex.Model.BadRequestException">
            Request validation failed, there is no usable message in the context, or the bot
            build failed, is still in progress, or contains unbuilt changes.
            </exception>
            <exception cref="T:Amazon.Lex.Model.ConflictException">
            Two clients are using the same AWS account, Amazon Lex bot, and user ID.
            </exception>
            <exception cref="T:Amazon.Lex.Model.DependencyFailedException">
            One of the dependencies, such as AWS Lambda or Amazon Polly, threw an exception.
            For example, 
            
             <ul> <li> 
            <para>
            If Amazon Lex does not have sufficient permissions to call a Lambda function.
            </para>
             </li> <li> 
            <para>
            If a Lambda function takes longer than 30 seconds to execute.
            </para>
             </li> <li> 
            <para>
            If a fulfillment Lambda function returns a <code>Delegate</code> dialog action without
            removing any slot values.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.Lex.Model.InternalFailureException">
            Internal service error. Retry the call.
            </exception>
            <exception cref="T:Amazon.Lex.Model.LimitExceededException">
            Exceeded a limit.
            </exception>
            <exception cref="T:Amazon.Lex.Model.NotAcceptableException">
            The accept header in the request does not have a valid value.
            </exception>
            <exception cref="T:Amazon.Lex.Model.NotFoundException">
            The resource (such as the Amazon Lex bot or an alias) that is referred to is not found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/runtime.lex-2016-11-28/PutSession">REST API Reference for PutSession Operation</seealso>
        </member>
        <member name="M:Amazon.Lex.AmazonLexClient.PutSessionAsync(Amazon.Lex.Model.PutSessionRequest,System.Threading.CancellationToken)">
            <summary>
            Creates a new session or modifies an existing session with an Amazon Lex bot. Use
            this operation to enable your application to set the state of the bot.
            
             
            <para>
            For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/how-session-api.html">Managing
            Sessions</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutSession service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutSession service method, as returned by Lex.</returns>
            <exception cref="T:Amazon.Lex.Model.BadGatewayException">
            Either the Amazon Lex bot is still building, or one of the dependent services (Amazon
            Polly, AWS Lambda) failed with an internal service error.
            </exception>
            <exception cref="T:Amazon.Lex.Model.BadRequestException">
            Request validation failed, there is no usable message in the context, or the bot
            build failed, is still in progress, or contains unbuilt changes.
            </exception>
            <exception cref="T:Amazon.Lex.Model.ConflictException">
            Two clients are using the same AWS account, Amazon Lex bot, and user ID.
            </exception>
            <exception cref="T:Amazon.Lex.Model.DependencyFailedException">
            One of the dependencies, such as AWS Lambda or Amazon Polly, threw an exception.
            For example, 
            
             <ul> <li> 
            <para>
            If Amazon Lex does not have sufficient permissions to call a Lambda function.
            </para>
             </li> <li> 
            <para>
            If a Lambda function takes longer than 30 seconds to execute.
            </para>
             </li> <li> 
            <para>
            If a fulfillment Lambda function returns a <code>Delegate</code> dialog action without
            removing any slot values.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.Lex.Model.InternalFailureException">
            Internal service error. Retry the call.
            </exception>
            <exception cref="T:Amazon.Lex.Model.LimitExceededException">
            Exceeded a limit.
            </exception>
            <exception cref="T:Amazon.Lex.Model.NotAcceptableException">
            The accept header in the request does not have a valid value.
            </exception>
            <exception cref="T:Amazon.Lex.Model.NotFoundException">
            The resource (such as the Amazon Lex bot or an alias) that is referred to is not found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/runtime.lex-2016-11-28/PutSession">REST API Reference for PutSession Operation</seealso>
        </member>
        <member name="T:Amazon.Lex.IAmazonLex">
             <summary>
             Interface for accessing Lex
            
             Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set
             of operations (API). Your conversational bot uses the runtime API to understand user
             utterances (user input text or voice). For example, suppose a user says "I want pizza",
             your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes
             that the user request is for the OrderPizza intent (one of the intents defined in
             the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit
             required information (slot values, such as pizza size and crust type), and then performs
             fulfillment activity (that you configured when you created the bot). You use the build-time
             API to create and manage your Amazon Lex bot. For a list of build-time operations,
             see the build-time API, .
             </summary>
        </member>
        <member name="M:Amazon.Lex.IAmazonLex.DeleteSession(Amazon.Lex.Model.DeleteSessionRequest)">
            <summary>
            Removes session information for a specified bot, alias, and user ID.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteSession service method.</param>
            
            <returns>The response from the DeleteSession service method, as returned by Lex.</returns>
            <exception cref="T:Amazon.Lex.Model.BadRequestException">
            Request validation failed, there is no usable message in the context, or the bot
            build failed, is still in progress, or contains unbuilt changes.
            </exception>
            <exception cref="T:Amazon.Lex.Model.ConflictException">
            Two clients are using the same AWS account, Amazon Lex bot, and user ID.
            </exception>
            <exception cref="T:Amazon.Lex.Model.InternalFailureException">
            Internal service error. Retry the call.
            </exception>
            <exception cref="T:Amazon.Lex.Model.LimitExceededException">
            Exceeded a limit.
            </exception>
            <exception cref="T:Amazon.Lex.Model.NotFoundException">
            The resource (such as the Amazon Lex bot or an alias) that is referred to is not found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/runtime.lex-2016-11-28/DeleteSession">REST API Reference for DeleteSession Operation</seealso>
        </member>
        <member name="M:Amazon.Lex.IAmazonLex.DeleteSessionAsync(Amazon.Lex.Model.DeleteSessionRequest,System.Threading.CancellationToken)">
            <summary>
            Removes session information for a specified bot, alias, and user ID.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteSession service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeleteSession service method, as returned by Lex.</returns>
            <exception cref="T:Amazon.Lex.Model.BadRequestException">
            Request validation failed, there is no usable message in the context, or the bot
            build failed, is still in progress, or contains unbuilt changes.
            </exception>
            <exception cref="T:Amazon.Lex.Model.ConflictException">
            Two clients are using the same AWS account, Amazon Lex bot, and user ID.
            </exception>
            <exception cref="T:Amazon.Lex.Model.InternalFailureException">
            Internal service error. Retry the call.
            </exception>
            <exception cref="T:Amazon.Lex.Model.LimitExceededException">
            Exceeded a limit.
            </exception>
            <exception cref="T:Amazon.Lex.Model.NotFoundException">
            The resource (such as the Amazon Lex bot or an alias) that is referred to is not found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/runtime.lex-2016-11-28/DeleteSession">REST API Reference for DeleteSession Operation</seealso>
        </member>
        <member name="M:Amazon.Lex.IAmazonLex.GetSession(Amazon.Lex.Model.GetSessionRequest)">
            <summary>
            Returns session information for a specified bot, alias, and user ID.
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetSession service method.</param>
            
            <returns>The response from the GetSession service method, as returned by Lex.</returns>
            <exception cref="T:Amazon.Lex.Model.BadRequestException">
            Request validation failed, there is no usable message in the context, or the bot
            build failed, is still in progress, or contains unbuilt changes.
            </exception>
            <exception cref="T:Amazon.Lex.Model.InternalFailureException">
            Internal service error. Retry the call.
            </exception>
            <exception cref="T:Amazon.Lex.Model.LimitExceededException">
            Exceeded a limit.
            </exception>
            <exception cref="T:Amazon.Lex.Model.NotFoundException">
            The resource (such as the Amazon Lex bot or an alias) that is referred to is not found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/runtime.lex-2016-11-28/GetSession">REST API Reference for GetSession Operation</seealso>
        </member>
        <member name="M:Amazon.Lex.IAmazonLex.GetSessionAsync(Amazon.Lex.Model.GetSessionRequest,System.Threading.CancellationToken)">
            <summary>
            Returns session information for a specified bot, alias, and user ID.
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetSession service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetSession service method, as returned by Lex.</returns>
            <exception cref="T:Amazon.Lex.Model.BadRequestException">
            Request validation failed, there is no usable message in the context, or the bot
            build failed, is still in progress, or contains unbuilt changes.
            </exception>
            <exception cref="T:Amazon.Lex.Model.InternalFailureException">
            Internal service error. Retry the call.
            </exception>
            <exception cref="T:Amazon.Lex.Model.LimitExceededException">
            Exceeded a limit.
            </exception>
            <exception cref="T:Amazon.Lex.Model.NotFoundException">
            The resource (such as the Amazon Lex bot or an alias) that is referred to is not found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/runtime.lex-2016-11-28/GetSession">REST API Reference for GetSession Operation</seealso>
        </member>
        <member name="M:Amazon.Lex.IAmazonLex.PostContent(Amazon.Lex.Model.PostContentRequest)">
            <summary>
            Sends user input (text or speech) to Amazon Lex. Clients use this API to send text
            and audio requests to Amazon Lex at runtime. Amazon Lex interprets the user input
            using the machine learning model that it built for the bot. 
            
             
            <para>
            The <code>PostContent</code> operation supports audio input at 8kHz and 16kHz. You
            can use 8kHz audio to achieve higher speech recognition accuracy in telephone audio
            applications. 
            </para>
             
            <para>
             In response, Amazon Lex returns the next message to convey to the user. Consider
            the following example messages: 
            </para>
             <ul> <li> 
            <para>
             For a user input "I would like a pizza," Amazon Lex might return a response with
            a message eliciting slot data (for example, <code>PizzaSize</code>): "What size pizza
            would you like?". 
            </para>
             </li> <li> 
            <para>
             After the user provides all of the pizza order information, Amazon Lex might return
            a response with a message to get user confirmation: "Order the pizza?". 
            </para>
             </li> <li> 
            <para>
             After the user replies "Yes" to the confirmation prompt, Amazon Lex might return
            a conclusion statement: "Thank you, your cheese pizza has been ordered.". 
            </para>
             </li> </ul> 
            <para>
             Not all Amazon Lex messages require a response from the user. For example, conclusion
            statements do not require a response. Some messages require only a yes or no response.
            In addition to the <code>message</code>, Amazon Lex provides additional context about
            the message in the response that you can use to enhance client behavior, such as displaying
            the appropriate client user interface. Consider the following examples: 
            </para>
             <ul> <li> 
            <para>
             If the message is to elicit slot data, Amazon Lex returns the following context information:
            
            </para>
             <ul> <li> 
            <para>
             <code>x-amz-lex-dialog-state</code> header set to <code>ElicitSlot</code> 
            </para>
             </li> <li> 
            <para>
             <code>x-amz-lex-intent-name</code> header set to the intent name in the current context
            
            </para>
             </li> <li> 
            <para>
             <code>x-amz-lex-slot-to-elicit</code> header set to the slot name for which the <code>message</code>
            is eliciting information 
            </para>
             </li> <li> 
            <para>
             <code>x-amz-lex-slots</code> header set to a map of slots configured for the intent
            with their current values 
            </para>
             </li> </ul> </li> <li> 
            <para>
             If the message is a confirmation prompt, the <code>x-amz-lex-dialog-state</code>
            header is set to <code>Confirmation</code> and the <code>x-amz-lex-slot-to-elicit</code>
            header is omitted. 
            </para>
             </li> <li> 
            <para>
             If the message is a clarification prompt configured for the intent, indicating that
            the user intent is not understood, the <code>x-amz-dialog-state</code> header is set
            to <code>ElicitIntent</code> and the <code>x-amz-slot-to-elicit</code> header is omitted.
            
            </para>
             </li> </ul> 
            <para>
             In addition, Amazon Lex also returns your application-specific <code>sessionAttributes</code>.
            For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html">Managing
            Conversation Context</a>. 
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PostContent service method.</param>
            
            <returns>The response from the PostContent service method, as returned by Lex.</returns>
            <exception cref="T:Amazon.Lex.Model.BadGatewayException">
            Either the Amazon Lex bot is still building, or one of the dependent services (Amazon
            Polly, AWS Lambda) failed with an internal service error.
            </exception>
            <exception cref="T:Amazon.Lex.Model.BadRequestException">
            Request validation failed, there is no usable message in the context, or the bot
            build failed, is still in progress, or contains unbuilt changes.
            </exception>
            <exception cref="T:Amazon.Lex.Model.ConflictException">
            Two clients are using the same AWS account, Amazon Lex bot, and user ID.
            </exception>
            <exception cref="T:Amazon.Lex.Model.DependencyFailedException">
            One of the dependencies, such as AWS Lambda or Amazon Polly, threw an exception.
            For example, 
            
             <ul> <li> 
            <para>
            If Amazon Lex does not have sufficient permissions to call a Lambda function.
            </para>
             </li> <li> 
            <para>
            If a Lambda function takes longer than 30 seconds to execute.
            </para>
             </li> <li> 
            <para>
            If a fulfillment Lambda function returns a <code>Delegate</code> dialog action without
            removing any slot values.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.Lex.Model.InternalFailureException">
            Internal service error. Retry the call.
            </exception>
            <exception cref="T:Amazon.Lex.Model.LimitExceededException">
            Exceeded a limit.
            </exception>
            <exception cref="T:Amazon.Lex.Model.LoopDetectedException">
            This exception is not used.
            </exception>
            <exception cref="T:Amazon.Lex.Model.NotAcceptableException">
            The accept header in the request does not have a valid value.
            </exception>
            <exception cref="T:Amazon.Lex.Model.NotFoundException">
            The resource (such as the Amazon Lex bot or an alias) that is referred to is not found.
            </exception>
            <exception cref="T:Amazon.Lex.Model.RequestTimeoutException">
            The input speech is too long.
            </exception>
            <exception cref="T:Amazon.Lex.Model.UnsupportedMediaTypeException">
            The Content-Type header (<code>PostContent</code> API) has an invalid value.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/runtime.lex-2016-11-28/PostContent">REST API Reference for PostContent Operation</seealso>
        </member>
        <member name="M:Amazon.Lex.IAmazonLex.PostContentAsync(Amazon.Lex.Model.PostContentRequest,System.Threading.CancellationToken)">
            <summary>
            Sends user input (text or speech) to Amazon Lex. Clients use this API to send text
            and audio requests to Amazon Lex at runtime. Amazon Lex interprets the user input
            using the machine learning model that it built for the bot. 
            
             
            <para>
            The <code>PostContent</code> operation supports audio input at 8kHz and 16kHz. You
            can use 8kHz audio to achieve higher speech recognition accuracy in telephone audio
            applications. 
            </para>
             
            <para>
             In response, Amazon Lex returns the next message to convey to the user. Consider
            the following example messages: 
            </para>
             <ul> <li> 
            <para>
             For a user input "I would like a pizza," Amazon Lex might return a response with
            a message eliciting slot data (for example, <code>PizzaSize</code>): "What size pizza
            would you like?". 
            </para>
             </li> <li> 
            <para>
             After the user provides all of the pizza order information, Amazon Lex might return
            a response with a message to get user confirmation: "Order the pizza?". 
            </para>
             </li> <li> 
            <para>
             After the user replies "Yes" to the confirmation prompt, Amazon Lex might return
            a conclusion statement: "Thank you, your cheese pizza has been ordered.". 
            </para>
             </li> </ul> 
            <para>
             Not all Amazon Lex messages require a response from the user. For example, conclusion
            statements do not require a response. Some messages require only a yes or no response.
            In addition to the <code>message</code>, Amazon Lex provides additional context about
            the message in the response that you can use to enhance client behavior, such as displaying
            the appropriate client user interface. Consider the following examples: 
            </para>
             <ul> <li> 
            <para>
             If the message is to elicit slot data, Amazon Lex returns the following context information:
            
            </para>
             <ul> <li> 
            <para>
             <code>x-amz-lex-dialog-state</code> header set to <code>ElicitSlot</code> 
            </para>
             </li> <li> 
            <para>
             <code>x-amz-lex-intent-name</code> header set to the intent name in the current context
            
            </para>
             </li> <li> 
            <para>
             <code>x-amz-lex-slot-to-elicit</code> header set to the slot name for which the <code>message</code>
            is eliciting information 
            </para>
             </li> <li> 
            <para>
             <code>x-amz-lex-slots</code> header set to a map of slots configured for the intent
            with their current values 
            </para>
             </li> </ul> </li> <li> 
            <para>
             If the message is a confirmation prompt, the <code>x-amz-lex-dialog-state</code>
            header is set to <code>Confirmation</code> and the <code>x-amz-lex-slot-to-elicit</code>
            header is omitted. 
            </para>
             </li> <li> 
            <para>
             If the message is a clarification prompt configured for the intent, indicating that
            the user intent is not understood, the <code>x-amz-dialog-state</code> header is set
            to <code>ElicitIntent</code> and the <code>x-amz-slot-to-elicit</code> header is omitted.
            
            </para>
             </li> </ul> 
            <para>
             In addition, Amazon Lex also returns your application-specific <code>sessionAttributes</code>.
            For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html">Managing
            Conversation Context</a>. 
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PostContent service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PostContent service method, as returned by Lex.</returns>
            <exception cref="T:Amazon.Lex.Model.BadGatewayException">
            Either the Amazon Lex bot is still building, or one of the dependent services (Amazon
            Polly, AWS Lambda) failed with an internal service error.
            </exception>
            <exception cref="T:Amazon.Lex.Model.BadRequestException">
            Request validation failed, there is no usable message in the context, or the bot
            build failed, is still in progress, or contains unbuilt changes.
            </exception>
            <exception cref="T:Amazon.Lex.Model.ConflictException">
            Two clients are using the same AWS account, Amazon Lex bot, and user ID.
            </exception>
            <exception cref="T:Amazon.Lex.Model.DependencyFailedException">
            One of the dependencies, such as AWS Lambda or Amazon Polly, threw an exception.
            For example, 
            
             <ul> <li> 
            <para>
            If Amazon Lex does not have sufficient permissions to call a Lambda function.
            </para>
             </li> <li> 
            <para>
            If a Lambda function takes longer than 30 seconds to execute.
            </para>
             </li> <li> 
            <para>
            If a fulfillment Lambda function returns a <code>Delegate</code> dialog action without
            removing any slot values.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.Lex.Model.InternalFailureException">
            Internal service error. Retry the call.
            </exception>
            <exception cref="T:Amazon.Lex.Model.LimitExceededException">
            Exceeded a limit.
            </exception>
            <exception cref="T:Amazon.Lex.Model.LoopDetectedException">
            This exception is not used.
            </exception>
            <exception cref="T:Amazon.Lex.Model.NotAcceptableException">
            The accept header in the request does not have a valid value.
            </exception>
            <exception cref="T:Amazon.Lex.Model.NotFoundException">
            The resource (such as the Amazon Lex bot or an alias) that is referred to is not found.
            </exception>
            <exception cref="T:Amazon.Lex.Model.RequestTimeoutException">
            The input speech is too long.
            </exception>
            <exception cref="T:Amazon.Lex.Model.UnsupportedMediaTypeException">
            The Content-Type header (<code>PostContent</code> API) has an invalid value.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/runtime.lex-2016-11-28/PostContent">REST API Reference for PostContent Operation</seealso>
        </member>
        <member name="M:Amazon.Lex.IAmazonLex.PostText(Amazon.Lex.Model.PostTextRequest)">
            <summary>
            Sends user input to Amazon Lex. Client applications can use this API to send requests
            to Amazon Lex at runtime. Amazon Lex then interprets the user input using the machine
            learning model it built for the bot. 
            
             
            <para>
             In response, Amazon Lex returns the next <code>message</code> to convey to the user
            an optional <code>responseCard</code> to display. Consider the following example messages:
            
            </para>
             <ul> <li> 
            <para>
             For a user input "I would like a pizza", Amazon Lex might return a response with
            a message eliciting slot data (for example, PizzaSize): "What size pizza would you
            like?" 
            </para>
             </li> <li> 
            <para>
             After the user provides all of the pizza order information, Amazon Lex might return
            a response with a message to obtain user confirmation "Proceed with the pizza order?".
            
            </para>
             </li> <li> 
            <para>
             After the user replies to a confirmation prompt with a "yes", Amazon Lex might return
            a conclusion statement: "Thank you, your cheese pizza has been ordered.". 
            </para>
             </li> </ul> 
            <para>
             Not all Amazon Lex messages require a user response. For example, a conclusion statement
            does not require a response. Some messages require only a "yes" or "no" user response.
            In addition to the <code>message</code>, Amazon Lex provides additional context about
            the message in the response that you might use to enhance client behavior, for example,
            to display the appropriate client user interface. These are the <code>slotToElicit</code>,
            <code>dialogState</code>, <code>intentName</code>, and <code>slots</code> fields in
            the response. Consider the following examples: 
            </para>
             <ul> <li> 
            <para>
            If the message is to elicit slot data, Amazon Lex returns the following context information:
            </para>
             <ul> <li> 
            <para>
             <code>dialogState</code> set to ElicitSlot 
            </para>
             </li> <li> 
            <para>
             <code>intentName</code> set to the intent name in the current context 
            </para>
             </li> <li> 
            <para>
             <code>slotToElicit</code> set to the slot name for which the <code>message</code>
            is eliciting information 
            </para>
             </li> <li> 
            <para>
             <code>slots</code> set to a map of slots, configured for the intent, with currently
            known values 
            </para>
             </li> </ul> </li> <li> 
            <para>
             If the message is a confirmation prompt, the <code>dialogState</code> is set to ConfirmIntent
            and <code>SlotToElicit</code> is set to null. 
            </para>
             </li> <li> 
            <para>
            If the message is a clarification prompt (configured for the intent) that indicates
            that user intent is not understood, the <code>dialogState</code> is set to ElicitIntent
            and <code>slotToElicit</code> is set to null. 
            </para>
             </li> </ul> 
            <para>
             In addition, Amazon Lex also returns your application-specific <code>sessionAttributes</code>.
            For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html">Managing
            Conversation Context</a>. 
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PostText service method.</param>
            
            <returns>The response from the PostText service method, as returned by Lex.</returns>
            <exception cref="T:Amazon.Lex.Model.BadGatewayException">
            Either the Amazon Lex bot is still building, or one of the dependent services (Amazon
            Polly, AWS Lambda) failed with an internal service error.
            </exception>
            <exception cref="T:Amazon.Lex.Model.BadRequestException">
            Request validation failed, there is no usable message in the context, or the bot
            build failed, is still in progress, or contains unbuilt changes.
            </exception>
            <exception cref="T:Amazon.Lex.Model.ConflictException">
            Two clients are using the same AWS account, Amazon Lex bot, and user ID.
            </exception>
            <exception cref="T:Amazon.Lex.Model.DependencyFailedException">
            One of the dependencies, such as AWS Lambda or Amazon Polly, threw an exception.
            For example, 
            
             <ul> <li> 
            <para>
            If Amazon Lex does not have sufficient permissions to call a Lambda function.
            </para>
             </li> <li> 
            <para>
            If a Lambda function takes longer than 30 seconds to execute.
            </para>
             </li> <li> 
            <para>
            If a fulfillment Lambda function returns a <code>Delegate</code> dialog action without
            removing any slot values.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.Lex.Model.InternalFailureException">
            Internal service error. Retry the call.
            </exception>
            <exception cref="T:Amazon.Lex.Model.LimitExceededException">
            Exceeded a limit.
            </exception>
            <exception cref="T:Amazon.Lex.Model.LoopDetectedException">
            This exception is not used.
            </exception>
            <exception cref="T:Amazon.Lex.Model.NotFoundException">
            The resource (such as the Amazon Lex bot or an alias) that is referred to is not found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/runtime.lex-2016-11-28/PostText">REST API Reference for PostText Operation</seealso>
        </member>
        <member name="M:Amazon.Lex.IAmazonLex.PostTextAsync(Amazon.Lex.Model.PostTextRequest,System.Threading.CancellationToken)">
            <summary>
            Sends user input to Amazon Lex. Client applications can use this API to send requests
            to Amazon Lex at runtime. Amazon Lex then interprets the user input using the machine
            learning model it built for the bot. 
            
             
            <para>
             In response, Amazon Lex returns the next <code>message</code> to convey to the user
            an optional <code>responseCard</code> to display. Consider the following example messages:
            
            </para>
             <ul> <li> 
            <para>
             For a user input "I would like a pizza", Amazon Lex might return a response with
            a message eliciting slot data (for example, PizzaSize): "What size pizza would you
            like?" 
            </para>
             </li> <li> 
            <para>
             After the user provides all of the pizza order information, Amazon Lex might return
            a response with a message to obtain user confirmation "Proceed with the pizza order?".
            
            </para>
             </li> <li> 
            <para>
             After the user replies to a confirmation prompt with a "yes", Amazon Lex might return
            a conclusion statement: "Thank you, your cheese pizza has been ordered.". 
            </para>
             </li> </ul> 
            <para>
             Not all Amazon Lex messages require a user response. For example, a conclusion statement
            does not require a response. Some messages require only a "yes" or "no" user response.
            In addition to the <code>message</code>, Amazon Lex provides additional context about
            the message in the response that you might use to enhance client behavior, for example,
            to display the appropriate client user interface. These are the <code>slotToElicit</code>,
            <code>dialogState</code>, <code>intentName</code>, and <code>slots</code> fields in
            the response. Consider the following examples: 
            </para>
             <ul> <li> 
            <para>
            If the message is to elicit slot data, Amazon Lex returns the following context information:
            </para>
             <ul> <li> 
            <para>
             <code>dialogState</code> set to ElicitSlot 
            </para>
             </li> <li> 
            <para>
             <code>intentName</code> set to the intent name in the current context 
            </para>
             </li> <li> 
            <para>
             <code>slotToElicit</code> set to the slot name for which the <code>message</code>
            is eliciting information 
            </para>
             </li> <li> 
            <para>
             <code>slots</code> set to a map of slots, configured for the intent, with currently
            known values 
            </para>
             </li> </ul> </li> <li> 
            <para>
             If the message is a confirmation prompt, the <code>dialogState</code> is set to ConfirmIntent
            and <code>SlotToElicit</code> is set to null. 
            </para>
             </li> <li> 
            <para>
            If the message is a clarification prompt (configured for the intent) that indicates
            that user intent is not understood, the <code>dialogState</code> is set to ElicitIntent
            and <code>slotToElicit</code> is set to null. 
            </para>
             </li> </ul> 
            <para>
             In addition, Amazon Lex also returns your application-specific <code>sessionAttributes</code>.
            For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html">Managing
            Conversation Context</a>. 
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PostText service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PostText service method, as returned by Lex.</returns>
            <exception cref="T:Amazon.Lex.Model.BadGatewayException">
            Either the Amazon Lex bot is still building, or one of the dependent services (Amazon
            Polly, AWS Lambda) failed with an internal service error.
            </exception>
            <exception cref="T:Amazon.Lex.Model.BadRequestException">
            Request validation failed, there is no usable message in the context, or the bot
            build failed, is still in progress, or contains unbuilt changes.
            </exception>
            <exception cref="T:Amazon.Lex.Model.ConflictException">
            Two clients are using the same AWS account, Amazon Lex bot, and user ID.
            </exception>
            <exception cref="T:Amazon.Lex.Model.DependencyFailedException">
            One of the dependencies, such as AWS Lambda or Amazon Polly, threw an exception.
            For example, 
            
             <ul> <li> 
            <para>
            If Amazon Lex does not have sufficient permissions to call a Lambda function.
            </para>
             </li> <li> 
            <para>
            If a Lambda function takes longer than 30 seconds to execute.
            </para>
             </li> <li> 
            <para>
            If a fulfillment Lambda function returns a <code>Delegate</code> dialog action without
            removing any slot values.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.Lex.Model.InternalFailureException">
            Internal service error. Retry the call.
            </exception>
            <exception cref="T:Amazon.Lex.Model.LimitExceededException">
            Exceeded a limit.
            </exception>
            <exception cref="T:Amazon.Lex.Model.LoopDetectedException">
            This exception is not used.
            </exception>
            <exception cref="T:Amazon.Lex.Model.NotFoundException">
            The resource (such as the Amazon Lex bot or an alias) that is referred to is not found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/runtime.lex-2016-11-28/PostText">REST API Reference for PostText Operation</seealso>
        </member>
        <member name="M:Amazon.Lex.IAmazonLex.PutSession(Amazon.Lex.Model.PutSessionRequest)">
            <summary>
            Creates a new session or modifies an existing session with an Amazon Lex bot. Use
            this operation to enable your application to set the state of the bot.
            
             
            <para>
            For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/how-session-api.html">Managing
            Sessions</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutSession service method.</param>
            
            <returns>The response from the PutSession service method, as returned by Lex.</returns>
            <exception cref="T:Amazon.Lex.Model.BadGatewayException">
            Either the Amazon Lex bot is still building, or one of the dependent services (Amazon
            Polly, AWS Lambda) failed with an internal service error.
            </exception>
            <exception cref="T:Amazon.Lex.Model.BadRequestException">
            Request validation failed, there is no usable message in the context, or the bot
            build failed, is still in progress, or contains unbuilt changes.
            </exception>
            <exception cref="T:Amazon.Lex.Model.ConflictException">
            Two clients are using the same AWS account, Amazon Lex bot, and user ID.
            </exception>
            <exception cref="T:Amazon.Lex.Model.DependencyFailedException">
            One of the dependencies, such as AWS Lambda or Amazon Polly, threw an exception.
            For example, 
            
             <ul> <li> 
            <para>
            If Amazon Lex does not have sufficient permissions to call a Lambda function.
            </para>
             </li> <li> 
            <para>
            If a Lambda function takes longer than 30 seconds to execute.
            </para>
             </li> <li> 
            <para>
            If a fulfillment Lambda function returns a <code>Delegate</code> dialog action without
            removing any slot values.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.Lex.Model.InternalFailureException">
            Internal service error. Retry the call.
            </exception>
            <exception cref="T:Amazon.Lex.Model.LimitExceededException">
            Exceeded a limit.
            </exception>
            <exception cref="T:Amazon.Lex.Model.NotAcceptableException">
            The accept header in the request does not have a valid value.
            </exception>
            <exception cref="T:Amazon.Lex.Model.NotFoundException">
            The resource (such as the Amazon Lex bot or an alias) that is referred to is not found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/runtime.lex-2016-11-28/PutSession">REST API Reference for PutSession Operation</seealso>
        </member>
        <member name="M:Amazon.Lex.IAmazonLex.PutSessionAsync(Amazon.Lex.Model.PutSessionRequest,System.Threading.CancellationToken)">
            <summary>
            Creates a new session or modifies an existing session with an Amazon Lex bot. Use
            this operation to enable your application to set the state of the bot.
            
             
            <para>
            For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/how-session-api.html">Managing
            Sessions</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutSession service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutSession service method, as returned by Lex.</returns>
            <exception cref="T:Amazon.Lex.Model.BadGatewayException">
            Either the Amazon Lex bot is still building, or one of the dependent services (Amazon
            Polly, AWS Lambda) failed with an internal service error.
            </exception>
            <exception cref="T:Amazon.Lex.Model.BadRequestException">
            Request validation failed, there is no usable message in the context, or the bot
            build failed, is still in progress, or contains unbuilt changes.
            </exception>
            <exception cref="T:Amazon.Lex.Model.ConflictException">
            Two clients are using the same AWS account, Amazon Lex bot, and user ID.
            </exception>
            <exception cref="T:Amazon.Lex.Model.DependencyFailedException">
            One of the dependencies, such as AWS Lambda or Amazon Polly, threw an exception.
            For example, 
            
             <ul> <li> 
            <para>
            If Amazon Lex does not have sufficient permissions to call a Lambda function.
            </para>
             </li> <li> 
            <para>
            If a Lambda function takes longer than 30 seconds to execute.
            </para>
             </li> <li> 
            <para>
            If a fulfillment Lambda function returns a <code>Delegate</code> dialog action without
            removing any slot values.
            </para>
             </li> </ul>
            </exception>
            <exception cref="T:Amazon.Lex.Model.InternalFailureException">
            Internal service error. Retry the call.
            </exception>
            <exception cref="T:Amazon.Lex.Model.LimitExceededException">
            Exceeded a limit.
            </exception>
            <exception cref="T:Amazon.Lex.Model.NotAcceptableException">
            The accept header in the request does not have a valid value.
            </exception>
            <exception cref="T:Amazon.Lex.Model.NotFoundException">
            The resource (such as the Amazon Lex bot or an alias) that is referred to is not found.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/runtime.lex-2016-11-28/PutSession">REST API Reference for PutSession Operation</seealso>
        </member>
    </members>
</doc>
