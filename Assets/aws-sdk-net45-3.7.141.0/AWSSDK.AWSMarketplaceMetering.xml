<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AWSSDK.AWSMarketplaceMetering</name>
    </assembly>
    <members>
        <member name="T:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringConfig">
            <summary>
            Configuration for accessing Amazon AWSMarketplaceMetering service
            </summary>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringConfig.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringConfig.RegionEndpointServiceName">
            <summary>
            The constant used to lookup in the region hash the endpoint.
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringConfig.ServiceVersion">
            <summary>
            Gets the ServiceVersion property.
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringConfig.UserAgent">
            <summary>
            Gets the value of UserAgent property.
            </summary>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringException">
            <summary>
             Common exception for the AWSMarketplaceMetering service.
             </summary>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringException.#ctor(System.String)">
            <summary>
            Construct instance of AmazonAWSMarketplaceMeteringException
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of AmazonAWSMarketplaceMeteringException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringException.#ctor(System.Exception)">
            <summary>
            Construct instance of AmazonAWSMarketplaceMeteringException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of AmazonAWSMarketplaceMeteringException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of AmazonAWSMarketplaceMeteringException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the AmazonAWSMarketplaceMeteringException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Internal.AmazonAWSMarketplaceMeteringMetadata">
            <summary>
            Service metadata for  Amazon AWSMarketplaceMetering service
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Internal.AmazonAWSMarketplaceMeteringMetadata.ServiceId">
            <summary>
            Gets the value of the Service Id.
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Internal.AmazonAWSMarketplaceMeteringMetadata.OperationNameMapping">
            <summary>
            Gets the dictionary that gives mapping of renamed operations
            </summary>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringRequest">
            <summary>
            Base class for AWSMarketplaceMetering operation requests.
            </summary>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.BatchMeterUsageRequest">
            <summary>
            Container for the parameters to the BatchMeterUsage operation.
            BatchMeterUsage is called from a SaaS application listed on the AWS Marketplace to
            post metering records for a set of customers.
            
             
            <para>
            For identical requests, the API is idempotent; requests can be retried with the same
            records or a subset of the input records.
            </para>
             
            <para>
            Every request to BatchMeterUsage is for one product. If you need to meter usage for
            multiple products, you must make multiple calls to BatchMeterUsage.
            </para>
             
            <para>
            BatchMeterUsage can process up to 25 UsageRecords at a time.
            </para>
             
            <para>
            A UsageRecord can optionally include multiple usage allocations, to provide customers
            with usagedata split into buckets by tags that you define (or allow the customer to
            define).
            </para>
             
            <para>
            BatchMeterUsage requests must be less than 1MB in size.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.BatchMeterUsageRequest.ProductCode">
            <summary>
            Gets and sets the property ProductCode. 
            <para>
            Product code is used to uniquely identify a product in AWS Marketplace. The product
            code should be the same as the one used during the publishing of a new product.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.BatchMeterUsageRequest.UsageRecords">
            <summary>
            Gets and sets the property UsageRecords. 
            <para>
            The set of UsageRecords to submit. BatchMeterUsage accepts up to 25 UsageRecords at
            a time.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.BatchMeterUsageResponse">
            <summary>
            Contains the UsageRecords processed by BatchMeterUsage and any records that have failed
            due to transient error.
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.BatchMeterUsageResponse.Results">
            <summary>
            Gets and sets the property Results. 
            <para>
            Contains all UsageRecords processed by BatchMeterUsage. These records were either
            honored by AWS Marketplace Metering Service or were invalid.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.BatchMeterUsageResponse.UnprocessedRecords">
            <summary>
            Gets and sets the property UnprocessedRecords. 
            <para>
            Contains all UsageRecords that were not processed by BatchMeterUsage. This is a list
            of UsageRecords. You can retry the failed request by making another BatchMeterUsage
            call with this list as input in the BatchMeterUsageRequest.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.CustomerNotEntitledException">
            <summary>
            Exception thrown when the customer does not have a valid subscription for the product.
            </summary>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.CustomerNotEntitledException.#ctor(System.String)">
            <summary>
            Constructs a new CustomerNotEntitledException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.CustomerNotEntitledException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of CustomerNotEntitledException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.CustomerNotEntitledException.#ctor(System.Exception)">
            <summary>
            Construct instance of CustomerNotEntitledException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.CustomerNotEntitledException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of CustomerNotEntitledException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.CustomerNotEntitledException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of CustomerNotEntitledException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.CustomerNotEntitledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the CustomerNotEntitledException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.CustomerNotEntitledException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.DisabledApiException">
            <summary>
            The API is disabled in the Region.
            </summary>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.DisabledApiException.#ctor(System.String)">
            <summary>
            Constructs a new DisabledApiException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.DisabledApiException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of DisabledApiException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.DisabledApiException.#ctor(System.Exception)">
            <summary>
            Construct instance of DisabledApiException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.DisabledApiException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of DisabledApiException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.DisabledApiException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of DisabledApiException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.DisabledApiException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the DisabledApiException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.DisabledApiException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.DuplicateRequestException">
            <summary>
            A metering record has already been emitted by the same EC2 instance, ECS task, or
            EKS pod for the given {usageDimension, timestamp} with a different usageQuantity.
            </summary>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.DuplicateRequestException.#ctor(System.String)">
            <summary>
            Constructs a new DuplicateRequestException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.DuplicateRequestException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of DuplicateRequestException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.DuplicateRequestException.#ctor(System.Exception)">
            <summary>
            Construct instance of DuplicateRequestException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.DuplicateRequestException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of DuplicateRequestException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.DuplicateRequestException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of DuplicateRequestException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.DuplicateRequestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the DuplicateRequestException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.DuplicateRequestException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.ExpiredTokenException">
            <summary>
            The submitted registration token has expired. This can happen if the buyer's browser
            takes too long to redirect to your page, the buyer has resubmitted the registration
            token, or your application has held on to the registration token for too long. Your
            SaaS registration website should redeem this token as soon as it is submitted by the
            buyer's browser.
            </summary>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.ExpiredTokenException.#ctor(System.String)">
            <summary>
            Constructs a new ExpiredTokenException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.ExpiredTokenException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ExpiredTokenException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.ExpiredTokenException.#ctor(System.Exception)">
            <summary>
            Construct instance of ExpiredTokenException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.ExpiredTokenException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ExpiredTokenException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.ExpiredTokenException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ExpiredTokenException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.ExpiredTokenException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the ExpiredTokenException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.ExpiredTokenException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.InternalServiceErrorException">
            <summary>
            An internal error has occurred. Retry your request. If the problem persists, post
            a message with details on the AWS forums.
            </summary>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InternalServiceErrorException.#ctor(System.String)">
            <summary>
            Constructs a new InternalServiceErrorException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InternalServiceErrorException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InternalServiceErrorException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InternalServiceErrorException.#ctor(System.Exception)">
            <summary>
            Construct instance of InternalServiceErrorException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InternalServiceErrorException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InternalServiceErrorException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InternalServiceErrorException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InternalServiceErrorException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InternalServiceErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the InternalServiceErrorException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InternalServiceErrorException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.BatchMeterUsageRequestMarshaller">
            <summary>
            BatchMeterUsage Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.BatchMeterUsageRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.BatchMeterUsageRequestMarshaller.Marshall(Amazon.AWSMarketplaceMetering.Model.BatchMeterUsageRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.BatchMeterUsageRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.BatchMeterUsageResponseUnmarshaller">
            <summary>
            Response Unmarshaller for BatchMeterUsage operation
            </summary>  
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.BatchMeterUsageResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.BatchMeterUsageResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.BatchMeterUsageResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.CustomerNotEntitledExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for CustomerNotEntitledException Object
            </summary>  
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.CustomerNotEntitledExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.CustomerNotEntitledExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.CustomerNotEntitledExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.DisabledApiExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for DisabledApiException Object
            </summary>  
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.DisabledApiExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.DisabledApiExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.DisabledApiExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.DuplicateRequestExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for DuplicateRequestException Object
            </summary>  
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.DuplicateRequestExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.DuplicateRequestExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.DuplicateRequestExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.ExpiredTokenExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for ExpiredTokenException Object
            </summary>  
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.ExpiredTokenExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.ExpiredTokenExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.ExpiredTokenExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InternalServiceErrorExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for InternalServiceErrorException Object
            </summary>  
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InternalServiceErrorExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InternalServiceErrorExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InternalServiceErrorExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidCustomerIdentifierExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for InvalidCustomerIdentifierException Object
            </summary>  
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidCustomerIdentifierExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidCustomerIdentifierExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidCustomerIdentifierExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidEndpointRegionExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for InvalidEndpointRegionException Object
            </summary>  
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidEndpointRegionExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidEndpointRegionExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidEndpointRegionExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidProductCodeExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for InvalidProductCodeException Object
            </summary>  
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidProductCodeExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidProductCodeExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidProductCodeExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidPublicKeyVersionExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for InvalidPublicKeyVersionException Object
            </summary>  
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidPublicKeyVersionExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidPublicKeyVersionExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidPublicKeyVersionExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidRegionExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for InvalidRegionException Object
            </summary>  
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidRegionExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidRegionExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidRegionExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidTagExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for InvalidTagException Object
            </summary>  
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidTagExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidTagExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidTagExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidTokenExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for InvalidTokenException Object
            </summary>  
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidTokenExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidTokenExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidTokenExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidUsageAllocationsExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for InvalidUsageAllocationsException Object
            </summary>  
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidUsageAllocationsExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidUsageAllocationsExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidUsageAllocationsExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidUsageDimensionExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for InvalidUsageDimensionException Object
            </summary>  
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidUsageDimensionExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidUsageDimensionExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.InvalidUsageDimensionExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.MeterUsageRequestMarshaller">
            <summary>
            MeterUsage Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.MeterUsageRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.MeterUsageRequestMarshaller.Marshall(Amazon.AWSMarketplaceMetering.Model.MeterUsageRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.MeterUsageRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.MeterUsageResponseUnmarshaller">
            <summary>
            Response Unmarshaller for MeterUsage operation
            </summary>  
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.MeterUsageResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.MeterUsageResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.MeterUsageResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.PlatformNotSupportedExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for PlatformNotSupportedException Object
            </summary>  
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.PlatformNotSupportedExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.PlatformNotSupportedExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.PlatformNotSupportedExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.RegisterUsageRequestMarshaller">
            <summary>
            RegisterUsage Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.RegisterUsageRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.RegisterUsageRequestMarshaller.Marshall(Amazon.AWSMarketplaceMetering.Model.RegisterUsageRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.RegisterUsageRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.RegisterUsageResponseUnmarshaller">
            <summary>
            Response Unmarshaller for RegisterUsage operation
            </summary>  
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.RegisterUsageResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.RegisterUsageResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.RegisterUsageResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.ResolveCustomerRequestMarshaller">
            <summary>
            ResolveCustomer Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.ResolveCustomerRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.ResolveCustomerRequestMarshaller.Marshall(Amazon.AWSMarketplaceMetering.Model.ResolveCustomerRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.ResolveCustomerRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.ResolveCustomerResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ResolveCustomer operation
            </summary>  
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.ResolveCustomerResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.ResolveCustomerResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.ResolveCustomerResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.TagMarshaller">
            <summary>
            Tag Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.TagMarshaller.Marshall(Amazon.AWSMarketplaceMetering.Model.Tag,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.TagMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.TagUnmarshaller">
            <summary>
            Response Unmarshaller for Tag Object
            </summary>  
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.TagUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#AWSMarketplaceMetering#Model#Tag,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.TagUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.TagUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.ThrottlingExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for ThrottlingException Object
            </summary>  
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.ThrottlingExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.ThrottlingExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.ThrottlingExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.TimestampOutOfBoundsExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for TimestampOutOfBoundsException Object
            </summary>  
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.TimestampOutOfBoundsExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.TimestampOutOfBoundsExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.TimestampOutOfBoundsExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.UsageAllocationMarshaller">
            <summary>
            UsageAllocation Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.UsageAllocationMarshaller.Marshall(Amazon.AWSMarketplaceMetering.Model.UsageAllocation,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.UsageAllocationMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.UsageAllocationUnmarshaller">
            <summary>
            Response Unmarshaller for UsageAllocation Object
            </summary>  
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.UsageAllocationUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#AWSMarketplaceMetering#Model#UsageAllocation,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.UsageAllocationUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.UsageAllocationUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.UsageRecordMarshaller">
            <summary>
            UsageRecord Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.UsageRecordMarshaller.Marshall(Amazon.AWSMarketplaceMetering.Model.UsageRecord,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.UsageRecordMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.UsageRecordResultUnmarshaller">
            <summary>
            Response Unmarshaller for UsageRecordResult Object
            </summary>  
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.UsageRecordResultUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#AWSMarketplaceMetering#Model#UsageRecordResult,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.UsageRecordResultUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.UsageRecordResultUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.UsageRecordUnmarshaller">
            <summary>
            Response Unmarshaller for UsageRecord Object
            </summary>  
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.UsageRecordUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#AWSMarketplaceMetering#Model#UsageRecord,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.UsageRecordUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.Internal.MarshallTransformations.UsageRecordUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.InvalidCustomerIdentifierException">
            <summary>
            You have metered usage for a CustomerIdentifier that does not exist.
            </summary>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidCustomerIdentifierException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidCustomerIdentifierException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidCustomerIdentifierException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidCustomerIdentifierException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidCustomerIdentifierException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidCustomerIdentifierException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidCustomerIdentifierException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidCustomerIdentifierException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidCustomerIdentifierException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidCustomerIdentifierException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidCustomerIdentifierException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the InvalidCustomerIdentifierException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidCustomerIdentifierException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.InvalidEndpointRegionException">
            <summary>
            The endpoint being called is in a AWS Region different from your EC2 instance, ECS
            task, or EKS pod. The Region of the Metering Service endpoint and the AWS Region of
            the resource must match.
            </summary>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidEndpointRegionException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidEndpointRegionException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidEndpointRegionException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidEndpointRegionException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidEndpointRegionException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidEndpointRegionException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidEndpointRegionException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidEndpointRegionException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidEndpointRegionException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidEndpointRegionException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidEndpointRegionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the InvalidEndpointRegionException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidEndpointRegionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.InvalidProductCodeException">
            <summary>
            The product code passed does not match the product code used for publishing the product.
            </summary>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidProductCodeException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidProductCodeException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidProductCodeException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidProductCodeException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidProductCodeException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidProductCodeException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidProductCodeException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidProductCodeException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidProductCodeException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidProductCodeException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidProductCodeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the InvalidProductCodeException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidProductCodeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.InvalidPublicKeyVersionException">
            <summary>
            Public Key version is invalid.
            </summary>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidPublicKeyVersionException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidPublicKeyVersionException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidPublicKeyVersionException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidPublicKeyVersionException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidPublicKeyVersionException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidPublicKeyVersionException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidPublicKeyVersionException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidPublicKeyVersionException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidPublicKeyVersionException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidPublicKeyVersionException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidPublicKeyVersionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the InvalidPublicKeyVersionException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidPublicKeyVersionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.InvalidRegionException">
            <summary>
            RegisterUsage must be called in the same AWS Region the ECS task was launched in.
            This prevents a container from hardcoding a Region (e.g. withRegion(“us-east-1”) when
            calling RegisterUsage.
            </summary>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidRegionException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidRegionException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidRegionException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidRegionException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidRegionException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidRegionException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidRegionException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidRegionException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidRegionException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidRegionException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidRegionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the InvalidRegionException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidRegionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.InvalidTagException">
            <summary>
            The tag is invalid, or the number of tags is greater than 5.
            </summary>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidTagException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidTagException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidTagException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidTagException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidTagException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidTagException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidTagException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidTagException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidTagException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidTagException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidTagException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the InvalidTagException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidTagException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.InvalidTokenException">
            <summary>
            Registration token is invalid.
            </summary>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidTokenException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidTokenException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidTokenException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidTokenException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidTokenException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidTokenException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidTokenException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidTokenException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidTokenException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidTokenException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidTokenException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the InvalidTokenException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidTokenException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.InvalidUsageAllocationsException">
            <summary>
            The usage allocation objects are invalid, or the number of allocations is greater
            than 500 for a single usage record.
            </summary>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidUsageAllocationsException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidUsageAllocationsException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidUsageAllocationsException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidUsageAllocationsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidUsageAllocationsException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidUsageAllocationsException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidUsageAllocationsException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidUsageAllocationsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidUsageAllocationsException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidUsageAllocationsException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidUsageAllocationsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the InvalidUsageAllocationsException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidUsageAllocationsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.InvalidUsageDimensionException">
            <summary>
            The usage dimension does not match one of the UsageDimensions associated with products.
            </summary>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidUsageDimensionException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidUsageDimensionException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidUsageDimensionException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidUsageDimensionException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidUsageDimensionException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidUsageDimensionException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidUsageDimensionException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidUsageDimensionException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidUsageDimensionException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidUsageDimensionException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidUsageDimensionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the InvalidUsageDimensionException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.InvalidUsageDimensionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.MeterUsageRequest">
            <summary>
            Container for the parameters to the MeterUsage operation.
            API to emit metering records. For identical requests, the API is idempotent. It simply
            returns the metering record ID.
            
             
            <para>
            MeterUsage is authenticated on the buyer's AWS account using credentials from the
            EC2 instance, ECS task, or EKS pod.
            </para>
             
            <para>
            MeterUsage can optionally include multiple usage allocations, to provide customers
            with usage data split into buckets by tags that you define (or allow the customer
            to define).
            </para>
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.MeterUsageRequest.DryRun">
            <summary>
            Gets and sets the property DryRun. 
            <para>
            Checks whether you have the permissions required for the action, but does not make
            the request. If you have the permissions, the request returns DryRunOperation; otherwise,
            it returns UnauthorizedException. Defaults to <code>false</code> if not specified.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.MeterUsageRequest.ProductCode">
            <summary>
            Gets and sets the property ProductCode. 
            <para>
            Product code is used to uniquely identify a product in AWS Marketplace. The product
            code should be the same as the one used during the publishing of a new product.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.MeterUsageRequest.Timestamp">
            <summary>
            Gets and sets the property Timestamp. 
            <para>
            Timestamp, in UTC, for which the usage is being reported. Your application can meter
            usage for up to one hour in the past. Make sure the timestamp value is not before
            the start of the software usage.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.MeterUsageRequest.UsageAllocations">
            <summary>
            Gets and sets the property UsageAllocations. 
            <para>
            The set of UsageAllocations to submit.
            </para>
             
            <para>
            The sum of all UsageAllocation quantities must equal the UsageQuantity of the MeterUsage
            request, and each UsageAllocation must have a unique set of tags (include no tags).
            </para>
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.MeterUsageRequest.UsageDimension">
            <summary>
            Gets and sets the property UsageDimension. 
            <para>
            It will be one of the fcp dimension name provided during the publishing of the product.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.MeterUsageRequest.UsageQuantity">
            <summary>
            Gets and sets the property UsageQuantity. 
            <para>
            Consumption value for the hour. Defaults to <code>0</code> if not specified.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.MeterUsageResponse">
            <summary>
            This is the response object from the MeterUsage operation.
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.MeterUsageResponse.MeteringRecordId">
            <summary>
            Gets and sets the property MeteringRecordId. 
            <para>
            Metering record id.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.PlatformNotSupportedException">
            <summary>
            AWS Marketplace does not support metering usage from the underlying platform. Currently,
            Amazon ECS, Amazon EKS, and AWS Fargate are supported.
            </summary>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.PlatformNotSupportedException.#ctor(System.String)">
            <summary>
            Constructs a new PlatformNotSupportedException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.PlatformNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of PlatformNotSupportedException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.PlatformNotSupportedException.#ctor(System.Exception)">
            <summary>
            Construct instance of PlatformNotSupportedException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.PlatformNotSupportedException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of PlatformNotSupportedException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.PlatformNotSupportedException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of PlatformNotSupportedException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.PlatformNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the PlatformNotSupportedException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.PlatformNotSupportedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.RegisterUsageRequest">
            <summary>
            Container for the parameters to the RegisterUsage operation.
            Paid container software products sold through AWS Marketplace must integrate with
            the AWS Marketplace Metering Service and call the RegisterUsage operation for software
            entitlement and metering. Free and BYOL products for Amazon ECS or Amazon EKS aren't
            required to call RegisterUsage, but you may choose to do so if you would like to receive
            usage data in your seller reports. The sections below explain the behavior of RegisterUsage.
            RegisterUsage performs two primary functions: metering and entitlement.
            
             <ul> <li> 
            <para>
             <i>Entitlement</i>: RegisterUsage allows you to verify that the customer running
            your paid software is subscribed to your product on AWS Marketplace, enabling you
            to guard against unauthorized use. Your container image that integrates with RegisterUsage
            is only required to guard against unauthorized use at container startup, as such a
            CustomerNotSubscribedException/PlatformNotSupportedException will only be thrown on
            the initial call to RegisterUsage. Subsequent calls from the same Amazon ECS task
            instance (e.g. task-id) or Amazon EKS pod will not throw a CustomerNotSubscribedException,
            even if the customer unsubscribes while the Amazon ECS task or Amazon EKS pod is still
            running.
            </para>
             </li> <li> 
            <para>
             <i>Metering</i>: RegisterUsage meters software use per ECS task, per hour, or per
            pod for Amazon EKS with usage prorated to the second. A minimum of 1 minute of usage
            applies to tasks that are short lived. For example, if a customer has a 10 node Amazon
            ECS or Amazon EKS cluster and a service configured as a Daemon Set, then Amazon ECS
            or Amazon EKS will launch a task on all 10 cluster nodes and the customer will be
            charged: (10 * hourly_rate). Metering for software use is automatically handled by
            the AWS Marketplace Metering Control Plane -- your software is not required to perform
            any metering specific actions, other than call RegisterUsage once for metering of
            software use to commence. The AWS Marketplace Metering Control Plane will also continue
            to bill customers for running ECS tasks and Amazon EKS pods, regardless of the customers
            subscription state, removing the need for your software to perform entitlement checks
            at runtime.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.RegisterUsageRequest.Nonce">
            <summary>
            Gets and sets the property Nonce. 
            <para>
            (Optional) To scope down the registration to a specific running software instance
            and guard against replay attacks.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.RegisterUsageRequest.ProductCode">
            <summary>
            Gets and sets the property ProductCode. 
            <para>
            Product code is used to uniquely identify a product in AWS Marketplace. The product
            code should be the same as the one used during the publishing of a new product.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.RegisterUsageRequest.PublicKeyVersion">
            <summary>
            Gets and sets the property PublicKeyVersion. 
            <para>
            Public Key Version provided by AWS Marketplace
            </para>
            </summary>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.RegisterUsageResponse">
            <summary>
            This is the response object from the RegisterUsage operation.
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.RegisterUsageResponse.PublicKeyRotationTimestamp">
            <summary>
            Gets and sets the property PublicKeyRotationTimestamp. 
            <para>
            (Optional) Only included when public key version has expired
            </para>
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.RegisterUsageResponse.Signature">
            <summary>
            Gets and sets the property Signature. 
            <para>
            JWT Token
            </para>
            </summary>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.ResolveCustomerRequest">
            <summary>
            Container for the parameters to the ResolveCustomer operation.
            ResolveCustomer is called by a SaaS application during the registration process. When
            a buyer visits your website during the registration process, the buyer submits a registration
            token through their browser. The registration token is resolved through this API to
            obtain a CustomerIdentifier and product code.
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.ResolveCustomerRequest.RegistrationToken">
            <summary>
            Gets and sets the property RegistrationToken. 
            <para>
            When a buyer visits your website during the registration process, the buyer submits
            a registration token through the browser. The registration token is resolved to obtain
            a CustomerIdentifier and product code.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.ResolveCustomerResponse">
            <summary>
            The result of the ResolveCustomer operation. Contains the CustomerIdentifier and product
            code.
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.ResolveCustomerResponse.CustomerIdentifier">
            <summary>
            Gets and sets the property CustomerIdentifier. 
            <para>
            The CustomerIdentifier is used to identify an individual customer in your application.
            Calls to BatchMeterUsage require CustomerIdentifiers for each UsageRecord.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.ResolveCustomerResponse.ProductCode">
            <summary>
            Gets and sets the property ProductCode. 
            <para>
            The product code is returned to confirm that the buyer is registering for your product.
            Subsequent BatchMeterUsage calls should be made using this product code.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.Tag">
            <summary>
            Metadata assigned to an allocation. Each tag is made up of a key and a value.
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.Tag.Key">
            <summary>
            Gets and sets the property Key. 
            <para>
            One part of a key-value pair that makes up a tag. A key is a label that acts like
            a category for the specific tag values.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.Tag.Value">
            <summary>
            Gets and sets the property Value. 
            <para>
            One part of a key-value pair that makes up a tag. A value acts as a descriptor within
            a tag category (key). The value can be empty or null.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.ThrottlingException">
            <summary>
            The calls to the API are throttled.
            </summary>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.ThrottlingException.#ctor(System.String)">
            <summary>
            Constructs a new ThrottlingException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.ThrottlingException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ThrottlingException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.ThrottlingException.#ctor(System.Exception)">
            <summary>
            Construct instance of ThrottlingException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.ThrottlingException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ThrottlingException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.ThrottlingException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ThrottlingException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.ThrottlingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the ThrottlingException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.ThrottlingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.TimestampOutOfBoundsException">
            <summary>
            The timestamp value passed in the meterUsage() is out of allowed range.
            </summary>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.TimestampOutOfBoundsException.#ctor(System.String)">
            <summary>
            Constructs a new TimestampOutOfBoundsException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.TimestampOutOfBoundsException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of TimestampOutOfBoundsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.TimestampOutOfBoundsException.#ctor(System.Exception)">
            <summary>
            Construct instance of TimestampOutOfBoundsException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.TimestampOutOfBoundsException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of TimestampOutOfBoundsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.TimestampOutOfBoundsException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of TimestampOutOfBoundsException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.TimestampOutOfBoundsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the TimestampOutOfBoundsException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.Model.TimestampOutOfBoundsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.UsageAllocation">
            <summary>
            Usage allocations allow you to split usage into buckets by tags.
            
             
            <para>
            Each UsageAllocation indicates the usage quantity for a specific set of tags.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.UsageAllocation.AllocatedUsageQuantity">
            <summary>
            Gets and sets the property AllocatedUsageQuantity. 
            <para>
            The total quantity allocated to this bucket of usage.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.UsageAllocation.Tags">
            <summary>
            Gets and sets the property Tags. 
            <para>
            The set of tags that define the bucket of usage. For the bucket of items with no tags,
            this parameter can be left out.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.UsageRecord">
            <summary>
            A UsageRecord indicates a quantity of usage for a given product, customer, dimension
            and time.
            
             
            <para>
            Multiple requests with the same UsageRecords as input will be deduplicated to prevent
            double charges.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.UsageRecord.CustomerIdentifier">
            <summary>
            Gets and sets the property CustomerIdentifier. 
            <para>
            The CustomerIdentifier is obtained through the ResolveCustomer operation and represents
            an individual buyer in your application.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.UsageRecord.Dimension">
            <summary>
            Gets and sets the property Dimension. 
            <para>
            During the process of registering a product on AWS Marketplace, up to eight dimensions
            are specified. These represent different units of value in your application.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.UsageRecord.Quantity">
            <summary>
            Gets and sets the property Quantity. 
            <para>
            The quantity of usage consumed by the customer for the given dimension and time. Defaults
            to <code>0</code> if not specified.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.UsageRecord.Timestamp">
            <summary>
            Gets and sets the property Timestamp. 
            <para>
            Timestamp, in UTC, for which the usage is being reported.
            </para>
             
            <para>
            Your application can meter usage for up to one hour in the past. Make sure the timestamp
            value is not before the start of the software usage.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.UsageRecord.UsageAllocations">
            <summary>
            Gets and sets the property UsageAllocations. 
            <para>
            The set of UsageAllocations to submit. The sum of all UsageAllocation quantities must
            equal the Quantity of the UsageRecord.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.Model.UsageRecordResult">
            <summary>
            A UsageRecordResult indicates the status of a given UsageRecord processed by BatchMeterUsage.
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.UsageRecordResult.MeteringRecordId">
            <summary>
            Gets and sets the property MeteringRecordId. 
            <para>
            The MeteringRecordId is a unique identifier for this metering event.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.UsageRecordResult.Status">
            <summary>
            Gets and sets the property Status. 
            <para>
            The UsageRecordResult Status indicates the status of an individual UsageRecord processed
            by BatchMeterUsage.
            </para>
             <ul> <li> 
            <para>
             <i>Success</i>- The UsageRecord was accepted and honored by BatchMeterUsage.
            </para>
             </li> <li> 
            <para>
             <i>CustomerNotSubscribed</i>- The CustomerIdentifier specified is not subscribed
            to your product. The UsageRecord was not honored. Future UsageRecords for this customer
            will fail until the customer subscribes to your product.
            </para>
             </li> <li> 
            <para>
             <i>DuplicateRecord</i>- Indicates that the UsageRecord was invalid and not honored.
            A previously metered UsageRecord had the same customer, dimension, and time, but a
            different quantity.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.Model.UsageRecordResult.UsageRecord">
            <summary>
            Gets and sets the property UsageRecord. 
            <para>
            The UsageRecord that was part of the BatchMeterUsage request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.UsageRecordResultStatus">
            <summary>
            Constants used for properties of type UsageRecordResultStatus.
            </summary>
        </member>
        <member name="F:Amazon.AWSMarketplaceMetering.UsageRecordResultStatus.CustomerNotSubscribed">
            <summary>
            Constant CustomerNotSubscribed for UsageRecordResultStatus
            </summary>
        </member>
        <member name="F:Amazon.AWSMarketplaceMetering.UsageRecordResultStatus.DuplicateRecord">
            <summary>
            Constant DuplicateRecord for UsageRecordResultStatus
            </summary>
        </member>
        <member name="F:Amazon.AWSMarketplaceMetering.UsageRecordResultStatus.Success">
            <summary>
            Constant Success for UsageRecordResultStatus
            </summary>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.UsageRecordResultStatus.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.UsageRecordResultStatus.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.UsageRecordResultStatus.op_Implicit(System.String)~Amazon.AWSMarketplaceMetering.UsageRecordResultStatus">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringClient">
             <summary>
             Implementation for accessing AWSMarketplaceMetering
            
             AWS Marketplace Metering Service 
             <para>
             This reference provides descriptions of the low-level AWS Marketplace Metering Service
             API.
             </para>
              
             <para>
             AWS Marketplace sellers can use this API to submit usage data for custom usage dimensions.
             </para>
              
             <para>
             For information on the permissions you need to use this API, see <a href="https://docs.aws.amazon.com/marketplace/latest/userguide/iam-user-policy-for-aws-marketplace-actions.html">AWS
             Marketing metering and entitlement API permissions</a> in the <i>AWS Marketplace Seller
             Guide.</i> 
             </para>
              
             <para>
              <b>Submitting Metering Records</b> 
             </para>
              <ul> <li> 
             <para>
              <i>MeterUsage</i>- Submits the metering record for a Marketplace product. MeterUsage
             is called from an EC2 instance or a container running on EKS or ECS.
             </para>
              </li> <li> 
             <para>
              <i>BatchMeterUsage</i>- Submits the metering record for a set of customers. BatchMeterUsage
             is called from a software-as-a-service (SaaS) application.
             </para>
              </li> </ul> 
             <para>
              <b>Accepting New Customers</b> 
             </para>
              <ul> <li> 
             <para>
              <i>ResolveCustomer</i>- Called by a SaaS application during the registration process.
             When a buyer visits your website during the registration process, the buyer submits
             a Registration Token through the browser. The Registration Token is resolved through
             this API to obtain a CustomerIdentifier and Product Code.
             </para>
              </li> </ul> 
             <para>
              <b>Entitlement and Metering for Paid Container Products</b> 
             </para>
              <ul> <li> 
             <para>
              Paid container software products sold through AWS Marketplace must integrate with
             the AWS Marketplace Metering Service and call the RegisterUsage operation for software
             entitlement and metering. Free and BYOL products for Amazon ECS or Amazon EKS aren't
             required to call RegisterUsage, but you can do so if you want to receive usage data
             in your seller reports. For more information on using the RegisterUsage operation,
             see <a href="https://docs.aws.amazon.com/marketplace/latest/userguide/container-based-products.html">Container-Based
             Products</a>. 
             </para>
              </li> </ul> 
             <para>
             BatchMeterUsage API calls are captured by AWS CloudTrail. You can use Cloudtrail to
             verify that the SaaS metering records that you sent are accurate by searching for
             records with the eventName of BatchMeterUsage. You can also use CloudTrail to audit
             records over time. For more information, see the <i> <a href="http://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-concepts.html">AWS
             CloudTrail User Guide</a> </i>.
             </para>
             </summary>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringClient.#ctor">
             <summary>
             Constructs AmazonAWSMarketplaceMeteringClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringClient.#ctor(Amazon.RegionEndpoint)">
             <summary>
             Constructs AmazonAWSMarketplaceMeteringClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
             <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringClient.#ctor(Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringConfig)">
             <summary>
             Constructs AmazonAWSMarketplaceMeteringClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
             <param name="config">The AmazonAWSMarketplaceMeteringClient Configuration Object</param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringClient.#ctor(Amazon.Runtime.AWSCredentials)">
            <summary>
            Constructs AmazonAWSMarketplaceMeteringClient with AWS Credentials
            </summary>
            <param name="credentials">AWS Credentials</param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringClient.#ctor(Amazon.Runtime.AWSCredentials,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonAWSMarketplaceMeteringClient with AWS Credentials
            </summary>
            <param name="credentials">AWS Credentials</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringClient.#ctor(Amazon.Runtime.AWSCredentials,Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringConfig)">
            <summary>
            Constructs AmazonAWSMarketplaceMeteringClient with AWS Credentials and an
            AmazonAWSMarketplaceMeteringClient Configuration object.
            </summary>
            <param name="credentials">AWS Credentials</param>
            <param name="clientConfig">The AmazonAWSMarketplaceMeteringClient Configuration Object</param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringClient.#ctor(System.String,System.String)">
            <summary>
            Constructs AmazonAWSMarketplaceMeteringClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringClient.#ctor(System.String,System.String,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonAWSMarketplaceMeteringClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringClient.#ctor(System.String,System.String,Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringConfig)">
            <summary>
            Constructs AmazonAWSMarketplaceMeteringClient with AWS Access Key ID, AWS Secret Key and an
            AmazonAWSMarketplaceMeteringClient Configuration object. 
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="clientConfig">The AmazonAWSMarketplaceMeteringClient Configuration Object</param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringClient.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs AmazonAWSMarketplaceMeteringClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringClient.#ctor(System.String,System.String,System.String,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonAWSMarketplaceMeteringClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringClient.#ctor(System.String,System.String,System.String,Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringConfig)">
            <summary>
            Constructs AmazonAWSMarketplaceMeteringClient with AWS Access Key ID, AWS Secret Key and an
            AmazonAWSMarketplaceMeteringClient Configuration object. 
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
            <param name="clientConfig">The AmazonAWSMarketplaceMeteringClient Configuration Object</param>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringClient.CreateSigner">
            <summary>
            Creates the signer for the service.
            </summary>
        </member>
        <member name="P:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringClient.ServiceMetadata">
            <summary>
            Capture metadata for the service.
            </summary>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringClient.Dispose(System.Boolean)">
            <summary>
            Disposes the service client.
            </summary>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringClient.BatchMeterUsage(Amazon.AWSMarketplaceMetering.Model.BatchMeterUsageRequest)">
            <summary>
            BatchMeterUsage is called from a SaaS application listed on the AWS Marketplace to
            post metering records for a set of customers.
            
             
            <para>
            For identical requests, the API is idempotent; requests can be retried with the same
            records or a subset of the input records.
            </para>
             
            <para>
            Every request to BatchMeterUsage is for one product. If you need to meter usage for
            multiple products, you must make multiple calls to BatchMeterUsage.
            </para>
             
            <para>
            BatchMeterUsage can process up to 25 UsageRecords at a time.
            </para>
             
            <para>
            A UsageRecord can optionally include multiple usage allocations, to provide customers
            with usagedata split into buckets by tags that you define (or allow the customer to
            define).
            </para>
             
            <para>
            BatchMeterUsage requests must be less than 1MB in size.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the BatchMeterUsage service method.</param>
            
            <returns>The response from the BatchMeterUsage service method, as returned by AWSMarketplaceMetering.</returns>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.DisabledApiException">
            The API is disabled in the Region.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InternalServiceErrorException">
            An internal error has occurred. Retry your request. If the problem persists, post
            a message with details on the AWS forums.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidCustomerIdentifierException">
            You have metered usage for a CustomerIdentifier that does not exist.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidProductCodeException">
            The product code passed does not match the product code used for publishing the product.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidTagException">
            The tag is invalid, or the number of tags is greater than 5.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidUsageAllocationsException">
            The usage allocation objects are invalid, or the number of allocations is greater
            than 500 for a single usage record.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidUsageDimensionException">
            The usage dimension does not match one of the UsageDimensions associated with products.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.ThrottlingException">
            The calls to the API are throttled.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.TimestampOutOfBoundsException">
            The timestamp value passed in the meterUsage() is out of allowed range.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/meteringmarketplace-2016-01-14/BatchMeterUsage">REST API Reference for BatchMeterUsage Operation</seealso>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringClient.BatchMeterUsageAsync(Amazon.AWSMarketplaceMetering.Model.BatchMeterUsageRequest,System.Threading.CancellationToken)">
            <summary>
            BatchMeterUsage is called from a SaaS application listed on the AWS Marketplace to
            post metering records for a set of customers.
            
             
            <para>
            For identical requests, the API is idempotent; requests can be retried with the same
            records or a subset of the input records.
            </para>
             
            <para>
            Every request to BatchMeterUsage is for one product. If you need to meter usage for
            multiple products, you must make multiple calls to BatchMeterUsage.
            </para>
             
            <para>
            BatchMeterUsage can process up to 25 UsageRecords at a time.
            </para>
             
            <para>
            A UsageRecord can optionally include multiple usage allocations, to provide customers
            with usagedata split into buckets by tags that you define (or allow the customer to
            define).
            </para>
             
            <para>
            BatchMeterUsage requests must be less than 1MB in size.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the BatchMeterUsage service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the BatchMeterUsage service method, as returned by AWSMarketplaceMetering.</returns>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.DisabledApiException">
            The API is disabled in the Region.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InternalServiceErrorException">
            An internal error has occurred. Retry your request. If the problem persists, post
            a message with details on the AWS forums.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidCustomerIdentifierException">
            You have metered usage for a CustomerIdentifier that does not exist.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidProductCodeException">
            The product code passed does not match the product code used for publishing the product.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidTagException">
            The tag is invalid, or the number of tags is greater than 5.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidUsageAllocationsException">
            The usage allocation objects are invalid, or the number of allocations is greater
            than 500 for a single usage record.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidUsageDimensionException">
            The usage dimension does not match one of the UsageDimensions associated with products.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.ThrottlingException">
            The calls to the API are throttled.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.TimestampOutOfBoundsException">
            The timestamp value passed in the meterUsage() is out of allowed range.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/meteringmarketplace-2016-01-14/BatchMeterUsage">REST API Reference for BatchMeterUsage Operation</seealso>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringClient.MeterUsage(Amazon.AWSMarketplaceMetering.Model.MeterUsageRequest)">
            <summary>
            API to emit metering records. For identical requests, the API is idempotent. It simply
            returns the metering record ID.
            
             
            <para>
            MeterUsage is authenticated on the buyer's AWS account using credentials from the
            EC2 instance, ECS task, or EKS pod.
            </para>
             
            <para>
            MeterUsage can optionally include multiple usage allocations, to provide customers
            with usage data split into buckets by tags that you define (or allow the customer
            to define).
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the MeterUsage service method.</param>
            
            <returns>The response from the MeterUsage service method, as returned by AWSMarketplaceMetering.</returns>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.CustomerNotEntitledException">
            Exception thrown when the customer does not have a valid subscription for the product.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.DuplicateRequestException">
            A metering record has already been emitted by the same EC2 instance, ECS task, or
            EKS pod for the given {usageDimension, timestamp} with a different usageQuantity.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InternalServiceErrorException">
            An internal error has occurred. Retry your request. If the problem persists, post
            a message with details on the AWS forums.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidEndpointRegionException">
            The endpoint being called is in a AWS Region different from your EC2 instance, ECS
            task, or EKS pod. The Region of the Metering Service endpoint and the AWS Region of
            the resource must match.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidProductCodeException">
            The product code passed does not match the product code used for publishing the product.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidTagException">
            The tag is invalid, or the number of tags is greater than 5.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidUsageAllocationsException">
            The usage allocation objects are invalid, or the number of allocations is greater
            than 500 for a single usage record.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidUsageDimensionException">
            The usage dimension does not match one of the UsageDimensions associated with products.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.ThrottlingException">
            The calls to the API are throttled.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.TimestampOutOfBoundsException">
            The timestamp value passed in the meterUsage() is out of allowed range.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/meteringmarketplace-2016-01-14/MeterUsage">REST API Reference for MeterUsage Operation</seealso>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringClient.MeterUsageAsync(Amazon.AWSMarketplaceMetering.Model.MeterUsageRequest,System.Threading.CancellationToken)">
            <summary>
            API to emit metering records. For identical requests, the API is idempotent. It simply
            returns the metering record ID.
            
             
            <para>
            MeterUsage is authenticated on the buyer's AWS account using credentials from the
            EC2 instance, ECS task, or EKS pod.
            </para>
             
            <para>
            MeterUsage can optionally include multiple usage allocations, to provide customers
            with usage data split into buckets by tags that you define (or allow the customer
            to define).
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the MeterUsage service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the MeterUsage service method, as returned by AWSMarketplaceMetering.</returns>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.CustomerNotEntitledException">
            Exception thrown when the customer does not have a valid subscription for the product.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.DuplicateRequestException">
            A metering record has already been emitted by the same EC2 instance, ECS task, or
            EKS pod for the given {usageDimension, timestamp} with a different usageQuantity.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InternalServiceErrorException">
            An internal error has occurred. Retry your request. If the problem persists, post
            a message with details on the AWS forums.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidEndpointRegionException">
            The endpoint being called is in a AWS Region different from your EC2 instance, ECS
            task, or EKS pod. The Region of the Metering Service endpoint and the AWS Region of
            the resource must match.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidProductCodeException">
            The product code passed does not match the product code used for publishing the product.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidTagException">
            The tag is invalid, or the number of tags is greater than 5.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidUsageAllocationsException">
            The usage allocation objects are invalid, or the number of allocations is greater
            than 500 for a single usage record.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidUsageDimensionException">
            The usage dimension does not match one of the UsageDimensions associated with products.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.ThrottlingException">
            The calls to the API are throttled.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.TimestampOutOfBoundsException">
            The timestamp value passed in the meterUsage() is out of allowed range.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/meteringmarketplace-2016-01-14/MeterUsage">REST API Reference for MeterUsage Operation</seealso>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringClient.RegisterUsage(Amazon.AWSMarketplaceMetering.Model.RegisterUsageRequest)">
            <summary>
            Paid container software products sold through AWS Marketplace must integrate with
            the AWS Marketplace Metering Service and call the RegisterUsage operation for software
            entitlement and metering. Free and BYOL products for Amazon ECS or Amazon EKS aren't
            required to call RegisterUsage, but you may choose to do so if you would like to receive
            usage data in your seller reports. The sections below explain the behavior of RegisterUsage.
            RegisterUsage performs two primary functions: metering and entitlement.
            
             <ul> <li> 
            <para>
             <i>Entitlement</i>: RegisterUsage allows you to verify that the customer running
            your paid software is subscribed to your product on AWS Marketplace, enabling you
            to guard against unauthorized use. Your container image that integrates with RegisterUsage
            is only required to guard against unauthorized use at container startup, as such a
            CustomerNotSubscribedException/PlatformNotSupportedException will only be thrown on
            the initial call to RegisterUsage. Subsequent calls from the same Amazon ECS task
            instance (e.g. task-id) or Amazon EKS pod will not throw a CustomerNotSubscribedException,
            even if the customer unsubscribes while the Amazon ECS task or Amazon EKS pod is still
            running.
            </para>
             </li> <li> 
            <para>
             <i>Metering</i>: RegisterUsage meters software use per ECS task, per hour, or per
            pod for Amazon EKS with usage prorated to the second. A minimum of 1 minute of usage
            applies to tasks that are short lived. For example, if a customer has a 10 node Amazon
            ECS or Amazon EKS cluster and a service configured as a Daemon Set, then Amazon ECS
            or Amazon EKS will launch a task on all 10 cluster nodes and the customer will be
            charged: (10 * hourly_rate). Metering for software use is automatically handled by
            the AWS Marketplace Metering Control Plane -- your software is not required to perform
            any metering specific actions, other than call RegisterUsage once for metering of
            software use to commence. The AWS Marketplace Metering Control Plane will also continue
            to bill customers for running ECS tasks and Amazon EKS pods, regardless of the customers
            subscription state, removing the need for your software to perform entitlement checks
            at runtime.
            </para>
             </li> </ul>
            </summary>
            <param name="request">Container for the necessary parameters to execute the RegisterUsage service method.</param>
            
            <returns>The response from the RegisterUsage service method, as returned by AWSMarketplaceMetering.</returns>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.CustomerNotEntitledException">
            Exception thrown when the customer does not have a valid subscription for the product.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.DisabledApiException">
            The API is disabled in the Region.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InternalServiceErrorException">
            An internal error has occurred. Retry your request. If the problem persists, post
            a message with details on the AWS forums.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidProductCodeException">
            The product code passed does not match the product code used for publishing the product.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidPublicKeyVersionException">
            Public Key version is invalid.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidRegionException">
            RegisterUsage must be called in the same AWS Region the ECS task was launched in.
            This prevents a container from hardcoding a Region (e.g. withRegion(“us-east-1”) when
            calling RegisterUsage.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.PlatformNotSupportedException">
            AWS Marketplace does not support metering usage from the underlying platform. Currently,
            Amazon ECS, Amazon EKS, and AWS Fargate are supported.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.ThrottlingException">
            The calls to the API are throttled.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/meteringmarketplace-2016-01-14/RegisterUsage">REST API Reference for RegisterUsage Operation</seealso>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringClient.RegisterUsageAsync(Amazon.AWSMarketplaceMetering.Model.RegisterUsageRequest,System.Threading.CancellationToken)">
            <summary>
            Paid container software products sold through AWS Marketplace must integrate with
            the AWS Marketplace Metering Service and call the RegisterUsage operation for software
            entitlement and metering. Free and BYOL products for Amazon ECS or Amazon EKS aren't
            required to call RegisterUsage, but you may choose to do so if you would like to receive
            usage data in your seller reports. The sections below explain the behavior of RegisterUsage.
            RegisterUsage performs two primary functions: metering and entitlement.
            
             <ul> <li> 
            <para>
             <i>Entitlement</i>: RegisterUsage allows you to verify that the customer running
            your paid software is subscribed to your product on AWS Marketplace, enabling you
            to guard against unauthorized use. Your container image that integrates with RegisterUsage
            is only required to guard against unauthorized use at container startup, as such a
            CustomerNotSubscribedException/PlatformNotSupportedException will only be thrown on
            the initial call to RegisterUsage. Subsequent calls from the same Amazon ECS task
            instance (e.g. task-id) or Amazon EKS pod will not throw a CustomerNotSubscribedException,
            even if the customer unsubscribes while the Amazon ECS task or Amazon EKS pod is still
            running.
            </para>
             </li> <li> 
            <para>
             <i>Metering</i>: RegisterUsage meters software use per ECS task, per hour, or per
            pod for Amazon EKS with usage prorated to the second. A minimum of 1 minute of usage
            applies to tasks that are short lived. For example, if a customer has a 10 node Amazon
            ECS or Amazon EKS cluster and a service configured as a Daemon Set, then Amazon ECS
            or Amazon EKS will launch a task on all 10 cluster nodes and the customer will be
            charged: (10 * hourly_rate). Metering for software use is automatically handled by
            the AWS Marketplace Metering Control Plane -- your software is not required to perform
            any metering specific actions, other than call RegisterUsage once for metering of
            software use to commence. The AWS Marketplace Metering Control Plane will also continue
            to bill customers for running ECS tasks and Amazon EKS pods, regardless of the customers
            subscription state, removing the need for your software to perform entitlement checks
            at runtime.
            </para>
             </li> </ul>
            </summary>
            <param name="request">Container for the necessary parameters to execute the RegisterUsage service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the RegisterUsage service method, as returned by AWSMarketplaceMetering.</returns>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.CustomerNotEntitledException">
            Exception thrown when the customer does not have a valid subscription for the product.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.DisabledApiException">
            The API is disabled in the Region.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InternalServiceErrorException">
            An internal error has occurred. Retry your request. If the problem persists, post
            a message with details on the AWS forums.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidProductCodeException">
            The product code passed does not match the product code used for publishing the product.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidPublicKeyVersionException">
            Public Key version is invalid.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidRegionException">
            RegisterUsage must be called in the same AWS Region the ECS task was launched in.
            This prevents a container from hardcoding a Region (e.g. withRegion(“us-east-1”) when
            calling RegisterUsage.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.PlatformNotSupportedException">
            AWS Marketplace does not support metering usage from the underlying platform. Currently,
            Amazon ECS, Amazon EKS, and AWS Fargate are supported.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.ThrottlingException">
            The calls to the API are throttled.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/meteringmarketplace-2016-01-14/RegisterUsage">REST API Reference for RegisterUsage Operation</seealso>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringClient.ResolveCustomer(Amazon.AWSMarketplaceMetering.Model.ResolveCustomerRequest)">
            <summary>
            ResolveCustomer is called by a SaaS application during the registration process. When
            a buyer visits your website during the registration process, the buyer submits a registration
            token through their browser. The registration token is resolved through this API to
            obtain a CustomerIdentifier and product code.
            </summary>
            <param name="request">Container for the necessary parameters to execute the ResolveCustomer service method.</param>
            
            <returns>The response from the ResolveCustomer service method, as returned by AWSMarketplaceMetering.</returns>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.DisabledApiException">
            The API is disabled in the Region.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.ExpiredTokenException">
            The submitted registration token has expired. This can happen if the buyer's browser
            takes too long to redirect to your page, the buyer has resubmitted the registration
            token, or your application has held on to the registration token for too long. Your
            SaaS registration website should redeem this token as soon as it is submitted by the
            buyer's browser.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InternalServiceErrorException">
            An internal error has occurred. Retry your request. If the problem persists, post
            a message with details on the AWS forums.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidTokenException">
            Registration token is invalid.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.ThrottlingException">
            The calls to the API are throttled.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/meteringmarketplace-2016-01-14/ResolveCustomer">REST API Reference for ResolveCustomer Operation</seealso>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.AmazonAWSMarketplaceMeteringClient.ResolveCustomerAsync(Amazon.AWSMarketplaceMetering.Model.ResolveCustomerRequest,System.Threading.CancellationToken)">
            <summary>
            ResolveCustomer is called by a SaaS application during the registration process. When
            a buyer visits your website during the registration process, the buyer submits a registration
            token through their browser. The registration token is resolved through this API to
            obtain a CustomerIdentifier and product code.
            </summary>
            <param name="request">Container for the necessary parameters to execute the ResolveCustomer service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ResolveCustomer service method, as returned by AWSMarketplaceMetering.</returns>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.DisabledApiException">
            The API is disabled in the Region.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.ExpiredTokenException">
            The submitted registration token has expired. This can happen if the buyer's browser
            takes too long to redirect to your page, the buyer has resubmitted the registration
            token, or your application has held on to the registration token for too long. Your
            SaaS registration website should redeem this token as soon as it is submitted by the
            buyer's browser.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InternalServiceErrorException">
            An internal error has occurred. Retry your request. If the problem persists, post
            a message with details on the AWS forums.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidTokenException">
            Registration token is invalid.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.ThrottlingException">
            The calls to the API are throttled.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/meteringmarketplace-2016-01-14/ResolveCustomer">REST API Reference for ResolveCustomer Operation</seealso>
        </member>
        <member name="T:Amazon.AWSMarketplaceMetering.IAmazonAWSMarketplaceMetering">
             <summary>
             Interface for accessing AWSMarketplaceMetering
            
             AWS Marketplace Metering Service 
             <para>
             This reference provides descriptions of the low-level AWS Marketplace Metering Service
             API.
             </para>
              
             <para>
             AWS Marketplace sellers can use this API to submit usage data for custom usage dimensions.
             </para>
              
             <para>
             For information on the permissions you need to use this API, see <a href="https://docs.aws.amazon.com/marketplace/latest/userguide/iam-user-policy-for-aws-marketplace-actions.html">AWS
             Marketing metering and entitlement API permissions</a> in the <i>AWS Marketplace Seller
             Guide.</i> 
             </para>
              
             <para>
              <b>Submitting Metering Records</b> 
             </para>
              <ul> <li> 
             <para>
              <i>MeterUsage</i>- Submits the metering record for a Marketplace product. MeterUsage
             is called from an EC2 instance or a container running on EKS or ECS.
             </para>
              </li> <li> 
             <para>
              <i>BatchMeterUsage</i>- Submits the metering record for a set of customers. BatchMeterUsage
             is called from a software-as-a-service (SaaS) application.
             </para>
              </li> </ul> 
             <para>
              <b>Accepting New Customers</b> 
             </para>
              <ul> <li> 
             <para>
              <i>ResolveCustomer</i>- Called by a SaaS application during the registration process.
             When a buyer visits your website during the registration process, the buyer submits
             a Registration Token through the browser. The Registration Token is resolved through
             this API to obtain a CustomerIdentifier and Product Code.
             </para>
              </li> </ul> 
             <para>
              <b>Entitlement and Metering for Paid Container Products</b> 
             </para>
              <ul> <li> 
             <para>
              Paid container software products sold through AWS Marketplace must integrate with
             the AWS Marketplace Metering Service and call the RegisterUsage operation for software
             entitlement and metering. Free and BYOL products for Amazon ECS or Amazon EKS aren't
             required to call RegisterUsage, but you can do so if you want to receive usage data
             in your seller reports. For more information on using the RegisterUsage operation,
             see <a href="https://docs.aws.amazon.com/marketplace/latest/userguide/container-based-products.html">Container-Based
             Products</a>. 
             </para>
              </li> </ul> 
             <para>
             BatchMeterUsage API calls are captured by AWS CloudTrail. You can use Cloudtrail to
             verify that the SaaS metering records that you sent are accurate by searching for
             records with the eventName of BatchMeterUsage. You can also use CloudTrail to audit
             records over time. For more information, see the <i> <a href="http://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-concepts.html">AWS
             CloudTrail User Guide</a> </i>.
             </para>
             </summary>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.IAmazonAWSMarketplaceMetering.BatchMeterUsage(Amazon.AWSMarketplaceMetering.Model.BatchMeterUsageRequest)">
            <summary>
            BatchMeterUsage is called from a SaaS application listed on the AWS Marketplace to
            post metering records for a set of customers.
            
             
            <para>
            For identical requests, the API is idempotent; requests can be retried with the same
            records or a subset of the input records.
            </para>
             
            <para>
            Every request to BatchMeterUsage is for one product. If you need to meter usage for
            multiple products, you must make multiple calls to BatchMeterUsage.
            </para>
             
            <para>
            BatchMeterUsage can process up to 25 UsageRecords at a time.
            </para>
             
            <para>
            A UsageRecord can optionally include multiple usage allocations, to provide customers
            with usagedata split into buckets by tags that you define (or allow the customer to
            define).
            </para>
             
            <para>
            BatchMeterUsage requests must be less than 1MB in size.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the BatchMeterUsage service method.</param>
            
            <returns>The response from the BatchMeterUsage service method, as returned by AWSMarketplaceMetering.</returns>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.DisabledApiException">
            The API is disabled in the Region.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InternalServiceErrorException">
            An internal error has occurred. Retry your request. If the problem persists, post
            a message with details on the AWS forums.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidCustomerIdentifierException">
            You have metered usage for a CustomerIdentifier that does not exist.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidProductCodeException">
            The product code passed does not match the product code used for publishing the product.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidTagException">
            The tag is invalid, or the number of tags is greater than 5.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidUsageAllocationsException">
            The usage allocation objects are invalid, or the number of allocations is greater
            than 500 for a single usage record.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidUsageDimensionException">
            The usage dimension does not match one of the UsageDimensions associated with products.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.ThrottlingException">
            The calls to the API are throttled.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.TimestampOutOfBoundsException">
            The timestamp value passed in the meterUsage() is out of allowed range.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/meteringmarketplace-2016-01-14/BatchMeterUsage">REST API Reference for BatchMeterUsage Operation</seealso>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.IAmazonAWSMarketplaceMetering.BatchMeterUsageAsync(Amazon.AWSMarketplaceMetering.Model.BatchMeterUsageRequest,System.Threading.CancellationToken)">
            <summary>
            BatchMeterUsage is called from a SaaS application listed on the AWS Marketplace to
            post metering records for a set of customers.
            
             
            <para>
            For identical requests, the API is idempotent; requests can be retried with the same
            records or a subset of the input records.
            </para>
             
            <para>
            Every request to BatchMeterUsage is for one product. If you need to meter usage for
            multiple products, you must make multiple calls to BatchMeterUsage.
            </para>
             
            <para>
            BatchMeterUsage can process up to 25 UsageRecords at a time.
            </para>
             
            <para>
            A UsageRecord can optionally include multiple usage allocations, to provide customers
            with usagedata split into buckets by tags that you define (or allow the customer to
            define).
            </para>
             
            <para>
            BatchMeterUsage requests must be less than 1MB in size.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the BatchMeterUsage service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the BatchMeterUsage service method, as returned by AWSMarketplaceMetering.</returns>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.DisabledApiException">
            The API is disabled in the Region.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InternalServiceErrorException">
            An internal error has occurred. Retry your request. If the problem persists, post
            a message with details on the AWS forums.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidCustomerIdentifierException">
            You have metered usage for a CustomerIdentifier that does not exist.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidProductCodeException">
            The product code passed does not match the product code used for publishing the product.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidTagException">
            The tag is invalid, or the number of tags is greater than 5.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidUsageAllocationsException">
            The usage allocation objects are invalid, or the number of allocations is greater
            than 500 for a single usage record.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidUsageDimensionException">
            The usage dimension does not match one of the UsageDimensions associated with products.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.ThrottlingException">
            The calls to the API are throttled.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.TimestampOutOfBoundsException">
            The timestamp value passed in the meterUsage() is out of allowed range.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/meteringmarketplace-2016-01-14/BatchMeterUsage">REST API Reference for BatchMeterUsage Operation</seealso>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.IAmazonAWSMarketplaceMetering.MeterUsage(Amazon.AWSMarketplaceMetering.Model.MeterUsageRequest)">
            <summary>
            API to emit metering records. For identical requests, the API is idempotent. It simply
            returns the metering record ID.
            
             
            <para>
            MeterUsage is authenticated on the buyer's AWS account using credentials from the
            EC2 instance, ECS task, or EKS pod.
            </para>
             
            <para>
            MeterUsage can optionally include multiple usage allocations, to provide customers
            with usage data split into buckets by tags that you define (or allow the customer
            to define).
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the MeterUsage service method.</param>
            
            <returns>The response from the MeterUsage service method, as returned by AWSMarketplaceMetering.</returns>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.CustomerNotEntitledException">
            Exception thrown when the customer does not have a valid subscription for the product.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.DuplicateRequestException">
            A metering record has already been emitted by the same EC2 instance, ECS task, or
            EKS pod for the given {usageDimension, timestamp} with a different usageQuantity.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InternalServiceErrorException">
            An internal error has occurred. Retry your request. If the problem persists, post
            a message with details on the AWS forums.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidEndpointRegionException">
            The endpoint being called is in a AWS Region different from your EC2 instance, ECS
            task, or EKS pod. The Region of the Metering Service endpoint and the AWS Region of
            the resource must match.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidProductCodeException">
            The product code passed does not match the product code used for publishing the product.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidTagException">
            The tag is invalid, or the number of tags is greater than 5.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidUsageAllocationsException">
            The usage allocation objects are invalid, or the number of allocations is greater
            than 500 for a single usage record.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidUsageDimensionException">
            The usage dimension does not match one of the UsageDimensions associated with products.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.ThrottlingException">
            The calls to the API are throttled.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.TimestampOutOfBoundsException">
            The timestamp value passed in the meterUsage() is out of allowed range.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/meteringmarketplace-2016-01-14/MeterUsage">REST API Reference for MeterUsage Operation</seealso>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.IAmazonAWSMarketplaceMetering.MeterUsageAsync(Amazon.AWSMarketplaceMetering.Model.MeterUsageRequest,System.Threading.CancellationToken)">
            <summary>
            API to emit metering records. For identical requests, the API is idempotent. It simply
            returns the metering record ID.
            
             
            <para>
            MeterUsage is authenticated on the buyer's AWS account using credentials from the
            EC2 instance, ECS task, or EKS pod.
            </para>
             
            <para>
            MeterUsage can optionally include multiple usage allocations, to provide customers
            with usage data split into buckets by tags that you define (or allow the customer
            to define).
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the MeterUsage service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the MeterUsage service method, as returned by AWSMarketplaceMetering.</returns>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.CustomerNotEntitledException">
            Exception thrown when the customer does not have a valid subscription for the product.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.DuplicateRequestException">
            A metering record has already been emitted by the same EC2 instance, ECS task, or
            EKS pod for the given {usageDimension, timestamp} with a different usageQuantity.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InternalServiceErrorException">
            An internal error has occurred. Retry your request. If the problem persists, post
            a message with details on the AWS forums.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidEndpointRegionException">
            The endpoint being called is in a AWS Region different from your EC2 instance, ECS
            task, or EKS pod. The Region of the Metering Service endpoint and the AWS Region of
            the resource must match.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidProductCodeException">
            The product code passed does not match the product code used for publishing the product.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidTagException">
            The tag is invalid, or the number of tags is greater than 5.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidUsageAllocationsException">
            The usage allocation objects are invalid, or the number of allocations is greater
            than 500 for a single usage record.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidUsageDimensionException">
            The usage dimension does not match one of the UsageDimensions associated with products.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.ThrottlingException">
            The calls to the API are throttled.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.TimestampOutOfBoundsException">
            The timestamp value passed in the meterUsage() is out of allowed range.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/meteringmarketplace-2016-01-14/MeterUsage">REST API Reference for MeterUsage Operation</seealso>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.IAmazonAWSMarketplaceMetering.RegisterUsage(Amazon.AWSMarketplaceMetering.Model.RegisterUsageRequest)">
            <summary>
            Paid container software products sold through AWS Marketplace must integrate with
            the AWS Marketplace Metering Service and call the RegisterUsage operation for software
            entitlement and metering. Free and BYOL products for Amazon ECS or Amazon EKS aren't
            required to call RegisterUsage, but you may choose to do so if you would like to receive
            usage data in your seller reports. The sections below explain the behavior of RegisterUsage.
            RegisterUsage performs two primary functions: metering and entitlement.
            
             <ul> <li> 
            <para>
             <i>Entitlement</i>: RegisterUsage allows you to verify that the customer running
            your paid software is subscribed to your product on AWS Marketplace, enabling you
            to guard against unauthorized use. Your container image that integrates with RegisterUsage
            is only required to guard against unauthorized use at container startup, as such a
            CustomerNotSubscribedException/PlatformNotSupportedException will only be thrown on
            the initial call to RegisterUsage. Subsequent calls from the same Amazon ECS task
            instance (e.g. task-id) or Amazon EKS pod will not throw a CustomerNotSubscribedException,
            even if the customer unsubscribes while the Amazon ECS task or Amazon EKS pod is still
            running.
            </para>
             </li> <li> 
            <para>
             <i>Metering</i>: RegisterUsage meters software use per ECS task, per hour, or per
            pod for Amazon EKS with usage prorated to the second. A minimum of 1 minute of usage
            applies to tasks that are short lived. For example, if a customer has a 10 node Amazon
            ECS or Amazon EKS cluster and a service configured as a Daemon Set, then Amazon ECS
            or Amazon EKS will launch a task on all 10 cluster nodes and the customer will be
            charged: (10 * hourly_rate). Metering for software use is automatically handled by
            the AWS Marketplace Metering Control Plane -- your software is not required to perform
            any metering specific actions, other than call RegisterUsage once for metering of
            software use to commence. The AWS Marketplace Metering Control Plane will also continue
            to bill customers for running ECS tasks and Amazon EKS pods, regardless of the customers
            subscription state, removing the need for your software to perform entitlement checks
            at runtime.
            </para>
             </li> </ul>
            </summary>
            <param name="request">Container for the necessary parameters to execute the RegisterUsage service method.</param>
            
            <returns>The response from the RegisterUsage service method, as returned by AWSMarketplaceMetering.</returns>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.CustomerNotEntitledException">
            Exception thrown when the customer does not have a valid subscription for the product.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.DisabledApiException">
            The API is disabled in the Region.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InternalServiceErrorException">
            An internal error has occurred. Retry your request. If the problem persists, post
            a message with details on the AWS forums.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidProductCodeException">
            The product code passed does not match the product code used for publishing the product.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidPublicKeyVersionException">
            Public Key version is invalid.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidRegionException">
            RegisterUsage must be called in the same AWS Region the ECS task was launched in.
            This prevents a container from hardcoding a Region (e.g. withRegion(“us-east-1”) when
            calling RegisterUsage.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.PlatformNotSupportedException">
            AWS Marketplace does not support metering usage from the underlying platform. Currently,
            Amazon ECS, Amazon EKS, and AWS Fargate are supported.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.ThrottlingException">
            The calls to the API are throttled.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/meteringmarketplace-2016-01-14/RegisterUsage">REST API Reference for RegisterUsage Operation</seealso>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.IAmazonAWSMarketplaceMetering.RegisterUsageAsync(Amazon.AWSMarketplaceMetering.Model.RegisterUsageRequest,System.Threading.CancellationToken)">
            <summary>
            Paid container software products sold through AWS Marketplace must integrate with
            the AWS Marketplace Metering Service and call the RegisterUsage operation for software
            entitlement and metering. Free and BYOL products for Amazon ECS or Amazon EKS aren't
            required to call RegisterUsage, but you may choose to do so if you would like to receive
            usage data in your seller reports. The sections below explain the behavior of RegisterUsage.
            RegisterUsage performs two primary functions: metering and entitlement.
            
             <ul> <li> 
            <para>
             <i>Entitlement</i>: RegisterUsage allows you to verify that the customer running
            your paid software is subscribed to your product on AWS Marketplace, enabling you
            to guard against unauthorized use. Your container image that integrates with RegisterUsage
            is only required to guard against unauthorized use at container startup, as such a
            CustomerNotSubscribedException/PlatformNotSupportedException will only be thrown on
            the initial call to RegisterUsage. Subsequent calls from the same Amazon ECS task
            instance (e.g. task-id) or Amazon EKS pod will not throw a CustomerNotSubscribedException,
            even if the customer unsubscribes while the Amazon ECS task or Amazon EKS pod is still
            running.
            </para>
             </li> <li> 
            <para>
             <i>Metering</i>: RegisterUsage meters software use per ECS task, per hour, or per
            pod for Amazon EKS with usage prorated to the second. A minimum of 1 minute of usage
            applies to tasks that are short lived. For example, if a customer has a 10 node Amazon
            ECS or Amazon EKS cluster and a service configured as a Daemon Set, then Amazon ECS
            or Amazon EKS will launch a task on all 10 cluster nodes and the customer will be
            charged: (10 * hourly_rate). Metering for software use is automatically handled by
            the AWS Marketplace Metering Control Plane -- your software is not required to perform
            any metering specific actions, other than call RegisterUsage once for metering of
            software use to commence. The AWS Marketplace Metering Control Plane will also continue
            to bill customers for running ECS tasks and Amazon EKS pods, regardless of the customers
            subscription state, removing the need for your software to perform entitlement checks
            at runtime.
            </para>
             </li> </ul>
            </summary>
            <param name="request">Container for the necessary parameters to execute the RegisterUsage service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the RegisterUsage service method, as returned by AWSMarketplaceMetering.</returns>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.CustomerNotEntitledException">
            Exception thrown when the customer does not have a valid subscription for the product.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.DisabledApiException">
            The API is disabled in the Region.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InternalServiceErrorException">
            An internal error has occurred. Retry your request. If the problem persists, post
            a message with details on the AWS forums.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidProductCodeException">
            The product code passed does not match the product code used for publishing the product.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidPublicKeyVersionException">
            Public Key version is invalid.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidRegionException">
            RegisterUsage must be called in the same AWS Region the ECS task was launched in.
            This prevents a container from hardcoding a Region (e.g. withRegion(“us-east-1”) when
            calling RegisterUsage.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.PlatformNotSupportedException">
            AWS Marketplace does not support metering usage from the underlying platform. Currently,
            Amazon ECS, Amazon EKS, and AWS Fargate are supported.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.ThrottlingException">
            The calls to the API are throttled.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/meteringmarketplace-2016-01-14/RegisterUsage">REST API Reference for RegisterUsage Operation</seealso>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.IAmazonAWSMarketplaceMetering.ResolveCustomer(Amazon.AWSMarketplaceMetering.Model.ResolveCustomerRequest)">
            <summary>
            ResolveCustomer is called by a SaaS application during the registration process. When
            a buyer visits your website during the registration process, the buyer submits a registration
            token through their browser. The registration token is resolved through this API to
            obtain a CustomerIdentifier and product code.
            </summary>
            <param name="request">Container for the necessary parameters to execute the ResolveCustomer service method.</param>
            
            <returns>The response from the ResolveCustomer service method, as returned by AWSMarketplaceMetering.</returns>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.DisabledApiException">
            The API is disabled in the Region.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.ExpiredTokenException">
            The submitted registration token has expired. This can happen if the buyer's browser
            takes too long to redirect to your page, the buyer has resubmitted the registration
            token, or your application has held on to the registration token for too long. Your
            SaaS registration website should redeem this token as soon as it is submitted by the
            buyer's browser.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InternalServiceErrorException">
            An internal error has occurred. Retry your request. If the problem persists, post
            a message with details on the AWS forums.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidTokenException">
            Registration token is invalid.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.ThrottlingException">
            The calls to the API are throttled.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/meteringmarketplace-2016-01-14/ResolveCustomer">REST API Reference for ResolveCustomer Operation</seealso>
        </member>
        <member name="M:Amazon.AWSMarketplaceMetering.IAmazonAWSMarketplaceMetering.ResolveCustomerAsync(Amazon.AWSMarketplaceMetering.Model.ResolveCustomerRequest,System.Threading.CancellationToken)">
            <summary>
            ResolveCustomer is called by a SaaS application during the registration process. When
            a buyer visits your website during the registration process, the buyer submits a registration
            token through their browser. The registration token is resolved through this API to
            obtain a CustomerIdentifier and product code.
            </summary>
            <param name="request">Container for the necessary parameters to execute the ResolveCustomer service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ResolveCustomer service method, as returned by AWSMarketplaceMetering.</returns>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.DisabledApiException">
            The API is disabled in the Region.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.ExpiredTokenException">
            The submitted registration token has expired. This can happen if the buyer's browser
            takes too long to redirect to your page, the buyer has resubmitted the registration
            token, or your application has held on to the registration token for too long. Your
            SaaS registration website should redeem this token as soon as it is submitted by the
            buyer's browser.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InternalServiceErrorException">
            An internal error has occurred. Retry your request. If the problem persists, post
            a message with details on the AWS forums.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.InvalidTokenException">
            Registration token is invalid.
            </exception>
            <exception cref="T:Amazon.AWSMarketplaceMetering.Model.ThrottlingException">
            The calls to the API are throttled.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/meteringmarketplace-2016-01-14/ResolveCustomer">REST API Reference for ResolveCustomer Operation</seealso>
        </member>
    </members>
</doc>
