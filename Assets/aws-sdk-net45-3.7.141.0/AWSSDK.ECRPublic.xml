<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AWSSDK.ECRPublic</name>
    </assembly>
    <members>
        <member name="T:Amazon.ECRPublic.AmazonECRPublicConfig">
            <summary>
            Configuration for accessing Amazon ECRPublic service
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicConfig.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.AmazonECRPublicConfig.RegionEndpointServiceName">
            <summary>
            The constant used to lookup in the region hash the endpoint.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.AmazonECRPublicConfig.ServiceVersion">
            <summary>
            Gets the ServiceVersion property.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.AmazonECRPublicConfig.UserAgent">
            <summary>
            Gets the value of UserAgent property.
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.AmazonECRPublicException">
            <summary>
             Common exception for the ECRPublic service.
             </summary>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicException.#ctor(System.String)">
            <summary>
            Construct instance of AmazonECRPublicException
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of AmazonECRPublicException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicException.#ctor(System.Exception)">
            <summary>
            Construct instance of AmazonECRPublicException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of AmazonECRPublicException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of AmazonECRPublicException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the AmazonECRPublicException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:Amazon.ECRPublic.Internal.AmazonECRPublicMetadata">
            <summary>
            Service metadata for  Amazon ECRPublic service
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Internal.AmazonECRPublicMetadata.ServiceId">
            <summary>
            Gets the value of the Service Id.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Internal.AmazonECRPublicMetadata.OperationNameMapping">
            <summary>
            Gets the dictionary that gives mapping of renamed operations
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.AmazonECRPublicRequest">
            <summary>
            Base class for ECRPublic operation requests.
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.AuthorizationData">
            <summary>
            An authorization token data object that corresponds to a public registry.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.AuthorizationData.AuthorizationToken">
            <summary>
            Gets and sets the property AuthorizationToken. 
            <para>
            A base64-encoded string that contains authorization data for a public Amazon ECR registry.
            When the string is decoded, it is presented in the format <code>user:password</code>
            for public registry authentication using <code>docker login</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.AuthorizationData.ExpiresAt">
            <summary>
            Gets and sets the property ExpiresAt. 
            <para>
            The Unix time in seconds and milliseconds when the authorization token expires. Authorization
            tokens are valid for 12 hours.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.BatchCheckLayerAvailabilityRequest">
            <summary>
            Container for the parameters to the BatchCheckLayerAvailability operation.
            Checks the availability of one or more image layers within a repository in a public
            registry. When an image is pushed to a repository, each image layer is checked to
            verify if it has been uploaded before. If it has been uploaded, then the image layer
            is skipped.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy and is not generally used by customers
            for pulling and pushing images. In most cases, you should use the <code>docker</code>
            CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.BatchCheckLayerAvailabilityRequest.LayerDigests">
            <summary>
            Gets and sets the property LayerDigests. 
            <para>
            The digests of the image layers to check.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.BatchCheckLayerAvailabilityRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the public registry that contains the image layers
            to check. If you do not specify a registry, the default public registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.BatchCheckLayerAvailabilityRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository that is associated with the image layers to check.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.BatchCheckLayerAvailabilityResponse">
            <summary>
            This is the response object from the BatchCheckLayerAvailability operation.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.BatchCheckLayerAvailabilityResponse.Failures">
            <summary>
            Gets and sets the property Failures. 
            <para>
            Any failures associated with the call.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.BatchCheckLayerAvailabilityResponse.Layers">
            <summary>
            Gets and sets the property Layers. 
            <para>
            A list of image layer objects corresponding to the image layer references in the request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.BatchDeleteImageRequest">
            <summary>
            Container for the parameters to the BatchDeleteImage operation.
            Deletes a list of specified images within a repository in a public registry. Images
            are specified with either an <code>imageTag</code> or <code>imageDigest</code>.
            
             
            <para>
            You can remove a tag from an image by specifying the image's tag in your request.
            When you remove the last tag from an image, the image is deleted from your repository.
            </para>
             
            <para>
            You can completely delete an image (and all of its tags) by specifying the image's
            digest in your request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.BatchDeleteImageRequest.ImageIds">
            <summary>
            Gets and sets the property ImageIds. 
            <para>
            A list of image ID references that correspond to images to delete. The format of the
            <code>imageIds</code> reference is <code>imageTag=tag</code> or <code>imageDigest=digest</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.BatchDeleteImageRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the image to delete.
            If you do not specify a registry, the default public registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.BatchDeleteImageRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The repository in a public registry that contains the image to delete.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.BatchDeleteImageResponse">
            <summary>
            This is the response object from the BatchDeleteImage operation.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.BatchDeleteImageResponse.Failures">
            <summary>
            Gets and sets the property Failures. 
            <para>
            Any failures associated with the call.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.BatchDeleteImageResponse.ImageIds">
            <summary>
            Gets and sets the property ImageIds. 
            <para>
            The image IDs of the deleted images.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.CompleteLayerUploadRequest">
            <summary>
            Container for the parameters to the CompleteLayerUpload operation.
            Informs Amazon ECR that the image layer upload has completed for a specified public
            registry, repository name, and upload ID. You can optionally provide a <code>sha256</code>
            digest of the image layer for data validation purposes.
            
             
            <para>
            When an image is pushed, the CompleteLayerUpload API is called once per each new image
            layer to verify that the upload has completed.
            </para>
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy and is not generally used by customers
            for pulling and pushing images. In most cases, you should use the <code>docker</code>
            CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.CompleteLayerUploadRequest.LayerDigests">
            <summary>
            Gets and sets the property LayerDigests. 
            <para>
            The <code>sha256</code> digest of the image layer.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.CompleteLayerUploadRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry to which to upload layers. If you
            do not specify a registry, the default public registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.CompleteLayerUploadRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository in a public registry to associate with the image layer.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.CompleteLayerUploadRequest.UploadId">
            <summary>
            Gets and sets the property UploadId. 
            <para>
            The upload ID from a previous <a>InitiateLayerUpload</a> operation to associate with
            the image layer.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.CompleteLayerUploadResponse">
            <summary>
            This is the response object from the CompleteLayerUpload operation.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.CompleteLayerUploadResponse.LayerDigest">
            <summary>
            Gets and sets the property LayerDigest. 
            <para>
            The <code>sha256</code> digest of the image layer.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.CompleteLayerUploadResponse.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The public registry ID associated with the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.CompleteLayerUploadResponse.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The repository name associated with the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.CompleteLayerUploadResponse.UploadId">
            <summary>
            Gets and sets the property UploadId. 
            <para>
            The upload ID associated with the layer.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.CreateRepositoryRequest">
            <summary>
            Container for the parameters to the CreateRepository operation.
            Creates a repository in a public registry. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/Repositories.html">Amazon
            ECR repositories</a> in the <i>Amazon Elastic Container Registry User Guide</i>.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.CreateRepositoryRequest.CatalogData">
            <summary>
            Gets and sets the property CatalogData. 
            <para>
            The details about the repository that are publicly visible in the Amazon ECR Public
            Gallery.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.CreateRepositoryRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name to use for the repository. This appears publicly in the Amazon ECR Public
            Gallery. The repository name may be specified on its own (such as <code>nginx-web-app</code>)
            or it can be prepended with a namespace to group the repository into a category (such
            as <code>project-a/nginx-web-app</code>).
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.CreateRepositoryRequest.Tags">
            <summary>
            Gets and sets the property Tags. 
            <para>
            The metadata that you apply to the repository to help you categorize and organize
            them. Each tag consists of a key and an optional value, both of which you define.
            Tag keys can have a maximum character length of 128 characters, and tag values can
            have a maximum length of 256 characters.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.CreateRepositoryResponse">
            <summary>
            This is the response object from the CreateRepository operation.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.CreateRepositoryResponse.CatalogData">
            <summary>
            Gets and sets the property CatalogData.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.CreateRepositoryResponse.Repository">
            <summary>
            Gets and sets the property Repository. 
            <para>
            The repository that was created.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.DeleteRepositoryPolicyRequest">
            <summary>
            Container for the parameters to the DeleteRepositoryPolicy operation.
            Deletes the repository policy associated with the specified repository.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DeleteRepositoryPolicyRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the public registry that contains the repository
            policy to delete. If you do not specify a registry, the default public registry is
            assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DeleteRepositoryPolicyRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository that is associated with the repository policy to delete.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.DeleteRepositoryPolicyResponse">
            <summary>
            This is the response object from the DeleteRepositoryPolicy operation.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DeleteRepositoryPolicyResponse.PolicyText">
            <summary>
            Gets and sets the property PolicyText. 
            <para>
            The JSON repository policy that was deleted from the repository.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DeleteRepositoryPolicyResponse.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The registry ID associated with the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DeleteRepositoryPolicyResponse.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The repository name associated with the request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.DeleteRepositoryRequest">
            <summary>
            Container for the parameters to the DeleteRepository operation.
            Deletes a repository in a public registry. If the repository contains images, you
            must either delete all images in the repository or use the <code>force</code> option
            which deletes all images on your behalf before deleting the repository.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DeleteRepositoryRequest.Force">
            <summary>
            Gets and sets the property Force. 
            <para>
             If a repository contains images, forces the deletion.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DeleteRepositoryRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the public registry that contains the repository
            to delete. If you do not specify a registry, the default public registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DeleteRepositoryRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository to delete.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.DeleteRepositoryResponse">
            <summary>
            This is the response object from the DeleteRepository operation.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DeleteRepositoryResponse.Repository">
            <summary>
            Gets and sets the property Repository. 
            <para>
            The repository that was deleted.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.DescribeImagesRequest">
            <summary>
            Container for the parameters to the DescribeImages operation.
            Returns metadata about the images in a repository in a public registry.
            
             <note> 
            <para>
            Beginning with Docker version 1.9, the Docker client compresses image layers before
            pushing them to a V2 Docker registry. The output of the <code>docker images</code>
            command shows the uncompressed image size, so it may return a larger image size than
            the image sizes returned by <a>DescribeImages</a>.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DescribeImagesRequest.ImageIds">
            <summary>
            Gets and sets the property ImageIds. 
            <para>
            The list of image IDs for the requested repository.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DescribeImagesRequest.MaxResults">
            <summary>
            Gets and sets the property MaxResults. 
            <para>
            The maximum number of repository results returned by <code>DescribeImages</code> in
            paginated output. When this parameter is used, <code>DescribeImages</code> only returns
            <code>maxResults</code> results in a single page along with a <code>nextToken</code>
            response element. The remaining results of the initial request can be seen by sending
            another <code>DescribeImages</code> request with the returned <code>nextToken</code>
            value. This value can be between 1 and 1000. If this parameter is not used, then <code>DescribeImages</code>
            returns up to 100 results and a <code>nextToken</code> value, if applicable. This
            option cannot be used when you specify images with <code>imageIds</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DescribeImagesRequest.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            The <code>nextToken</code> value returned from a previous paginated <code>DescribeImages</code>
            request where <code>maxResults</code> was used and the results exceeded the value
            of that parameter. Pagination continues from the end of the previous results that
            returned the <code>nextToken</code> value. This value is <code>null</code> when there
            are no more results to return. This option cannot be used when you specify images
            with <code>imageIds</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DescribeImagesRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the public registry that contains the repository
            in which to describe images. If you do not specify a registry, the default public
            registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DescribeImagesRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The repository that contains the images to describe.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.DescribeImagesResponse">
            <summary>
            This is the response object from the DescribeImages operation.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DescribeImagesResponse.ImageDetails">
            <summary>
            Gets and sets the property ImageDetails. 
            <para>
            A list of <a>ImageDetail</a> objects that contain data about the image.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DescribeImagesResponse.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            The <code>nextToken</code> value to include in a future <code>DescribeImages</code>
            request. When the results of a <code>DescribeImages</code> request exceed <code>maxResults</code>,
            this value can be used to retrieve the next page of results. This value is <code>null</code>
            when there are no more results to return.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.DescribeImageTagsRequest">
            <summary>
            Container for the parameters to the DescribeImageTags operation.
            Returns the image tag details for a repository in a public registry.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DescribeImageTagsRequest.MaxResults">
            <summary>
            Gets and sets the property MaxResults. 
            <para>
            The maximum number of repository results returned by <code>DescribeImageTags</code>
            in paginated output. When this parameter is used, <code>DescribeImageTags</code> only
            returns <code>maxResults</code> results in a single page along with a <code>nextToken</code>
            response element. The remaining results of the initial request can be seen by sending
            another <code>DescribeImageTags</code> request with the returned <code>nextToken</code>
            value. This value can be between 1 and 1000. If this parameter is not used, then <code>DescribeImageTags</code>
            returns up to 100 results and a <code>nextToken</code> value, if applicable. This
            option cannot be used when you specify images with <code>imageIds</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DescribeImageTagsRequest.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            The <code>nextToken</code> value returned from a previous paginated <code>DescribeImageTags</code>
            request where <code>maxResults</code> was used and the results exceeded the value
            of that parameter. Pagination continues from the end of the previous results that
            returned the <code>nextToken</code> value. This value is <code>null</code> when there
            are no more results to return. This option cannot be used when you specify images
            with <code>imageIds</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DescribeImageTagsRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the public registry that contains the repository
            in which to describe images. If you do not specify a registry, the default public
            registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DescribeImageTagsRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository that contains the image tag details to describe.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.DescribeImageTagsResponse">
            <summary>
            This is the response object from the DescribeImageTags operation.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DescribeImageTagsResponse.ImageTagDetails">
            <summary>
            Gets and sets the property ImageTagDetails. 
            <para>
            The image tag details for the images in the requested repository.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DescribeImageTagsResponse.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            The <code>nextToken</code> value to include in a future <code>DescribeImageTags</code>
            request. When the results of a <code>DescribeImageTags</code> request exceed <code>maxResults</code>,
            this value can be used to retrieve the next page of results. This value is <code>null</code>
            when there are no more results to return.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.DescribeRegistriesRequest">
            <summary>
            Container for the parameters to the DescribeRegistries operation.
            Returns details for a public registry.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DescribeRegistriesRequest.MaxResults">
            <summary>
            Gets and sets the property MaxResults. 
            <para>
            The maximum number of repository results returned by <code>DescribeRegistries</code>
            in paginated output. When this parameter is used, <code>DescribeRegistries</code>
            only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code>
            response element. The remaining results of the initial request can be seen by sending
            another <code>DescribeRegistries</code> request with the returned <code>nextToken</code>
            value. This value can be between 1 and 1000. If this parameter is not used, then <code>DescribeRegistries</code>
            returns up to 100 results and a <code>nextToken</code> value, if applicable.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DescribeRegistriesRequest.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            The <code>nextToken</code> value returned from a previous paginated <code>DescribeRegistries</code>
            request where <code>maxResults</code> was used and the results exceeded the value
            of that parameter. Pagination continues from the end of the previous results that
            returned the <code>nextToken</code> value. This value is <code>null</code> when there
            are no more results to return.
            </para>
             <note> 
            <para>
            This token should be treated as an opaque identifier that is only used to retrieve
            the next items in a list and not for other programmatic purposes.
            </para>
             </note>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.DescribeRegistriesResponse">
            <summary>
            This is the response object from the DescribeRegistries operation.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DescribeRegistriesResponse.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            The <code>nextToken</code> value to include in a future <code>DescribeRepositories</code>
            request. When the results of a <code>DescribeRepositories</code> request exceed <code>maxResults</code>,
            this value can be used to retrieve the next page of results. This value is <code>null</code>
            when there are no more results to return.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DescribeRegistriesResponse.Registries">
            <summary>
            Gets and sets the property Registries. 
            <para>
            An object containing the details for a public registry.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.DescribeRepositoriesRequest">
            <summary>
            Container for the parameters to the DescribeRepositories operation.
            Describes repositories in a public registry.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DescribeRepositoriesRequest.MaxResults">
            <summary>
            Gets and sets the property MaxResults. 
            <para>
            The maximum number of repository results returned by <code>DescribeRepositories</code>
            in paginated output. When this parameter is used, <code>DescribeRepositories</code>
            only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code>
            response element. The remaining results of the initial request can be seen by sending
            another <code>DescribeRepositories</code> request with the returned <code>nextToken</code>
            value. This value can be between 1 and 1000. If this parameter is not used, then <code>DescribeRepositories</code>
            returns up to 100 results and a <code>nextToken</code> value, if applicable. This
            option cannot be used when you specify repositories with <code>repositoryNames</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DescribeRepositoriesRequest.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            The <code>nextToken</code> value returned from a previous paginated <code>DescribeRepositories</code>
            request where <code>maxResults</code> was used and the results exceeded the value
            of that parameter. Pagination continues from the end of the previous results that
            returned the <code>nextToken</code> value. This value is <code>null</code> when there
            are no more results to return. This option cannot be used when you specify repositories
            with <code>repositoryNames</code>.
            </para>
             <note> 
            <para>
            This token should be treated as an opaque identifier that is only used to retrieve
            the next items in a list and not for other programmatic purposes.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DescribeRepositoriesRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the repositories to
            be described. If you do not specify a registry, the default public registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DescribeRepositoriesRequest.RepositoryNames">
            <summary>
            Gets and sets the property RepositoryNames. 
            <para>
            A list of repositories to describe. If this parameter is omitted, then all repositories
            in a registry are described.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.DescribeRepositoriesResponse">
            <summary>
            This is the response object from the DescribeRepositories operation.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DescribeRepositoriesResponse.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            The <code>nextToken</code> value to include in a future <code>DescribeRepositories</code>
            request. When the results of a <code>DescribeRepositories</code> request exceed <code>maxResults</code>,
            this value can be used to retrieve the next page of results. This value is <code>null</code>
            when there are no more results to return.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DescribeRepositoriesResponse.Repositories">
            <summary>
            Gets and sets the property Repositories. 
            <para>
            A list of repository objects corresponding to valid repositories.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.EmptyUploadException">
            <summary>
            The specified layer upload does not contain any layer parts.
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.Model.EmptyUploadException.#ctor(System.String)">
            <summary>
            Constructs a new EmptyUploadException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.EmptyUploadException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of EmptyUploadException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.EmptyUploadException.#ctor(System.Exception)">
            <summary>
            Construct instance of EmptyUploadException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.EmptyUploadException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of EmptyUploadException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.EmptyUploadException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of EmptyUploadException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.EmptyUploadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the EmptyUploadException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.ECRPublic.Model.EmptyUploadException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.ECRPublic.Model.GetAuthorizationTokenRequest">
            <summary>
            Container for the parameters to the GetAuthorizationToken operation.
            Retrieves an authorization token. An authorization token represents your IAM authentication
            credentials and can be used to access any Amazon ECR registry that your IAM principal
            has access to. The authorization token is valid for 12 hours. This API requires the
            <code>ecr-public:GetAuthorizationToken</code> and <code>sts:GetServiceBearerToken</code>
            permissions.
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.GetAuthorizationTokenResponse">
            <summary>
            This is the response object from the GetAuthorizationToken operation.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.GetAuthorizationTokenResponse.AuthorizationData">
            <summary>
            Gets and sets the property AuthorizationData. 
            <para>
            An authorization token data object that corresponds to a public registry.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.GetRegistryCatalogDataRequest">
            <summary>
            Container for the parameters to the GetRegistryCatalogData operation.
            Retrieves catalog metadata for a public registry.
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.GetRegistryCatalogDataResponse">
            <summary>
            This is the response object from the GetRegistryCatalogData operation.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.GetRegistryCatalogDataResponse.RegistryCatalogData">
            <summary>
            Gets and sets the property RegistryCatalogData. 
            <para>
            The catalog metadata for the public registry.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.GetRepositoryCatalogDataRequest">
            <summary>
            Container for the parameters to the GetRepositoryCatalogData operation.
            Retrieve catalog metadata for a repository in a public registry. This metadata is
            displayed publicly in the Amazon ECR Public Gallery.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.GetRepositoryCatalogDataRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the repositories to
            be described. If you do not specify a registry, the default public registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.GetRepositoryCatalogDataRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository to retrieve the catalog metadata for.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.GetRepositoryCatalogDataResponse">
            <summary>
            This is the response object from the GetRepositoryCatalogData operation.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.GetRepositoryCatalogDataResponse.CatalogData">
            <summary>
            Gets and sets the property CatalogData. 
            <para>
            The catalog metadata for the repository.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.GetRepositoryPolicyRequest">
            <summary>
            Container for the parameters to the GetRepositoryPolicy operation.
            Retrieves the repository policy for the specified repository.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.GetRepositoryPolicyRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the public registry that contains the repository.
            If you do not specify a registry, the default public registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.GetRepositoryPolicyRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository with the policy to retrieve.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.GetRepositoryPolicyResponse">
            <summary>
            This is the response object from the GetRepositoryPolicy operation.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.GetRepositoryPolicyResponse.PolicyText">
            <summary>
            Gets and sets the property PolicyText. 
            <para>
            The repository policy text associated with the repository. The policy text will be
            in JSON format.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.GetRepositoryPolicyResponse.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The registry ID associated with the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.GetRepositoryPolicyResponse.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The repository name associated with the request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.Image">
            <summary>
            An object representing an Amazon ECR image.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Image.ImageId">
            <summary>
            Gets and sets the property ImageId. 
            <para>
            An object containing the image tag and image digest associated with an image.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Image.ImageManifest">
            <summary>
            Gets and sets the property ImageManifest. 
            <para>
            The image manifest associated with the image.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Image.ImageManifestMediaType">
            <summary>
            Gets and sets the property ImageManifestMediaType. 
            <para>
            The manifest media type of the image.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Image.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry containing the image.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Image.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository associated with the image.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.ImageAlreadyExistsException">
            <summary>
            The specified image has already been pushed, and there were no changes to the manifest
            or image tag after the last push.
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ImageAlreadyExistsException.#ctor(System.String)">
            <summary>
            Constructs a new ImageAlreadyExistsException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ImageAlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ImageAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ImageAlreadyExistsException.#ctor(System.Exception)">
            <summary>
            Construct instance of ImageAlreadyExistsException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ImageAlreadyExistsException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ImageAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ImageAlreadyExistsException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ImageAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ImageAlreadyExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the ImageAlreadyExistsException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ImageAlreadyExistsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.ECRPublic.Model.ImageDetail">
            <summary>
            An object that describes an image returned by a <a>DescribeImages</a> operation.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.ImageDetail.ArtifactMediaType">
            <summary>
            Gets and sets the property ArtifactMediaType. 
            <para>
            The artifact media type of the image.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.ImageDetail.ImageDigest">
            <summary>
            Gets and sets the property ImageDigest. 
            <para>
            The <code>sha256</code> digest of the image manifest.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.ImageDetail.ImageManifestMediaType">
            <summary>
            Gets and sets the property ImageManifestMediaType. 
            <para>
            The media type of the image manifest.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.ImageDetail.ImagePushedAt">
            <summary>
            Gets and sets the property ImagePushedAt. 
            <para>
            The date and time, expressed in standard JavaScript date format, at which the current
            image was pushed to the repository. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.ImageDetail.ImageSizeInBytes">
            <summary>
            Gets and sets the property ImageSizeInBytes. 
            <para>
            The size, in bytes, of the image in the repository.
            </para>
             
            <para>
            If the image is a manifest list, this will be the max size of all manifests in the
            list.
            </para>
             <note> 
            <para>
            Beginning with Docker version 1.9, the Docker client compresses image layers before
            pushing them to a V2 Docker registry. The output of the <code>docker images</code>
            command shows the uncompressed image size, so it may return a larger image size than
            the image sizes returned by <a>DescribeImages</a>.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.ImageDetail.ImageTags">
            <summary>
            Gets and sets the property ImageTags. 
            <para>
            The list of tags associated with this image.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.ImageDetail.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the public registry to which this image belongs.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.ImageDetail.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository to which this image belongs.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.ImageDigestDoesNotMatchException">
            <summary>
            The specified image digest does not match the digest that Amazon ECR calculated for
            the image.
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ImageDigestDoesNotMatchException.#ctor(System.String)">
            <summary>
            Constructs a new ImageDigestDoesNotMatchException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ImageDigestDoesNotMatchException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ImageDigestDoesNotMatchException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ImageDigestDoesNotMatchException.#ctor(System.Exception)">
            <summary>
            Construct instance of ImageDigestDoesNotMatchException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ImageDigestDoesNotMatchException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ImageDigestDoesNotMatchException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ImageDigestDoesNotMatchException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ImageDigestDoesNotMatchException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ImageDigestDoesNotMatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the ImageDigestDoesNotMatchException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ImageDigestDoesNotMatchException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.ECRPublic.Model.ImageFailure">
            <summary>
            An object representing an Amazon ECR image failure.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.ImageFailure.FailureCode">
            <summary>
            Gets and sets the property FailureCode. 
            <para>
            The code associated with the failure.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.ImageFailure.FailureReason">
            <summary>
            Gets and sets the property FailureReason. 
            <para>
            The reason for the failure.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.ImageFailure.ImageId">
            <summary>
            Gets and sets the property ImageId. 
            <para>
            The image ID associated with the failure.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.ImageIdentifier">
            <summary>
            An object with identifying information for an Amazon ECR image.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.ImageIdentifier.ImageDigest">
            <summary>
            Gets and sets the property ImageDigest. 
            <para>
            The <code>sha256</code> digest of the image manifest.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.ImageIdentifier.ImageTag">
            <summary>
            Gets and sets the property ImageTag. 
            <para>
            The tag used for the image.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.ImageNotFoundException">
            <summary>
            The image requested does not exist in the specified repository.
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ImageNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new ImageNotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ImageNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ImageNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ImageNotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of ImageNotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ImageNotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ImageNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ImageNotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ImageNotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ImageNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the ImageNotFoundException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ImageNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.ECRPublic.Model.ImageTagAlreadyExistsException">
            <summary>
            The specified image is tagged with a tag that already exists. The repository is configured
            for tag immutability.
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ImageTagAlreadyExistsException.#ctor(System.String)">
            <summary>
            Constructs a new ImageTagAlreadyExistsException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ImageTagAlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ImageTagAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ImageTagAlreadyExistsException.#ctor(System.Exception)">
            <summary>
            Construct instance of ImageTagAlreadyExistsException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ImageTagAlreadyExistsException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ImageTagAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ImageTagAlreadyExistsException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ImageTagAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ImageTagAlreadyExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the ImageTagAlreadyExistsException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ImageTagAlreadyExistsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.ECRPublic.Model.ImageTagDetail">
            <summary>
            An object representing the image tag details for an image.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.ImageTagDetail.CreatedAt">
            <summary>
            Gets and sets the property CreatedAt. 
            <para>
            The time stamp indicating when the image tag was created.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.ImageTagDetail.ImageDetail">
            <summary>
            Gets and sets the property ImageDetail. 
            <para>
            An object that describes the details of an image.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.ImageTagDetail.ImageTag">
            <summary>
            Gets and sets the property ImageTag. 
            <para>
            The tag associated with the image.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.InitiateLayerUploadRequest">
            <summary>
            Container for the parameters to the InitiateLayerUpload operation.
            Notifies Amazon ECR that you intend to upload an image layer.
            
             
            <para>
            When an image is pushed, the InitiateLayerUpload API is called once per image layer
            that has not already been uploaded. Whether or not an image layer has been uploaded
            is determined by the BatchCheckLayerAvailability API action.
            </para>
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy and is not generally used by customers
            for pulling and pushing images. In most cases, you should use the <code>docker</code>
            CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.InitiateLayerUploadRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry to which you intend to upload layers.
            If you do not specify a registry, the default public registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.InitiateLayerUploadRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository to which you intend to upload layers.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.InitiateLayerUploadResponse">
            <summary>
            This is the response object from the InitiateLayerUpload operation.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.InitiateLayerUploadResponse.PartSize">
            <summary>
            Gets and sets the property PartSize. 
            <para>
            The size, in bytes, that Amazon ECR expects future layer part uploads to be.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.InitiateLayerUploadResponse.UploadId">
            <summary>
            Gets and sets the property UploadId. 
            <para>
            The upload ID for the layer upload. This parameter is passed to further <a>UploadLayerPart</a>
            and <a>CompleteLayerUpload</a> operations.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.AuthorizationDataUnmarshaller">
            <summary>
            Response Unmarshaller for AuthorizationData Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.AuthorizationDataUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECRPublic#Model#AuthorizationData,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.AuthorizationDataUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.AuthorizationDataUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.BatchCheckLayerAvailabilityRequestMarshaller">
            <summary>
            BatchCheckLayerAvailability Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.BatchCheckLayerAvailabilityRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.BatchCheckLayerAvailabilityRequestMarshaller.Marshall(Amazon.ECRPublic.Model.BatchCheckLayerAvailabilityRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.BatchCheckLayerAvailabilityRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.BatchCheckLayerAvailabilityResponseUnmarshaller">
            <summary>
            Response Unmarshaller for BatchCheckLayerAvailability operation
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.BatchCheckLayerAvailabilityResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.BatchCheckLayerAvailabilityResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.BatchCheckLayerAvailabilityResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.BatchDeleteImageRequestMarshaller">
            <summary>
            BatchDeleteImage Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.BatchDeleteImageRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.BatchDeleteImageRequestMarshaller.Marshall(Amazon.ECRPublic.Model.BatchDeleteImageRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.BatchDeleteImageRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.BatchDeleteImageResponseUnmarshaller">
            <summary>
            Response Unmarshaller for BatchDeleteImage operation
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.BatchDeleteImageResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.BatchDeleteImageResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.BatchDeleteImageResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.CompleteLayerUploadRequestMarshaller">
            <summary>
            CompleteLayerUpload Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.CompleteLayerUploadRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.CompleteLayerUploadRequestMarshaller.Marshall(Amazon.ECRPublic.Model.CompleteLayerUploadRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.CompleteLayerUploadRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.CompleteLayerUploadResponseUnmarshaller">
            <summary>
            Response Unmarshaller for CompleteLayerUpload operation
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.CompleteLayerUploadResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.CompleteLayerUploadResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.CompleteLayerUploadResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.CreateRepositoryRequestMarshaller">
            <summary>
            CreateRepository Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.CreateRepositoryRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.CreateRepositoryRequestMarshaller.Marshall(Amazon.ECRPublic.Model.CreateRepositoryRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.CreateRepositoryRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.CreateRepositoryResponseUnmarshaller">
            <summary>
            Response Unmarshaller for CreateRepository operation
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.CreateRepositoryResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.CreateRepositoryResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.CreateRepositoryResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DeleteRepositoryPolicyRequestMarshaller">
            <summary>
            DeleteRepositoryPolicy Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DeleteRepositoryPolicyRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DeleteRepositoryPolicyRequestMarshaller.Marshall(Amazon.ECRPublic.Model.DeleteRepositoryPolicyRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DeleteRepositoryPolicyRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DeleteRepositoryPolicyResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DeleteRepositoryPolicy operation
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DeleteRepositoryPolicyResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DeleteRepositoryPolicyResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DeleteRepositoryPolicyResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DeleteRepositoryRequestMarshaller">
            <summary>
            DeleteRepository Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DeleteRepositoryRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DeleteRepositoryRequestMarshaller.Marshall(Amazon.ECRPublic.Model.DeleteRepositoryRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DeleteRepositoryRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DeleteRepositoryResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DeleteRepository operation
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DeleteRepositoryResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DeleteRepositoryResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DeleteRepositoryResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DescribeImagesRequestMarshaller">
            <summary>
            DescribeImages Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DescribeImagesRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DescribeImagesRequestMarshaller.Marshall(Amazon.ECRPublic.Model.DescribeImagesRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DescribeImagesRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DescribeImagesResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DescribeImages operation
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DescribeImagesResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DescribeImagesResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DescribeImagesResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DescribeImageTagsRequestMarshaller">
            <summary>
            DescribeImageTags Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DescribeImageTagsRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DescribeImageTagsRequestMarshaller.Marshall(Amazon.ECRPublic.Model.DescribeImageTagsRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DescribeImageTagsRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DescribeImageTagsResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DescribeImageTags operation
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DescribeImageTagsResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DescribeImageTagsResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DescribeImageTagsResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DescribeRegistriesRequestMarshaller">
            <summary>
            DescribeRegistries Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DescribeRegistriesRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DescribeRegistriesRequestMarshaller.Marshall(Amazon.ECRPublic.Model.DescribeRegistriesRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DescribeRegistriesRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DescribeRegistriesResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DescribeRegistries operation
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DescribeRegistriesResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DescribeRegistriesResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DescribeRegistriesResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DescribeRepositoriesRequestMarshaller">
            <summary>
            DescribeRepositories Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DescribeRepositoriesRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DescribeRepositoriesRequestMarshaller.Marshall(Amazon.ECRPublic.Model.DescribeRepositoriesRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DescribeRepositoriesRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DescribeRepositoriesResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DescribeRepositories operation
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DescribeRepositoriesResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DescribeRepositoriesResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.DescribeRepositoriesResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.EmptyUploadExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for EmptyUploadException Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.EmptyUploadExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.EmptyUploadExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.EmptyUploadExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.GetAuthorizationTokenRequestMarshaller">
            <summary>
            GetAuthorizationToken Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.GetAuthorizationTokenRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.GetAuthorizationTokenRequestMarshaller.Marshall(Amazon.ECRPublic.Model.GetAuthorizationTokenRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.GetAuthorizationTokenRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.GetAuthorizationTokenResponseUnmarshaller">
            <summary>
            Response Unmarshaller for GetAuthorizationToken operation
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.GetAuthorizationTokenResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.GetAuthorizationTokenResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.GetAuthorizationTokenResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.GetRegistryCatalogDataRequestMarshaller">
            <summary>
            GetRegistryCatalogData Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.GetRegistryCatalogDataRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.GetRegistryCatalogDataRequestMarshaller.Marshall(Amazon.ECRPublic.Model.GetRegistryCatalogDataRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.GetRegistryCatalogDataRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.GetRegistryCatalogDataResponseUnmarshaller">
            <summary>
            Response Unmarshaller for GetRegistryCatalogData operation
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.GetRegistryCatalogDataResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.GetRegistryCatalogDataResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.GetRegistryCatalogDataResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.GetRepositoryCatalogDataRequestMarshaller">
            <summary>
            GetRepositoryCatalogData Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.GetRepositoryCatalogDataRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.GetRepositoryCatalogDataRequestMarshaller.Marshall(Amazon.ECRPublic.Model.GetRepositoryCatalogDataRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.GetRepositoryCatalogDataRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.GetRepositoryCatalogDataResponseUnmarshaller">
            <summary>
            Response Unmarshaller for GetRepositoryCatalogData operation
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.GetRepositoryCatalogDataResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.GetRepositoryCatalogDataResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.GetRepositoryCatalogDataResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.GetRepositoryPolicyRequestMarshaller">
            <summary>
            GetRepositoryPolicy Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.GetRepositoryPolicyRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.GetRepositoryPolicyRequestMarshaller.Marshall(Amazon.ECRPublic.Model.GetRepositoryPolicyRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.GetRepositoryPolicyRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.GetRepositoryPolicyResponseUnmarshaller">
            <summary>
            Response Unmarshaller for GetRepositoryPolicy operation
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.GetRepositoryPolicyResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.GetRepositoryPolicyResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.GetRepositoryPolicyResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageAlreadyExistsExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for ImageAlreadyExistsException Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageAlreadyExistsExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageAlreadyExistsExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageAlreadyExistsExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageDetailUnmarshaller">
            <summary>
            Response Unmarshaller for ImageDetail Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageDetailUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECRPublic#Model#ImageDetail,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageDetailUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageDetailUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageDigestDoesNotMatchExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for ImageDigestDoesNotMatchException Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageDigestDoesNotMatchExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageDigestDoesNotMatchExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageDigestDoesNotMatchExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageFailureUnmarshaller">
            <summary>
            Response Unmarshaller for ImageFailure Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageFailureUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECRPublic#Model#ImageFailure,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageFailureUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageFailureUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageIdentifierMarshaller">
            <summary>
            ImageIdentifier Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageIdentifierMarshaller.Marshall(Amazon.ECRPublic.Model.ImageIdentifier,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageIdentifierMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageIdentifierUnmarshaller">
            <summary>
            Response Unmarshaller for ImageIdentifier Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageIdentifierUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECRPublic#Model#ImageIdentifier,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageIdentifierUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageIdentifierUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageNotFoundExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for ImageNotFoundException Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageNotFoundExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageNotFoundExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageNotFoundExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageTagAlreadyExistsExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for ImageTagAlreadyExistsException Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageTagAlreadyExistsExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageTagAlreadyExistsExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageTagAlreadyExistsExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageTagDetailUnmarshaller">
            <summary>
            Response Unmarshaller for ImageTagDetail Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageTagDetailUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECRPublic#Model#ImageTagDetail,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageTagDetailUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageTagDetailUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageUnmarshaller">
            <summary>
            Response Unmarshaller for Image Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECRPublic#Model#Image,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ImageUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.InitiateLayerUploadRequestMarshaller">
            <summary>
            InitiateLayerUpload Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.InitiateLayerUploadRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.InitiateLayerUploadRequestMarshaller.Marshall(Amazon.ECRPublic.Model.InitiateLayerUploadRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.InitiateLayerUploadRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.InitiateLayerUploadResponseUnmarshaller">
            <summary>
            Response Unmarshaller for InitiateLayerUpload operation
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.InitiateLayerUploadResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.InitiateLayerUploadResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.InitiateLayerUploadResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.InvalidLayerExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for InvalidLayerException Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.InvalidLayerExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.InvalidLayerExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.InvalidLayerExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.InvalidLayerPartExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for InvalidLayerPartException Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.InvalidLayerPartExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.InvalidLayerPartExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.InvalidLayerPartExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.InvalidParameterExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for InvalidParameterException Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.InvalidParameterExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.InvalidParameterExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.InvalidParameterExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.InvalidTagParameterExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for InvalidTagParameterException Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.InvalidTagParameterExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.InvalidTagParameterExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.InvalidTagParameterExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.LayerAlreadyExistsExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for LayerAlreadyExistsException Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.LayerAlreadyExistsExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.LayerAlreadyExistsExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.LayerAlreadyExistsExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.LayerFailureUnmarshaller">
            <summary>
            Response Unmarshaller for LayerFailure Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.LayerFailureUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECRPublic#Model#LayerFailure,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.LayerFailureUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.LayerFailureUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.LayerPartTooSmallExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for LayerPartTooSmallException Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.LayerPartTooSmallExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.LayerPartTooSmallExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.LayerPartTooSmallExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.LayersNotFoundExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for LayersNotFoundException Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.LayersNotFoundExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.LayersNotFoundExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.LayersNotFoundExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.LayerUnmarshaller">
            <summary>
            Response Unmarshaller for Layer Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.LayerUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECRPublic#Model#Layer,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.LayerUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.LayerUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.LimitExceededExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for LimitExceededException Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.LimitExceededExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.LimitExceededExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.LimitExceededExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ListTagsForResourceRequestMarshaller">
            <summary>
            ListTagsForResource Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ListTagsForResourceRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ListTagsForResourceRequestMarshaller.Marshall(Amazon.ECRPublic.Model.ListTagsForResourceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ListTagsForResourceRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ListTagsForResourceResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ListTagsForResource operation
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ListTagsForResourceResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ListTagsForResourceResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ListTagsForResourceResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.PutImageRequestMarshaller">
            <summary>
            PutImage Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.PutImageRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.PutImageRequestMarshaller.Marshall(Amazon.ECRPublic.Model.PutImageRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.PutImageRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.PutImageResponseUnmarshaller">
            <summary>
            Response Unmarshaller for PutImage operation
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.PutImageResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.PutImageResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.PutImageResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.PutRegistryCatalogDataRequestMarshaller">
            <summary>
            PutRegistryCatalogData Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.PutRegistryCatalogDataRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.PutRegistryCatalogDataRequestMarshaller.Marshall(Amazon.ECRPublic.Model.PutRegistryCatalogDataRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.PutRegistryCatalogDataRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.PutRegistryCatalogDataResponseUnmarshaller">
            <summary>
            Response Unmarshaller for PutRegistryCatalogData operation
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.PutRegistryCatalogDataResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.PutRegistryCatalogDataResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.PutRegistryCatalogDataResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.PutRepositoryCatalogDataRequestMarshaller">
            <summary>
            PutRepositoryCatalogData Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.PutRepositoryCatalogDataRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.PutRepositoryCatalogDataRequestMarshaller.Marshall(Amazon.ECRPublic.Model.PutRepositoryCatalogDataRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.PutRepositoryCatalogDataRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.PutRepositoryCatalogDataResponseUnmarshaller">
            <summary>
            Response Unmarshaller for PutRepositoryCatalogData operation
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.PutRepositoryCatalogDataResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.PutRepositoryCatalogDataResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.PutRepositoryCatalogDataResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ReferencedImageDetailUnmarshaller">
            <summary>
            Response Unmarshaller for ReferencedImageDetail Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ReferencedImageDetailUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECRPublic#Model#ReferencedImageDetail,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ReferencedImageDetailUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ReferencedImageDetailUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ReferencedImagesNotFoundExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for ReferencedImagesNotFoundException Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ReferencedImagesNotFoundExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ReferencedImagesNotFoundExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ReferencedImagesNotFoundExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RegistryAliasUnmarshaller">
            <summary>
            Response Unmarshaller for RegistryAlias Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RegistryAliasUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECRPublic#Model#RegistryAlias,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RegistryAliasUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RegistryAliasUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RegistryCatalogDataUnmarshaller">
            <summary>
            Response Unmarshaller for RegistryCatalogData Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RegistryCatalogDataUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECRPublic#Model#RegistryCatalogData,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RegistryCatalogDataUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RegistryCatalogDataUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RegistryNotFoundExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for RegistryNotFoundException Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RegistryNotFoundExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RegistryNotFoundExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RegistryNotFoundExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RegistryUnmarshaller">
            <summary>
            Response Unmarshaller for Registry Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RegistryUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECRPublic#Model#Registry,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RegistryUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RegistryUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RepositoryAlreadyExistsExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for RepositoryAlreadyExistsException Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RepositoryAlreadyExistsExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RepositoryAlreadyExistsExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RepositoryAlreadyExistsExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RepositoryCatalogDataInputMarshaller">
            <summary>
            RepositoryCatalogDataInput Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RepositoryCatalogDataInputMarshaller.Marshall(Amazon.ECRPublic.Model.RepositoryCatalogDataInput,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RepositoryCatalogDataInputMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RepositoryCatalogDataUnmarshaller">
            <summary>
            Response Unmarshaller for RepositoryCatalogData Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RepositoryCatalogDataUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECRPublic#Model#RepositoryCatalogData,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RepositoryCatalogDataUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RepositoryCatalogDataUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RepositoryNotEmptyExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for RepositoryNotEmptyException Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RepositoryNotEmptyExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RepositoryNotEmptyExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RepositoryNotEmptyExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RepositoryNotFoundExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for RepositoryNotFoundException Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RepositoryNotFoundExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RepositoryNotFoundExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RepositoryNotFoundExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RepositoryPolicyNotFoundExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for RepositoryPolicyNotFoundException Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RepositoryPolicyNotFoundExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RepositoryPolicyNotFoundExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RepositoryPolicyNotFoundExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RepositoryUnmarshaller">
            <summary>
            Response Unmarshaller for Repository Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RepositoryUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECRPublic#Model#Repository,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RepositoryUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.RepositoryUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ServerExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for ServerException Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ServerExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ServerExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.ServerExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.SetRepositoryPolicyRequestMarshaller">
            <summary>
            SetRepositoryPolicy Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.SetRepositoryPolicyRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.SetRepositoryPolicyRequestMarshaller.Marshall(Amazon.ECRPublic.Model.SetRepositoryPolicyRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.SetRepositoryPolicyRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.SetRepositoryPolicyResponseUnmarshaller">
            <summary>
            Response Unmarshaller for SetRepositoryPolicy operation
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.SetRepositoryPolicyResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.SetRepositoryPolicyResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.SetRepositoryPolicyResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.TagMarshaller">
            <summary>
            Tag Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.TagMarshaller.Marshall(Amazon.ECRPublic.Model.Tag,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.ECRPublic.Model.Internal.MarshallTransformations.TagMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.TagResourceRequestMarshaller">
            <summary>
            TagResource Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.TagResourceRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.TagResourceRequestMarshaller.Marshall(Amazon.ECRPublic.Model.TagResourceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.TagResourceRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.TagResourceResponseUnmarshaller">
            <summary>
            Response Unmarshaller for TagResource operation
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.TagResourceResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.TagResourceResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.TagResourceResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.TagUnmarshaller">
            <summary>
            Response Unmarshaller for Tag Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.TagUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECRPublic#Model#Tag,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.TagUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.TagUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.TooManyTagsExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for TooManyTagsException Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.TooManyTagsExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.TooManyTagsExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.TooManyTagsExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.UnsupportedCommandExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for UnsupportedCommandException Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.UnsupportedCommandExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.UnsupportedCommandExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.UnsupportedCommandExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.UntagResourceRequestMarshaller">
            <summary>
            UntagResource Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.UntagResourceRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.UntagResourceRequestMarshaller.Marshall(Amazon.ECRPublic.Model.UntagResourceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.UntagResourceRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.UntagResourceResponseUnmarshaller">
            <summary>
            Response Unmarshaller for UntagResource operation
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.UntagResourceResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.UntagResourceResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.UntagResourceResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.UploadLayerPartRequestMarshaller">
            <summary>
            UploadLayerPart Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.UploadLayerPartRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.UploadLayerPartRequestMarshaller.Marshall(Amazon.ECRPublic.Model.UploadLayerPartRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.UploadLayerPartRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.UploadLayerPartResponseUnmarshaller">
            <summary>
            Response Unmarshaller for UploadLayerPart operation
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.UploadLayerPartResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.UploadLayerPartResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.UploadLayerPartResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.Internal.MarshallTransformations.UploadNotFoundExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for UploadNotFoundException Object
            </summary>  
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.UploadNotFoundExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECRPublic.Model.Internal.MarshallTransformations.UploadNotFoundExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Internal.MarshallTransformations.UploadNotFoundExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECRPublic.Model.InvalidLayerException">
            <summary>
            The layer digest calculation performed by Amazon ECR upon receipt of the image layer
            does not match the digest specified.
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.Model.InvalidLayerException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidLayerException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.InvalidLayerException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidLayerException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.InvalidLayerException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidLayerException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.InvalidLayerException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidLayerException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.InvalidLayerException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidLayerException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.InvalidLayerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the InvalidLayerException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.ECRPublic.Model.InvalidLayerException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.ECRPublic.Model.InvalidLayerPartException">
            <summary>
            The layer part size is not valid, or the first byte specified is not consecutive to
            the last byte of a previous layer part upload.
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.Model.InvalidLayerPartException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidLayerPartException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.InvalidLayerPartException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidLayerPartException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.InvalidLayerPartException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidLayerPartException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.InvalidLayerPartException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidLayerPartException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.InvalidLayerPartException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidLayerPartException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.InvalidLayerPartException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the InvalidLayerPartException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.ECRPublic.Model.InvalidLayerPartException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="P:Amazon.ECRPublic.Model.InvalidLayerPartException.LastValidByteReceived">
            <summary>
            Gets and sets the property LastValidByteReceived. 
            <para>
            The position of the last byte of the layer part.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.InvalidLayerPartException.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the layer part.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.InvalidLayerPartException.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.InvalidLayerPartException.UploadId">
            <summary>
            Gets and sets the property UploadId. 
            <para>
            The upload ID associated with the layer part.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.InvalidParameterException">
            <summary>
            The specified parameter is invalid. Review the available parameters for the API request.
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.Model.InvalidParameterException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidParameterException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.InvalidParameterException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidParameterException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.InvalidParameterException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidParameterException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.InvalidParameterException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidParameterException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.InvalidParameterException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidParameterException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.InvalidParameterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the InvalidParameterException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.ECRPublic.Model.InvalidParameterException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.ECRPublic.Model.InvalidTagParameterException">
            <summary>
            An invalid parameter has been specified. Tag keys can have a maximum character length
            of 128 characters, and tag values can have a maximum length of 256 characters.
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.Model.InvalidTagParameterException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidTagParameterException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.InvalidTagParameterException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidTagParameterException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.InvalidTagParameterException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidTagParameterException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.InvalidTagParameterException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidTagParameterException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.InvalidTagParameterException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidTagParameterException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.InvalidTagParameterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the InvalidTagParameterException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.ECRPublic.Model.InvalidTagParameterException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.ECRPublic.Model.Layer">
            <summary>
            An object representing an Amazon ECR image layer.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Layer.LayerAvailability">
            <summary>
            Gets and sets the property LayerAvailability. 
            <para>
            The availability status of the image layer.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Layer.LayerDigest">
            <summary>
            Gets and sets the property LayerDigest. 
            <para>
            The <code>sha256</code> digest of the image layer.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Layer.LayerSize">
            <summary>
            Gets and sets the property LayerSize. 
            <para>
            The size, in bytes, of the image layer.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Layer.MediaType">
            <summary>
            Gets and sets the property MediaType. 
            <para>
            The media type of the layer, such as <code>application/vnd.docker.image.rootfs.diff.tar.gzip</code>
            or <code>application/vnd.oci.image.layer.v1.tar+gzip</code>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.LayerAlreadyExistsException">
            <summary>
            The image layer already exists in the associated repository.
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.Model.LayerAlreadyExistsException.#ctor(System.String)">
            <summary>
            Constructs a new LayerAlreadyExistsException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.LayerAlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of LayerAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.LayerAlreadyExistsException.#ctor(System.Exception)">
            <summary>
            Construct instance of LayerAlreadyExistsException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.LayerAlreadyExistsException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LayerAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.LayerAlreadyExistsException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LayerAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.LayerAlreadyExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the LayerAlreadyExistsException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.ECRPublic.Model.LayerAlreadyExistsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.ECRPublic.Model.LayerFailure">
            <summary>
            An object representing an Amazon ECR image layer failure.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.LayerFailure.FailureCode">
            <summary>
            Gets and sets the property FailureCode. 
            <para>
            The failure code associated with the failure.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.LayerFailure.FailureReason">
            <summary>
            Gets and sets the property FailureReason. 
            <para>
            The reason for the failure.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.LayerFailure.LayerDigest">
            <summary>
            Gets and sets the property LayerDigest. 
            <para>
            The layer digest associated with the failure.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.LayerPartTooSmallException">
            <summary>
            Layer parts must be at least 5 MiB in size.
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.Model.LayerPartTooSmallException.#ctor(System.String)">
            <summary>
            Constructs a new LayerPartTooSmallException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.LayerPartTooSmallException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of LayerPartTooSmallException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.LayerPartTooSmallException.#ctor(System.Exception)">
            <summary>
            Construct instance of LayerPartTooSmallException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.LayerPartTooSmallException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LayerPartTooSmallException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.LayerPartTooSmallException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LayerPartTooSmallException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.LayerPartTooSmallException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the LayerPartTooSmallException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.ECRPublic.Model.LayerPartTooSmallException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.ECRPublic.Model.LayersNotFoundException">
            <summary>
            The specified layers could not be found, or the specified layer is not valid for this
            repository.
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.Model.LayersNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new LayersNotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.LayersNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of LayersNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.LayersNotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of LayersNotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.LayersNotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LayersNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.LayersNotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LayersNotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.LayersNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the LayersNotFoundException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.ECRPublic.Model.LayersNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.ECRPublic.Model.LimitExceededException">
            <summary>
            The operation did not succeed because it would have exceeded a service limit for your
            account. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/service-quotas.html">Amazon
            ECR Service Quotas</a> in the Amazon Elastic Container Registry User Guide.
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.Model.LimitExceededException.#ctor(System.String)">
            <summary>
            Constructs a new LimitExceededException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.LimitExceededException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of LimitExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.LimitExceededException.#ctor(System.Exception)">
            <summary>
            Construct instance of LimitExceededException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.LimitExceededException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LimitExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.LimitExceededException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LimitExceededException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.LimitExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the LimitExceededException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.ECRPublic.Model.LimitExceededException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.ECRPublic.Model.ListTagsForResourceRequest">
            <summary>
            Container for the parameters to the ListTagsForResource operation.
            List the tags for an Amazon ECR Public resource.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.ListTagsForResourceRequest.ResourceArn">
            <summary>
            Gets and sets the property ResourceArn. 
            <para>
            The Amazon Resource Name (ARN) that identifies the resource for which to list the
            tags. Currently, the supported resource is an Amazon ECR Public repository.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.ListTagsForResourceResponse">
            <summary>
            This is the response object from the ListTagsForResource operation.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.ListTagsForResourceResponse.Tags">
            <summary>
            Gets and sets the property Tags. 
            <para>
            The tags for the resource.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.PutImageRequest">
            <summary>
            Container for the parameters to the PutImage operation.
            Creates or updates the image manifest and tags associated with an image.
            
             
            <para>
            When an image is pushed and all new image layers have been uploaded, the PutImage
            API is called once to create or update the image manifest and the tags associated
            with the image.
            </para>
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy and is not generally used by customers
            for pulling and pushing images. In most cases, you should use the <code>docker</code>
            CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.PutImageRequest.ImageDigest">
            <summary>
            Gets and sets the property ImageDigest. 
            <para>
            The image digest of the image manifest corresponding to the image.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.PutImageRequest.ImageManifest">
            <summary>
            Gets and sets the property ImageManifest. 
            <para>
            The image manifest corresponding to the image to be uploaded.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.PutImageRequest.ImageManifestMediaType">
            <summary>
            Gets and sets the property ImageManifestMediaType. 
            <para>
            The media type of the image manifest. If you push an image manifest that does not
            contain the <code>mediaType</code> field, you must specify the <code>imageManifestMediaType</code>
            in the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.PutImageRequest.ImageTag">
            <summary>
            Gets and sets the property ImageTag. 
            <para>
            The tag to associate with the image. This parameter is required for images that use
            the Docker Image Manifest V2 Schema 2 or Open Container Initiative (OCI) formats.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.PutImageRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the public registry that contains the repository
            in which to put the image. If you do not specify a registry, the default public registry
            is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.PutImageRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository in which to put the image.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.PutImageResponse">
            <summary>
            This is the response object from the PutImage operation.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.PutImageResponse.Image">
            <summary>
            Gets and sets the property Image. 
            <para>
            Details of the image uploaded.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.PutRegistryCatalogDataRequest">
            <summary>
            Container for the parameters to the PutRegistryCatalogData operation.
            Create or updates the catalog data for a public registry.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.PutRegistryCatalogDataRequest.DisplayName">
            <summary>
            Gets and sets the property DisplayName. 
            <para>
            The display name for a public registry. The display name is shown as the repository
            author in the Amazon ECR Public Gallery.
            </para>
             <note> 
            <para>
            The registry display name is only publicly visible in the Amazon ECR Public Gallery
            for verified accounts.
            </para>
             </note>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.PutRegistryCatalogDataResponse">
            <summary>
            This is the response object from the PutRegistryCatalogData operation.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.PutRegistryCatalogDataResponse.RegistryCatalogData">
            <summary>
            Gets and sets the property RegistryCatalogData. 
            <para>
            The catalog data for the public registry.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.PutRepositoryCatalogDataRequest">
            <summary>
            Container for the parameters to the PutRepositoryCatalogData operation.
            Creates or updates the catalog data for a repository in a public registry.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.PutRepositoryCatalogDataRequest.CatalogData">
            <summary>
            Gets and sets the property CatalogData. 
            <para>
            An object containing the catalog data for a repository. This data is publicly visible
            in the Amazon ECR Public Gallery.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.PutRepositoryCatalogDataRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the public registry the repository is in. If you
            do not specify a registry, the default public registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.PutRepositoryCatalogDataRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository to create or update the catalog data for.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.PutRepositoryCatalogDataResponse">
            <summary>
            This is the response object from the PutRepositoryCatalogData operation.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.PutRepositoryCatalogDataResponse.CatalogData">
            <summary>
            Gets and sets the property CatalogData. 
            <para>
            The catalog data for the repository.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.ReferencedImageDetail">
            <summary>
            An object that describes the image tag details returned by a <a>DescribeImageTags</a>
            action.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.ReferencedImageDetail.ArtifactMediaType">
            <summary>
            Gets and sets the property ArtifactMediaType. 
            <para>
            The artifact media type of the image.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.ReferencedImageDetail.ImageDigest">
            <summary>
            Gets and sets the property ImageDigest. 
            <para>
            The <code>sha256</code> digest of the image manifest.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.ReferencedImageDetail.ImageManifestMediaType">
            <summary>
            Gets and sets the property ImageManifestMediaType. 
            <para>
            The media type of the image manifest.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.ReferencedImageDetail.ImagePushedAt">
            <summary>
            Gets and sets the property ImagePushedAt. 
            <para>
            The date and time, expressed in standard JavaScript date format, at which the current
            image tag was pushed to the repository.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.ReferencedImageDetail.ImageSizeInBytes">
            <summary>
            Gets and sets the property ImageSizeInBytes. 
            <para>
            The size, in bytes, of the image in the repository.
            </para>
             
            <para>
            If the image is a manifest list, this will be the max size of all manifests in the
            list.
            </para>
             <note> 
            <para>
            Beginning with Docker version 1.9, the Docker client compresses image layers before
            pushing them to a V2 Docker registry. The output of the <code>docker images</code>
            command shows the uncompressed image size, so it may return a larger image size than
            the image sizes returned by <a>DescribeImages</a>.
            </para>
             </note>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.ReferencedImagesNotFoundException">
            <summary>
            The manifest list is referencing an image that does not exist.
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ReferencedImagesNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new ReferencedImagesNotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ReferencedImagesNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ReferencedImagesNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ReferencedImagesNotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of ReferencedImagesNotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ReferencedImagesNotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ReferencedImagesNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ReferencedImagesNotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ReferencedImagesNotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ReferencedImagesNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the ReferencedImagesNotFoundException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ReferencedImagesNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.ECRPublic.Model.Registry">
            <summary>
            The details of a public registry.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Registry.Aliases">
            <summary>
            Gets and sets the property Aliases. 
            <para>
            An array of objects representing the aliases for a public registry.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Registry.RegistryArn">
            <summary>
            Gets and sets the property RegistryArn. 
            <para>
            The Amazon Resource Name (ARN) of the public registry.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Registry.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry. If you do not specify a registry,
            the default public registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Registry.RegistryUri">
            <summary>
            Gets and sets the property RegistryUri. 
            <para>
            The URI of a public registry. The URI contains a universal prefix and the registry
            alias.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Registry.Verified">
            <summary>
            Gets and sets the property Verified. 
            <para>
            Whether the account is verified. This indicates whether the account is an AWS Marketplace
            vendor. If an account is verified, each public repository will received a verified
            account badge on the Amazon ECR Public Gallery.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.RegistryAlias">
            <summary>
            An object representing the aliases for a public registry. A public registry is given
            an alias upon creation but a custom alias can be set using the Amazon ECR console.
            For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/Registries.html">Registries</a>
            in the <i>Amazon Elastic Container Registry User Guide</i>.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.RegistryAlias.DefaultRegistryAlias">
            <summary>
            Gets and sets the property DefaultRegistryAlias. 
            <para>
            Whether or not the registry alias is the default alias for the registry. When the
            first public repository is created, your public registry is assigned a default registry
            alias.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.RegistryAlias.Name">
            <summary>
            Gets and sets the property Name. 
            <para>
            The name of the registry alias.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.RegistryAlias.PrimaryRegistryAlias">
            <summary>
            Gets and sets the property PrimaryRegistryAlias. 
            <para>
            Whether or not the registry alias is the primary alias for the registry. If true,
            the alias is the primary registry alias and is displayed in both the repository URL
            and the image URI used in the <code>docker pull</code> commands on the Amazon ECR
            Public Gallery.
            </para>
             <note> 
            <para>
            A registry alias that is not the primary registry alias can be used in the repository
            URI in a <code>docker pull</code> command.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.RegistryAlias.Status">
            <summary>
            Gets and sets the property Status. 
            <para>
            The status of the registry alias.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.RegistryCatalogData">
            <summary>
            The metadata for a public registry.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.RegistryCatalogData.DisplayName">
            <summary>
            Gets and sets the property DisplayName. 
            <para>
            The display name for a public registry. This appears on the Amazon ECR Public Gallery.
            </para>
             <important> 
            <para>
            Only accounts that have the verified account badge can have a registry display name.
            </para>
             </important>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.RegistryNotFoundException">
            <summary>
            The registry does not exist.
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RegistryNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new RegistryNotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RegistryNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of RegistryNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RegistryNotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of RegistryNotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RegistryNotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of RegistryNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RegistryNotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of RegistryNotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RegistryNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the RegistryNotFoundException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RegistryNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.ECRPublic.Model.Repository">
            <summary>
            An object representing a repository.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Repository.CreatedAt">
            <summary>
            Gets and sets the property CreatedAt. 
            <para>
            The date and time, in JavaScript date format, when the repository was created.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Repository.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the public registry that contains the repository.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Repository.RepositoryArn">
            <summary>
            Gets and sets the property RepositoryArn. 
            <para>
            The Amazon Resource Name (ARN) that identifies the repository. The ARN contains the
            <code>arn:aws:ecr</code> namespace, followed by the region of the repository, AWS
            account ID of the repository owner, repository namespace, and repository name. For
            example, <code>arn:aws:ecr:region:012345678910:repository/test</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Repository.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Repository.RepositoryUri">
            <summary>
            Gets and sets the property RepositoryUri. 
            <para>
            The URI for the repository. You can use this URI for container image <code>push</code>
            and <code>pull</code> operations.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.RepositoryAlreadyExistsException">
            <summary>
            The specified repository already exists in the specified registry.
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RepositoryAlreadyExistsException.#ctor(System.String)">
            <summary>
            Constructs a new RepositoryAlreadyExistsException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RepositoryAlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of RepositoryAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RepositoryAlreadyExistsException.#ctor(System.Exception)">
            <summary>
            Construct instance of RepositoryAlreadyExistsException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RepositoryAlreadyExistsException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of RepositoryAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RepositoryAlreadyExistsException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of RepositoryAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RepositoryAlreadyExistsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the RepositoryAlreadyExistsException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RepositoryAlreadyExistsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.ECRPublic.Model.RepositoryCatalogData">
            <summary>
            The catalog data for a repository. This data is publicly visible in the Amazon ECR
            Public Gallery.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.RepositoryCatalogData.AboutText">
            <summary>
            Gets and sets the property AboutText. 
            <para>
            The longform description of the contents of the repository. This text appears in the
            repository details on the Amazon ECR Public Gallery.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.RepositoryCatalogData.Architectures">
            <summary>
            Gets and sets the property Architectures. 
            <para>
            The architecture tags that are associated with the repository.
            </para>
             <note> 
            <para>
            Only supported operating system tags appear publicly in the Amazon ECR Public Gallery.
            For more information, see <a>RepositoryCatalogDataInput</a>.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.RepositoryCatalogData.Description">
            <summary>
            Gets and sets the property Description. 
            <para>
            The short description of the repository.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.RepositoryCatalogData.LogoUrl">
            <summary>
            Gets and sets the property LogoUrl. 
            <para>
            The URL containing the logo associated with the repository.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.RepositoryCatalogData.MarketplaceCertified">
            <summary>
            Gets and sets the property MarketplaceCertified. 
            <para>
            Whether or not the repository is certified by AWS Marketplace.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.RepositoryCatalogData.OperatingSystems">
            <summary>
            Gets and sets the property OperatingSystems. 
            <para>
            The operating system tags that are associated with the repository.
            </para>
             <note> 
            <para>
            Only supported operating system tags appear publicly in the Amazon ECR Public Gallery.
            For more information, see <a>RepositoryCatalogDataInput</a>.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.RepositoryCatalogData.UsageText">
            <summary>
            Gets and sets the property UsageText. 
            <para>
            The longform usage details of the contents of the repository. The usage text provides
            context for users of the repository.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.RepositoryCatalogDataInput">
            <summary>
            An object containing the catalog data for a repository. This data is publicly visible
            in the Amazon ECR Public Gallery.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.RepositoryCatalogDataInput.AboutText">
            <summary>
            Gets and sets the property AboutText. 
            <para>
            A detailed description of the contents of the repository. It is publicly visible in
            the Amazon ECR Public Gallery. The text must be in markdown format.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.RepositoryCatalogDataInput.Architectures">
            <summary>
            Gets and sets the property Architectures. 
            <para>
            The system architecture that the images in the repository are compatible with. On
            the Amazon ECR Public Gallery, the following supported architectures will appear as
            badges on the repository and are used as search filters.
            </para>
             <ul> <li> 
            <para>
             <code>Linux</code> 
            </para>
             </li> <li> 
            <para>
             <code>Windows</code> 
            </para>
             </li> </ul> <note> 
            <para>
            If an unsupported tag is added to your repository catalog data, it will be associated
            with the repository and can be retrieved using the API but will not be discoverable
            in the Amazon ECR Public Gallery.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.RepositoryCatalogDataInput.Description">
            <summary>
            Gets and sets the property Description. 
            <para>
            A short description of the contents of the repository. This text appears in both the
            image details and also when searching for repositories on the Amazon ECR Public Gallery.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.RepositoryCatalogDataInput.LogoImageBlob">
            <summary>
            Gets and sets the property LogoImageBlob. 
            <para>
            The base64-encoded repository logo payload.
            </para>
             <note> 
            <para>
            The repository logo is only publicly visible in the Amazon ECR Public Gallery for
            verified accounts.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.RepositoryCatalogDataInput.OperatingSystems">
            <summary>
            Gets and sets the property OperatingSystems. 
            <para>
            The operating systems that the images in the repository are compatible with. On the
            Amazon ECR Public Gallery, the following supported operating systems will appear as
            badges on the repository and are used as search filters.
            </para>
             <ul> <li> 
            <para>
             <code>ARM</code> 
            </para>
             </li> <li> 
            <para>
             <code>ARM 64</code> 
            </para>
             </li> <li> 
            <para>
             <code>x86</code> 
            </para>
             </li> <li> 
            <para>
             <code>x86-64</code> 
            </para>
             </li> </ul> <note> 
            <para>
            If an unsupported tag is added to your repository catalog data, it will be associated
            with the repository and can be retrieved using the API but will not be discoverable
            in the Amazon ECR Public Gallery.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.RepositoryCatalogDataInput.UsageText">
            <summary>
            Gets and sets the property UsageText. 
            <para>
            Detailed information on how to use the contents of the repository. It is publicly
            visible in the Amazon ECR Public Gallery. The usage text provides context, support
            information, and additional usage details for users of the repository. The text must
            be in markdown format.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.RepositoryNotEmptyException">
            <summary>
            The specified repository contains images. To delete a repository that contains images,
            you must force the deletion with the <code>force</code> parameter.
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RepositoryNotEmptyException.#ctor(System.String)">
            <summary>
            Constructs a new RepositoryNotEmptyException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RepositoryNotEmptyException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of RepositoryNotEmptyException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RepositoryNotEmptyException.#ctor(System.Exception)">
            <summary>
            Construct instance of RepositoryNotEmptyException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RepositoryNotEmptyException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of RepositoryNotEmptyException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RepositoryNotEmptyException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of RepositoryNotEmptyException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RepositoryNotEmptyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the RepositoryNotEmptyException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RepositoryNotEmptyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            <summary>
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RepositoryNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new RepositoryNotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RepositoryNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of RepositoryNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RepositoryNotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of RepositoryNotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RepositoryNotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of RepositoryNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RepositoryNotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of RepositoryNotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RepositoryNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the RepositoryNotFoundException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RepositoryNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.ECRPublic.Model.RepositoryPolicyNotFoundException">
            <summary>
            The specified repository and registry combination does not have an associated repository
            policy.
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RepositoryPolicyNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new RepositoryPolicyNotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RepositoryPolicyNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of RepositoryPolicyNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RepositoryPolicyNotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of RepositoryPolicyNotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RepositoryPolicyNotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of RepositoryPolicyNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RepositoryPolicyNotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of RepositoryPolicyNotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RepositoryPolicyNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the RepositoryPolicyNotFoundException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.ECRPublic.Model.RepositoryPolicyNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.ECRPublic.Model.ServerException">
            <summary>
            These errors are usually caused by a server-side issue.
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ServerException.#ctor(System.String)">
            <summary>
            Constructs a new ServerException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ServerException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ServerException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ServerException.#ctor(System.Exception)">
            <summary>
            Construct instance of ServerException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ServerException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ServerException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ServerException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ServerException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ServerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the ServerException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ServerException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.ECRPublic.Model.SetRepositoryPolicyRequest">
            <summary>
            Container for the parameters to the SetRepositoryPolicy operation.
            Applies a repository policy to the specified public repository to control access permissions.
            For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policies.html">Amazon
            ECR Repository Policies</a> in the <i>Amazon Elastic Container Registry User Guide</i>.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.SetRepositoryPolicyRequest.Force">
            <summary>
            Gets and sets the property Force. 
            <para>
            If the policy you are attempting to set on a repository policy would prevent you from
            setting another policy in the future, you must force the <a>SetRepositoryPolicy</a>
            operation. This is intended to prevent accidental repository lock outs.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.SetRepositoryPolicyRequest.PolicyText">
            <summary>
            Gets and sets the property PolicyText. 
            <para>
            The JSON repository policy text to apply to the repository. For more information,
            see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policy-examples.html">Amazon
            ECR Repository Policies</a> in the <i>Amazon Elastic Container Registry User Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.SetRepositoryPolicyRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the repository. If you
            do not specify a registry, the default public registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.SetRepositoryPolicyRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository to receive the policy.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.SetRepositoryPolicyResponse">
            <summary>
            This is the response object from the SetRepositoryPolicy operation.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.SetRepositoryPolicyResponse.PolicyText">
            <summary>
            Gets and sets the property PolicyText. 
            <para>
            The JSON repository policy text applied to the repository.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.SetRepositoryPolicyResponse.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The registry ID associated with the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.SetRepositoryPolicyResponse.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The repository name associated with the request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.Tag">
            <summary>
            The metadata that you apply to a resource to help you categorize and organize them.
            Each tag consists of a key and an optional value, both of which you define. Tag keys
            can have a maximum character length of 128 characters, and tag values can have a maximum
            length of 256 characters.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Tag.Key">
            <summary>
            Gets and sets the property Key. 
            <para>
            One part of a key-value pair that make up a tag. A <code>key</code> is a general label
            that acts like a category for more specific tag values.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.Tag.Value">
            <summary>
            Gets and sets the property Value. 
            <para>
            The optional part of a key-value pair that make up a tag. A <code>value</code> acts
            as a descriptor within a tag category (key).
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.TagResourceRequest">
            <summary>
            Container for the parameters to the TagResource operation.
            Associates the specified tags to a resource with the specified <code>resourceArn</code>.
            If existing tags on a resource are not specified in the request parameters, they are
            not changed. When a resource is deleted, the tags associated with that resource are
            deleted as well.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.TagResourceRequest.ResourceArn">
            <summary>
            Gets and sets the property ResourceArn. 
            <para>
            The Amazon Resource Name (ARN) of the resource to which to add tags. Currently, the
            supported resource is an Amazon ECR Public repository.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.TagResourceRequest.Tags">
            <summary>
            Gets and sets the property Tags. 
            <para>
            The tags to add to the resource. A tag is an array of key-value pairs. Tag keys can
            have a maximum character length of 128 characters, and tag values can have a maximum
            length of 256 characters.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.TagResourceResponse">
            <summary>
            This is the response object from the TagResource operation.
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.TooManyTagsException">
            <summary>
            The list of tags on the repository is over the limit. The maximum number of tags that
            can be applied to a repository is 50.
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.Model.TooManyTagsException.#ctor(System.String)">
            <summary>
            Constructs a new TooManyTagsException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.TooManyTagsException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of TooManyTagsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.TooManyTagsException.#ctor(System.Exception)">
            <summary>
            Construct instance of TooManyTagsException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.TooManyTagsException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of TooManyTagsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.TooManyTagsException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of TooManyTagsException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.TooManyTagsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the TooManyTagsException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.ECRPublic.Model.TooManyTagsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.ECRPublic.Model.UnsupportedCommandException">
            <summary>
            The action is not supported in this Region.
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.Model.UnsupportedCommandException.#ctor(System.String)">
            <summary>
            Constructs a new UnsupportedCommandException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.UnsupportedCommandException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of UnsupportedCommandException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.UnsupportedCommandException.#ctor(System.Exception)">
            <summary>
            Construct instance of UnsupportedCommandException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.UnsupportedCommandException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of UnsupportedCommandException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.UnsupportedCommandException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of UnsupportedCommandException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.UnsupportedCommandException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the UnsupportedCommandException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.ECRPublic.Model.UnsupportedCommandException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.ECRPublic.Model.UntagResourceRequest">
            <summary>
            Container for the parameters to the UntagResource operation.
            Deletes specified tags from a resource.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.UntagResourceRequest.ResourceArn">
            <summary>
            Gets and sets the property ResourceArn. 
            <para>
            The Amazon Resource Name (ARN) of the resource from which to delete tags. Currently,
            the supported resource is an Amazon ECR Public repository.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.UntagResourceRequest.TagKeys">
            <summary>
            Gets and sets the property TagKeys. 
            <para>
            The keys of the tags to be removed.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.UntagResourceResponse">
            <summary>
            This is the response object from the UntagResource operation.
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.UploadLayerPartRequest">
            <summary>
            Container for the parameters to the UploadLayerPart operation.
            Uploads an image layer part to Amazon ECR.
            
             
            <para>
            When an image is pushed, each new image layer is uploaded in parts. The maximum size
            of each image layer part can be 20971520 bytes (or about 20MB). The UploadLayerPart
            API is called once per each new image layer part.
            </para>
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy and is not generally used by customers
            for pulling and pushing images. In most cases, you should use the <code>docker</code>
            CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.UploadLayerPartRequest.LayerPartBlob">
            <summary>
            Gets and sets the property LayerPartBlob. 
            <para>
            The base64-encoded layer part payload.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.UploadLayerPartRequest.PartFirstByte">
            <summary>
            Gets and sets the property PartFirstByte. 
            <para>
            The position of the first byte of the layer part witin the overall image layer.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.UploadLayerPartRequest.PartLastByte">
            <summary>
            Gets and sets the property PartLastByte. 
            <para>
            The position of the last byte of the layer part within the overall image layer.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.UploadLayerPartRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry to which you are uploading layer parts.
            If you do not specify a registry, the default public registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.UploadLayerPartRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository to which you are uploading layer parts.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.UploadLayerPartRequest.UploadId">
            <summary>
            Gets and sets the property UploadId. 
            <para>
            The upload ID from a previous <a>InitiateLayerUpload</a> operation to associate with
            the layer part upload.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.UploadLayerPartResponse">
            <summary>
            This is the response object from the UploadLayerPart operation.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.UploadLayerPartResponse.LastByteReceived">
            <summary>
            Gets and sets the property LastByteReceived. 
            <para>
            The integer value of the last byte received in the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.UploadLayerPartResponse.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The registry ID associated with the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.UploadLayerPartResponse.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The repository name associated with the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.UploadLayerPartResponse.UploadId">
            <summary>
            Gets and sets the property UploadId. 
            <para>
            The upload ID associated with the request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.UploadNotFoundException">
            <summary>
            The upload could not be found, or the specified upload ID is not valid for this repository.
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.Model.UploadNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new UploadNotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.UploadNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of UploadNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.UploadNotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of UploadNotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.UploadNotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of UploadNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.UploadNotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of UploadNotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECRPublic.Model.UploadNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the UploadNotFoundException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.ECRPublic.Model.UploadNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.ECRPublic.Model.DescribeImagesPaginator">
            <summary>
            Base class for DescribeImages paginators.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DescribeImagesPaginator.Responses">
            <summary>
            Enumerable containing all full responses for the operation
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DescribeImagesPaginator.ImageDetails">
            <summary>
            Enumerable containing all of the ImageDetails
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.DescribeImageTagsPaginator">
            <summary>
            Base class for DescribeImageTags paginators.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DescribeImageTagsPaginator.Responses">
            <summary>
            Enumerable containing all full responses for the operation
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DescribeImageTagsPaginator.ImageTagDetails">
            <summary>
            Enumerable containing all of the ImageTagDetails
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.DescribeRegistriesPaginator">
            <summary>
            Base class for DescribeRegistries paginators.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DescribeRegistriesPaginator.Responses">
            <summary>
            Enumerable containing all full responses for the operation
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DescribeRegistriesPaginator.Registries">
            <summary>
            Enumerable containing all of the Registries
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.DescribeRepositoriesPaginator">
            <summary>
            Base class for DescribeRepositories paginators.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DescribeRepositoriesPaginator.Responses">
            <summary>
            Enumerable containing all full responses for the operation
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.DescribeRepositoriesPaginator.Repositories">
            <summary>
            Enumerable containing all of the Repositories
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.ECRPublicPaginatorFactory">
             <summary>
             Paginators for the ECRPublic service
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ECRPublicPaginatorFactory.DescribeImages(Amazon.ECRPublic.Model.DescribeImagesRequest)">
             <summary>
             Paginator for DescribeImages operation
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ECRPublicPaginatorFactory.DescribeImageTags(Amazon.ECRPublic.Model.DescribeImageTagsRequest)">
             <summary>
             Paginator for DescribeImageTags operation
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ECRPublicPaginatorFactory.DescribeRegistries(Amazon.ECRPublic.Model.DescribeRegistriesRequest)">
             <summary>
             Paginator for DescribeRegistries operation
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.Model.ECRPublicPaginatorFactory.DescribeRepositories(Amazon.ECRPublic.Model.DescribeRepositoriesRequest)">
             <summary>
             Paginator for DescribeRepositories operation
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.IDescribeImagesPaginator">
             <summary>
             Paginator for the DescribeImages operation
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.IDescribeImagesPaginator.Responses">
            <summary>
            Enumerable containing all full responses for the operation
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.IDescribeImagesPaginator.ImageDetails">
            <summary>
            Enumerable containing all of the ImageDetails
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.IDescribeImageTagsPaginator">
             <summary>
             Paginator for the DescribeImageTags operation
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.IDescribeImageTagsPaginator.Responses">
            <summary>
            Enumerable containing all full responses for the operation
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.IDescribeImageTagsPaginator.ImageTagDetails">
            <summary>
            Enumerable containing all of the ImageTagDetails
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.IDescribeRegistriesPaginator">
             <summary>
             Paginator for the DescribeRegistries operation
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.IDescribeRegistriesPaginator.Responses">
            <summary>
            Enumerable containing all full responses for the operation
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.IDescribeRegistriesPaginator.Registries">
            <summary>
            Enumerable containing all of the Registries
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.IDescribeRepositoriesPaginator">
             <summary>
             Paginator for the DescribeRepositories operation
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.IDescribeRepositoriesPaginator.Responses">
            <summary>
            Enumerable containing all full responses for the operation
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.Model.IDescribeRepositoriesPaginator.Repositories">
            <summary>
            Enumerable containing all of the Repositories
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.Model.IECRPublicPaginatorFactory">
             <summary>
             Paginators for the ECRPublic service
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.Model.IECRPublicPaginatorFactory.DescribeImages(Amazon.ECRPublic.Model.DescribeImagesRequest)">
             <summary>
             Paginator for DescribeImages operation
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.Model.IECRPublicPaginatorFactory.DescribeImageTags(Amazon.ECRPublic.Model.DescribeImageTagsRequest)">
             <summary>
             Paginator for DescribeImageTags operation
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.Model.IECRPublicPaginatorFactory.DescribeRegistries(Amazon.ECRPublic.Model.DescribeRegistriesRequest)">
             <summary>
             Paginator for DescribeRegistries operation
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.Model.IECRPublicPaginatorFactory.DescribeRepositories(Amazon.ECRPublic.Model.DescribeRepositoriesRequest)">
             <summary>
             Paginator for DescribeRepositories operation
            </summary>
        </member>
        <member name="T:Amazon.ECRPublic.ImageFailureCode">
            <summary>
            Constants used for properties of type ImageFailureCode.
            </summary>
        </member>
        <member name="F:Amazon.ECRPublic.ImageFailureCode.ImageNotFound">
            <summary>
            Constant ImageNotFound for ImageFailureCode
            </summary>
        </member>
        <member name="F:Amazon.ECRPublic.ImageFailureCode.ImageReferencedByManifestList">
            <summary>
            Constant ImageReferencedByManifestList for ImageFailureCode
            </summary>
        </member>
        <member name="F:Amazon.ECRPublic.ImageFailureCode.ImageTagDoesNotMatchDigest">
            <summary>
            Constant ImageTagDoesNotMatchDigest for ImageFailureCode
            </summary>
        </member>
        <member name="F:Amazon.ECRPublic.ImageFailureCode.InvalidImageDigest">
            <summary>
            Constant InvalidImageDigest for ImageFailureCode
            </summary>
        </member>
        <member name="F:Amazon.ECRPublic.ImageFailureCode.InvalidImageTag">
            <summary>
            Constant InvalidImageTag for ImageFailureCode
            </summary>
        </member>
        <member name="F:Amazon.ECRPublic.ImageFailureCode.KmsError">
            <summary>
            Constant KmsError for ImageFailureCode
            </summary>
        </member>
        <member name="F:Amazon.ECRPublic.ImageFailureCode.MissingDigestAndTag">
            <summary>
            Constant MissingDigestAndTag for ImageFailureCode
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.ImageFailureCode.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.ImageFailureCode.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.ECRPublic.ImageFailureCode.op_Implicit(System.String)~Amazon.ECRPublic.ImageFailureCode">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.ECRPublic.LayerAvailability">
            <summary>
            Constants used for properties of type LayerAvailability.
            </summary>
        </member>
        <member name="F:Amazon.ECRPublic.LayerAvailability.AVAILABLE">
            <summary>
            Constant AVAILABLE for LayerAvailability
            </summary>
        </member>
        <member name="F:Amazon.ECRPublic.LayerAvailability.UNAVAILABLE">
            <summary>
            Constant UNAVAILABLE for LayerAvailability
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.LayerAvailability.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.LayerAvailability.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.ECRPublic.LayerAvailability.op_Implicit(System.String)~Amazon.ECRPublic.LayerAvailability">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.ECRPublic.LayerFailureCode">
            <summary>
            Constants used for properties of type LayerFailureCode.
            </summary>
        </member>
        <member name="F:Amazon.ECRPublic.LayerFailureCode.InvalidLayerDigest">
            <summary>
            Constant InvalidLayerDigest for LayerFailureCode
            </summary>
        </member>
        <member name="F:Amazon.ECRPublic.LayerFailureCode.MissingLayerDigest">
            <summary>
            Constant MissingLayerDigest for LayerFailureCode
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.LayerFailureCode.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.LayerFailureCode.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.ECRPublic.LayerFailureCode.op_Implicit(System.String)~Amazon.ECRPublic.LayerFailureCode">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.ECRPublic.RegistryAliasStatus">
            <summary>
            Constants used for properties of type RegistryAliasStatus.
            </summary>
        </member>
        <member name="F:Amazon.ECRPublic.RegistryAliasStatus.ACTIVE">
            <summary>
            Constant ACTIVE for RegistryAliasStatus
            </summary>
        </member>
        <member name="F:Amazon.ECRPublic.RegistryAliasStatus.PENDING">
            <summary>
            Constant PENDING for RegistryAliasStatus
            </summary>
        </member>
        <member name="F:Amazon.ECRPublic.RegistryAliasStatus.REJECTED">
            <summary>
            Constant REJECTED for RegistryAliasStatus
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.RegistryAliasStatus.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.RegistryAliasStatus.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.ECRPublic.RegistryAliasStatus.op_Implicit(System.String)~Amazon.ECRPublic.RegistryAliasStatus">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.ECRPublic.AmazonECRPublicClient">
             <summary>
             Implementation for accessing ECRPublic
            
             Amazon Elastic Container Registry Public 
             <para>
             Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry
             service. Amazon ECR provides both public and private registries to host your container
             images. You can use the familiar Docker CLI, or their preferred client, to push, pull,
             and manage images. Amazon ECR provides a secure, scalable, and reliable registry for
             your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public
             repositories with this API. For information about the Amazon ECR API for private repositories,
             see <a href="https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html">Amazon
             Elastic Container Registry API Reference</a>.
             </para>
             </summary>
        </member>
        <member name="P:Amazon.ECRPublic.AmazonECRPublicClient.Paginators">
            <summary>
            Paginators for the service
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.#ctor">
             <summary>
             Constructs AmazonECRPublicClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.#ctor(Amazon.RegionEndpoint)">
             <summary>
             Constructs AmazonECRPublicClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
             <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.#ctor(Amazon.ECRPublic.AmazonECRPublicConfig)">
             <summary>
             Constructs AmazonECRPublicClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
             <param name="config">The AmazonECRPublicClient Configuration Object</param>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.#ctor(Amazon.Runtime.AWSCredentials)">
            <summary>
            Constructs AmazonECRPublicClient with AWS Credentials
            </summary>
            <param name="credentials">AWS Credentials</param>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.#ctor(Amazon.Runtime.AWSCredentials,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonECRPublicClient with AWS Credentials
            </summary>
            <param name="credentials">AWS Credentials</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.#ctor(Amazon.Runtime.AWSCredentials,Amazon.ECRPublic.AmazonECRPublicConfig)">
            <summary>
            Constructs AmazonECRPublicClient with AWS Credentials and an
            AmazonECRPublicClient Configuration object.
            </summary>
            <param name="credentials">AWS Credentials</param>
            <param name="clientConfig">The AmazonECRPublicClient Configuration Object</param>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.#ctor(System.String,System.String)">
            <summary>
            Constructs AmazonECRPublicClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.#ctor(System.String,System.String,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonECRPublicClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.#ctor(System.String,System.String,Amazon.ECRPublic.AmazonECRPublicConfig)">
            <summary>
            Constructs AmazonECRPublicClient with AWS Access Key ID, AWS Secret Key and an
            AmazonECRPublicClient Configuration object. 
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="clientConfig">The AmazonECRPublicClient Configuration Object</param>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs AmazonECRPublicClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.#ctor(System.String,System.String,System.String,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonECRPublicClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.#ctor(System.String,System.String,System.String,Amazon.ECRPublic.AmazonECRPublicConfig)">
            <summary>
            Constructs AmazonECRPublicClient with AWS Access Key ID, AWS Secret Key and an
            AmazonECRPublicClient Configuration object. 
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
            <param name="clientConfig">The AmazonECRPublicClient Configuration Object</param>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.CreateSigner">
            <summary>
            Creates the signer for the service.
            </summary>
        </member>
        <member name="P:Amazon.ECRPublic.AmazonECRPublicClient.ServiceMetadata">
            <summary>
            Capture metadata for the service.
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.Dispose(System.Boolean)">
            <summary>
            Disposes the service client.
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.BatchCheckLayerAvailability(Amazon.ECRPublic.Model.BatchCheckLayerAvailabilityRequest)">
            <summary>
            Checks the availability of one or more image layers within a repository in a public
            registry. When an image is pushed to a repository, each image layer is checked to
            verify if it has been uploaded before. If it has been uploaded, then the image layer
            is skipped.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy and is not generally used by customers
            for pulling and pushing images. In most cases, you should use the <code>docker</code>
            CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the BatchCheckLayerAvailability service method.</param>
            
            <returns>The response from the BatchCheckLayerAvailability service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RegistryNotFoundException">
            The registry does not exist.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/BatchCheckLayerAvailability">REST API Reference for BatchCheckLayerAvailability Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.BatchCheckLayerAvailabilityAsync(Amazon.ECRPublic.Model.BatchCheckLayerAvailabilityRequest,System.Threading.CancellationToken)">
            <summary>
            Checks the availability of one or more image layers within a repository in a public
            registry. When an image is pushed to a repository, each image layer is checked to
            verify if it has been uploaded before. If it has been uploaded, then the image layer
            is skipped.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy and is not generally used by customers
            for pulling and pushing images. In most cases, you should use the <code>docker</code>
            CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the BatchCheckLayerAvailability service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the BatchCheckLayerAvailability service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RegistryNotFoundException">
            The registry does not exist.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/BatchCheckLayerAvailability">REST API Reference for BatchCheckLayerAvailability Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.BatchDeleteImage(Amazon.ECRPublic.Model.BatchDeleteImageRequest)">
            <summary>
            Deletes a list of specified images within a repository in a public registry. Images
            are specified with either an <code>imageTag</code> or <code>imageDigest</code>.
            
             
            <para>
            You can remove a tag from an image by specifying the image's tag in your request.
            When you remove the last tag from an image, the image is deleted from your repository.
            </para>
             
            <para>
            You can completely delete an image (and all of its tags) by specifying the image's
            digest in your request.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the BatchDeleteImage service method.</param>
            
            <returns>The response from the BatchDeleteImage service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/BatchDeleteImage">REST API Reference for BatchDeleteImage Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.BatchDeleteImageAsync(Amazon.ECRPublic.Model.BatchDeleteImageRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes a list of specified images within a repository in a public registry. Images
            are specified with either an <code>imageTag</code> or <code>imageDigest</code>.
            
             
            <para>
            You can remove a tag from an image by specifying the image's tag in your request.
            When you remove the last tag from an image, the image is deleted from your repository.
            </para>
             
            <para>
            You can completely delete an image (and all of its tags) by specifying the image's
            digest in your request.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the BatchDeleteImage service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the BatchDeleteImage service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/BatchDeleteImage">REST API Reference for BatchDeleteImage Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.CompleteLayerUpload(Amazon.ECRPublic.Model.CompleteLayerUploadRequest)">
            <summary>
            Informs Amazon ECR that the image layer upload has completed for a specified public
            registry, repository name, and upload ID. You can optionally provide a <code>sha256</code>
            digest of the image layer for data validation purposes.
            
             
            <para>
            When an image is pushed, the CompleteLayerUpload API is called once per each new image
            layer to verify that the upload has completed.
            </para>
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy and is not generally used by customers
            for pulling and pushing images. In most cases, you should use the <code>docker</code>
            CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CompleteLayerUpload service method.</param>
            
            <returns>The response from the CompleteLayerUpload service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.EmptyUploadException">
            The specified layer upload does not contain any layer parts.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidLayerException">
            The layer digest calculation performed by Amazon ECR upon receipt of the image layer
            does not match the digest specified.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.LayerAlreadyExistsException">
            The image layer already exists in the associated repository.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.LayerPartTooSmallException">
            Layer parts must be at least 5 MiB in size.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RegistryNotFoundException">
            The registry does not exist.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UnsupportedCommandException">
            The action is not supported in this Region.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UploadNotFoundException">
            The upload could not be found, or the specified upload ID is not valid for this repository.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/CompleteLayerUpload">REST API Reference for CompleteLayerUpload Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.CompleteLayerUploadAsync(Amazon.ECRPublic.Model.CompleteLayerUploadRequest,System.Threading.CancellationToken)">
            <summary>
            Informs Amazon ECR that the image layer upload has completed for a specified public
            registry, repository name, and upload ID. You can optionally provide a <code>sha256</code>
            digest of the image layer for data validation purposes.
            
             
            <para>
            When an image is pushed, the CompleteLayerUpload API is called once per each new image
            layer to verify that the upload has completed.
            </para>
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy and is not generally used by customers
            for pulling and pushing images. In most cases, you should use the <code>docker</code>
            CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CompleteLayerUpload service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the CompleteLayerUpload service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.EmptyUploadException">
            The specified layer upload does not contain any layer parts.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidLayerException">
            The layer digest calculation performed by Amazon ECR upon receipt of the image layer
            does not match the digest specified.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.LayerAlreadyExistsException">
            The image layer already exists in the associated repository.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.LayerPartTooSmallException">
            Layer parts must be at least 5 MiB in size.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RegistryNotFoundException">
            The registry does not exist.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UnsupportedCommandException">
            The action is not supported in this Region.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UploadNotFoundException">
            The upload could not be found, or the specified upload ID is not valid for this repository.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/CompleteLayerUpload">REST API Reference for CompleteLayerUpload Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.CreateRepository(Amazon.ECRPublic.Model.CreateRepositoryRequest)">
            <summary>
            Creates a repository in a public registry. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/Repositories.html">Amazon
            ECR repositories</a> in the <i>Amazon Elastic Container Registry User Guide</i>.
            </summary>
            <param name="request">Container for the necessary parameters to execute the CreateRepository service method.</param>
            
            <returns>The response from the CreateRepository service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidTagParameterException">
            An invalid parameter has been specified. Tag keys can have a maximum character length
            of 128 characters, and tag values can have a maximum length of 256 characters.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.LimitExceededException">
            The operation did not succeed because it would have exceeded a service limit for your
            account. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/service-quotas.html">Amazon
            ECR Service Quotas</a> in the Amazon Elastic Container Registry User Guide.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryAlreadyExistsException">
            The specified repository already exists in the specified registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.TooManyTagsException">
            The list of tags on the repository is over the limit. The maximum number of tags that
            can be applied to a repository is 50.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/CreateRepository">REST API Reference for CreateRepository Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.CreateRepositoryAsync(Amazon.ECRPublic.Model.CreateRepositoryRequest,System.Threading.CancellationToken)">
            <summary>
            Creates a repository in a public registry. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/Repositories.html">Amazon
            ECR repositories</a> in the <i>Amazon Elastic Container Registry User Guide</i>.
            </summary>
            <param name="request">Container for the necessary parameters to execute the CreateRepository service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the CreateRepository service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidTagParameterException">
            An invalid parameter has been specified. Tag keys can have a maximum character length
            of 128 characters, and tag values can have a maximum length of 256 characters.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.LimitExceededException">
            The operation did not succeed because it would have exceeded a service limit for your
            account. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/service-quotas.html">Amazon
            ECR Service Quotas</a> in the Amazon Elastic Container Registry User Guide.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryAlreadyExistsException">
            The specified repository already exists in the specified registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.TooManyTagsException">
            The list of tags on the repository is over the limit. The maximum number of tags that
            can be applied to a repository is 50.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/CreateRepository">REST API Reference for CreateRepository Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.DeleteRepository(Amazon.ECRPublic.Model.DeleteRepositoryRequest)">
            <summary>
            Deletes a repository in a public registry. If the repository contains images, you
            must either delete all images in the repository or use the <code>force</code> option
            which deletes all images on your behalf before deleting the repository.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteRepository service method.</param>
            
            <returns>The response from the DeleteRepository service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotEmptyException">
            The specified repository contains images. To delete a repository that contains images,
            you must force the deletion with the <code>force</code> parameter.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/DeleteRepository">REST API Reference for DeleteRepository Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.DeleteRepositoryAsync(Amazon.ECRPublic.Model.DeleteRepositoryRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes a repository in a public registry. If the repository contains images, you
            must either delete all images in the repository or use the <code>force</code> option
            which deletes all images on your behalf before deleting the repository.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteRepository service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeleteRepository service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotEmptyException">
            The specified repository contains images. To delete a repository that contains images,
            you must force the deletion with the <code>force</code> parameter.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/DeleteRepository">REST API Reference for DeleteRepository Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.DeleteRepositoryPolicy(Amazon.ECRPublic.Model.DeleteRepositoryPolicyRequest)">
            <summary>
            Deletes the repository policy associated with the specified repository.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteRepositoryPolicy service method.</param>
            
            <returns>The response from the DeleteRepositoryPolicy service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryPolicyNotFoundException">
            The specified repository and registry combination does not have an associated repository
            policy.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/DeleteRepositoryPolicy">REST API Reference for DeleteRepositoryPolicy Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.DeleteRepositoryPolicyAsync(Amazon.ECRPublic.Model.DeleteRepositoryPolicyRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes the repository policy associated with the specified repository.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteRepositoryPolicy service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeleteRepositoryPolicy service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryPolicyNotFoundException">
            The specified repository and registry combination does not have an associated repository
            policy.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/DeleteRepositoryPolicy">REST API Reference for DeleteRepositoryPolicy Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.DescribeImages(Amazon.ECRPublic.Model.DescribeImagesRequest)">
            <summary>
            Returns metadata about the images in a repository in a public registry.
            
             <note> 
            <para>
            Beginning with Docker version 1.9, the Docker client compresses image layers before
            pushing them to a V2 Docker registry. The output of the <code>docker images</code>
            command shows the uncompressed image size, so it may return a larger image size than
            the image sizes returned by <a>DescribeImages</a>.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeImages service method.</param>
            
            <returns>The response from the DescribeImages service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.ImageNotFoundException">
            The image requested does not exist in the specified repository.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/DescribeImages">REST API Reference for DescribeImages Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.DescribeImagesAsync(Amazon.ECRPublic.Model.DescribeImagesRequest,System.Threading.CancellationToken)">
            <summary>
            Returns metadata about the images in a repository in a public registry.
            
             <note> 
            <para>
            Beginning with Docker version 1.9, the Docker client compresses image layers before
            pushing them to a V2 Docker registry. The output of the <code>docker images</code>
            command shows the uncompressed image size, so it may return a larger image size than
            the image sizes returned by <a>DescribeImages</a>.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeImages service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeImages service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.ImageNotFoundException">
            The image requested does not exist in the specified repository.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/DescribeImages">REST API Reference for DescribeImages Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.DescribeImageTags(Amazon.ECRPublic.Model.DescribeImageTagsRequest)">
            <summary>
            Returns the image tag details for a repository in a public registry.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeImageTags service method.</param>
            
            <returns>The response from the DescribeImageTags service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/DescribeImageTags">REST API Reference for DescribeImageTags Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.DescribeImageTagsAsync(Amazon.ECRPublic.Model.DescribeImageTagsRequest,System.Threading.CancellationToken)">
            <summary>
            Returns the image tag details for a repository in a public registry.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeImageTags service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeImageTags service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/DescribeImageTags">REST API Reference for DescribeImageTags Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.DescribeRegistries(Amazon.ECRPublic.Model.DescribeRegistriesRequest)">
            <summary>
            Returns details for a public registry.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeRegistries service method.</param>
            
            <returns>The response from the DescribeRegistries service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UnsupportedCommandException">
            The action is not supported in this Region.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/DescribeRegistries">REST API Reference for DescribeRegistries Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.DescribeRegistriesAsync(Amazon.ECRPublic.Model.DescribeRegistriesRequest,System.Threading.CancellationToken)">
            <summary>
            Returns details for a public registry.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeRegistries service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeRegistries service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UnsupportedCommandException">
            The action is not supported in this Region.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/DescribeRegistries">REST API Reference for DescribeRegistries Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.DescribeRepositories(Amazon.ECRPublic.Model.DescribeRepositoriesRequest)">
            <summary>
            Describes repositories in a public registry.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeRepositories service method.</param>
            
            <returns>The response from the DescribeRepositories service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/DescribeRepositories">REST API Reference for DescribeRepositories Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.DescribeRepositoriesAsync(Amazon.ECRPublic.Model.DescribeRepositoriesRequest,System.Threading.CancellationToken)">
            <summary>
            Describes repositories in a public registry.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeRepositories service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeRepositories service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/DescribeRepositories">REST API Reference for DescribeRepositories Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.GetAuthorizationToken(Amazon.ECRPublic.Model.GetAuthorizationTokenRequest)">
            <summary>
            Retrieves an authorization token. An authorization token represents your IAM authentication
            credentials and can be used to access any Amazon ECR registry that your IAM principal
            has access to. The authorization token is valid for 12 hours. This API requires the
            <code>ecr-public:GetAuthorizationToken</code> and <code>sts:GetServiceBearerToken</code>
            permissions.
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetAuthorizationToken service method.</param>
            
            <returns>The response from the GetAuthorizationToken service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/GetAuthorizationToken">REST API Reference for GetAuthorizationToken Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.GetAuthorizationTokenAsync(Amazon.ECRPublic.Model.GetAuthorizationTokenRequest,System.Threading.CancellationToken)">
            <summary>
            Retrieves an authorization token. An authorization token represents your IAM authentication
            credentials and can be used to access any Amazon ECR registry that your IAM principal
            has access to. The authorization token is valid for 12 hours. This API requires the
            <code>ecr-public:GetAuthorizationToken</code> and <code>sts:GetServiceBearerToken</code>
            permissions.
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetAuthorizationToken service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetAuthorizationToken service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/GetAuthorizationToken">REST API Reference for GetAuthorizationToken Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.GetRegistryCatalogData(Amazon.ECRPublic.Model.GetRegistryCatalogDataRequest)">
            <summary>
            Retrieves catalog metadata for a public registry.
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetRegistryCatalogData service method.</param>
            
            <returns>The response from the GetRegistryCatalogData service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UnsupportedCommandException">
            The action is not supported in this Region.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/GetRegistryCatalogData">REST API Reference for GetRegistryCatalogData Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.GetRegistryCatalogDataAsync(Amazon.ECRPublic.Model.GetRegistryCatalogDataRequest,System.Threading.CancellationToken)">
            <summary>
            Retrieves catalog metadata for a public registry.
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetRegistryCatalogData service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetRegistryCatalogData service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UnsupportedCommandException">
            The action is not supported in this Region.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/GetRegistryCatalogData">REST API Reference for GetRegistryCatalogData Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.GetRepositoryCatalogData(Amazon.ECRPublic.Model.GetRepositoryCatalogDataRequest)">
            <summary>
            Retrieve catalog metadata for a repository in a public registry. This metadata is
            displayed publicly in the Amazon ECR Public Gallery.
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetRepositoryCatalogData service method.</param>
            
            <returns>The response from the GetRepositoryCatalogData service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/GetRepositoryCatalogData">REST API Reference for GetRepositoryCatalogData Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.GetRepositoryCatalogDataAsync(Amazon.ECRPublic.Model.GetRepositoryCatalogDataRequest,System.Threading.CancellationToken)">
            <summary>
            Retrieve catalog metadata for a repository in a public registry. This metadata is
            displayed publicly in the Amazon ECR Public Gallery.
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetRepositoryCatalogData service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetRepositoryCatalogData service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/GetRepositoryCatalogData">REST API Reference for GetRepositoryCatalogData Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.GetRepositoryPolicy(Amazon.ECRPublic.Model.GetRepositoryPolicyRequest)">
            <summary>
            Retrieves the repository policy for the specified repository.
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetRepositoryPolicy service method.</param>
            
            <returns>The response from the GetRepositoryPolicy service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryPolicyNotFoundException">
            The specified repository and registry combination does not have an associated repository
            policy.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/GetRepositoryPolicy">REST API Reference for GetRepositoryPolicy Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.GetRepositoryPolicyAsync(Amazon.ECRPublic.Model.GetRepositoryPolicyRequest,System.Threading.CancellationToken)">
            <summary>
            Retrieves the repository policy for the specified repository.
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetRepositoryPolicy service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetRepositoryPolicy service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryPolicyNotFoundException">
            The specified repository and registry combination does not have an associated repository
            policy.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/GetRepositoryPolicy">REST API Reference for GetRepositoryPolicy Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.InitiateLayerUpload(Amazon.ECRPublic.Model.InitiateLayerUploadRequest)">
            <summary>
            Notifies Amazon ECR that you intend to upload an image layer.
            
             
            <para>
            When an image is pushed, the InitiateLayerUpload API is called once per image layer
            that has not already been uploaded. Whether or not an image layer has been uploaded
            is determined by the BatchCheckLayerAvailability API action.
            </para>
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy and is not generally used by customers
            for pulling and pushing images. In most cases, you should use the <code>docker</code>
            CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the InitiateLayerUpload service method.</param>
            
            <returns>The response from the InitiateLayerUpload service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RegistryNotFoundException">
            The registry does not exist.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UnsupportedCommandException">
            The action is not supported in this Region.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/InitiateLayerUpload">REST API Reference for InitiateLayerUpload Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.InitiateLayerUploadAsync(Amazon.ECRPublic.Model.InitiateLayerUploadRequest,System.Threading.CancellationToken)">
            <summary>
            Notifies Amazon ECR that you intend to upload an image layer.
            
             
            <para>
            When an image is pushed, the InitiateLayerUpload API is called once per image layer
            that has not already been uploaded. Whether or not an image layer has been uploaded
            is determined by the BatchCheckLayerAvailability API action.
            </para>
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy and is not generally used by customers
            for pulling and pushing images. In most cases, you should use the <code>docker</code>
            CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the InitiateLayerUpload service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the InitiateLayerUpload service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RegistryNotFoundException">
            The registry does not exist.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UnsupportedCommandException">
            The action is not supported in this Region.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/InitiateLayerUpload">REST API Reference for InitiateLayerUpload Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.ListTagsForResource(Amazon.ECRPublic.Model.ListTagsForResourceRequest)">
            <summary>
            List the tags for an Amazon ECR Public resource.
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListTagsForResource service method.</param>
            
            <returns>The response from the ListTagsForResource service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/ListTagsForResource">REST API Reference for ListTagsForResource Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.ListTagsForResourceAsync(Amazon.ECRPublic.Model.ListTagsForResourceRequest,System.Threading.CancellationToken)">
            <summary>
            List the tags for an Amazon ECR Public resource.
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListTagsForResource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListTagsForResource service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/ListTagsForResource">REST API Reference for ListTagsForResource Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.PutImage(Amazon.ECRPublic.Model.PutImageRequest)">
            <summary>
            Creates or updates the image manifest and tags associated with an image.
            
             
            <para>
            When an image is pushed and all new image layers have been uploaded, the PutImage
            API is called once to create or update the image manifest and the tags associated
            with the image.
            </para>
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy and is not generally used by customers
            for pulling and pushing images. In most cases, you should use the <code>docker</code>
            CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutImage service method.</param>
            
            <returns>The response from the PutImage service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.ImageAlreadyExistsException">
            The specified image has already been pushed, and there were no changes to the manifest
            or image tag after the last push.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ImageDigestDoesNotMatchException">
            The specified image digest does not match the digest that Amazon ECR calculated for
            the image.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ImageTagAlreadyExistsException">
            The specified image is tagged with a tag that already exists. The repository is configured
            for tag immutability.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.LayersNotFoundException">
            The specified layers could not be found, or the specified layer is not valid for this
            repository.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.LimitExceededException">
            The operation did not succeed because it would have exceeded a service limit for your
            account. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/service-quotas.html">Amazon
            ECR Service Quotas</a> in the Amazon Elastic Container Registry User Guide.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ReferencedImagesNotFoundException">
            The manifest list is referencing an image that does not exist.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RegistryNotFoundException">
            The registry does not exist.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UnsupportedCommandException">
            The action is not supported in this Region.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/PutImage">REST API Reference for PutImage Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.PutImageAsync(Amazon.ECRPublic.Model.PutImageRequest,System.Threading.CancellationToken)">
            <summary>
            Creates or updates the image manifest and tags associated with an image.
            
             
            <para>
            When an image is pushed and all new image layers have been uploaded, the PutImage
            API is called once to create or update the image manifest and the tags associated
            with the image.
            </para>
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy and is not generally used by customers
            for pulling and pushing images. In most cases, you should use the <code>docker</code>
            CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutImage service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutImage service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.ImageAlreadyExistsException">
            The specified image has already been pushed, and there were no changes to the manifest
            or image tag after the last push.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ImageDigestDoesNotMatchException">
            The specified image digest does not match the digest that Amazon ECR calculated for
            the image.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ImageTagAlreadyExistsException">
            The specified image is tagged with a tag that already exists. The repository is configured
            for tag immutability.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.LayersNotFoundException">
            The specified layers could not be found, or the specified layer is not valid for this
            repository.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.LimitExceededException">
            The operation did not succeed because it would have exceeded a service limit for your
            account. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/service-quotas.html">Amazon
            ECR Service Quotas</a> in the Amazon Elastic Container Registry User Guide.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ReferencedImagesNotFoundException">
            The manifest list is referencing an image that does not exist.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RegistryNotFoundException">
            The registry does not exist.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UnsupportedCommandException">
            The action is not supported in this Region.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/PutImage">REST API Reference for PutImage Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.PutRegistryCatalogData(Amazon.ECRPublic.Model.PutRegistryCatalogDataRequest)">
            <summary>
            Create or updates the catalog data for a public registry.
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutRegistryCatalogData service method.</param>
            
            <returns>The response from the PutRegistryCatalogData service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UnsupportedCommandException">
            The action is not supported in this Region.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/PutRegistryCatalogData">REST API Reference for PutRegistryCatalogData Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.PutRegistryCatalogDataAsync(Amazon.ECRPublic.Model.PutRegistryCatalogDataRequest,System.Threading.CancellationToken)">
            <summary>
            Create or updates the catalog data for a public registry.
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutRegistryCatalogData service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutRegistryCatalogData service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UnsupportedCommandException">
            The action is not supported in this Region.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/PutRegistryCatalogData">REST API Reference for PutRegistryCatalogData Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.PutRepositoryCatalogData(Amazon.ECRPublic.Model.PutRepositoryCatalogDataRequest)">
            <summary>
            Creates or updates the catalog data for a repository in a public registry.
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutRepositoryCatalogData service method.</param>
            
            <returns>The response from the PutRepositoryCatalogData service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/PutRepositoryCatalogData">REST API Reference for PutRepositoryCatalogData Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.PutRepositoryCatalogDataAsync(Amazon.ECRPublic.Model.PutRepositoryCatalogDataRequest,System.Threading.CancellationToken)">
            <summary>
            Creates or updates the catalog data for a repository in a public registry.
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutRepositoryCatalogData service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutRepositoryCatalogData service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/PutRepositoryCatalogData">REST API Reference for PutRepositoryCatalogData Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.SetRepositoryPolicy(Amazon.ECRPublic.Model.SetRepositoryPolicyRequest)">
            <summary>
            Applies a repository policy to the specified public repository to control access permissions.
            For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policies.html">Amazon
            ECR Repository Policies</a> in the <i>Amazon Elastic Container Registry User Guide</i>.
            </summary>
            <param name="request">Container for the necessary parameters to execute the SetRepositoryPolicy service method.</param>
            
            <returns>The response from the SetRepositoryPolicy service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/SetRepositoryPolicy">REST API Reference for SetRepositoryPolicy Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.SetRepositoryPolicyAsync(Amazon.ECRPublic.Model.SetRepositoryPolicyRequest,System.Threading.CancellationToken)">
            <summary>
            Applies a repository policy to the specified public repository to control access permissions.
            For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policies.html">Amazon
            ECR Repository Policies</a> in the <i>Amazon Elastic Container Registry User Guide</i>.
            </summary>
            <param name="request">Container for the necessary parameters to execute the SetRepositoryPolicy service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the SetRepositoryPolicy service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/SetRepositoryPolicy">REST API Reference for SetRepositoryPolicy Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.TagResource(Amazon.ECRPublic.Model.TagResourceRequest)">
            <summary>
            Associates the specified tags to a resource with the specified <code>resourceArn</code>.
            If existing tags on a resource are not specified in the request parameters, they are
            not changed. When a resource is deleted, the tags associated with that resource are
            deleted as well.
            </summary>
            <param name="request">Container for the necessary parameters to execute the TagResource service method.</param>
            
            <returns>The response from the TagResource service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidTagParameterException">
            An invalid parameter has been specified. Tag keys can have a maximum character length
            of 128 characters, and tag values can have a maximum length of 256 characters.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.TooManyTagsException">
            The list of tags on the repository is over the limit. The maximum number of tags that
            can be applied to a repository is 50.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/TagResource">REST API Reference for TagResource Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.TagResourceAsync(Amazon.ECRPublic.Model.TagResourceRequest,System.Threading.CancellationToken)">
            <summary>
            Associates the specified tags to a resource with the specified <code>resourceArn</code>.
            If existing tags on a resource are not specified in the request parameters, they are
            not changed. When a resource is deleted, the tags associated with that resource are
            deleted as well.
            </summary>
            <param name="request">Container for the necessary parameters to execute the TagResource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the TagResource service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidTagParameterException">
            An invalid parameter has been specified. Tag keys can have a maximum character length
            of 128 characters, and tag values can have a maximum length of 256 characters.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.TooManyTagsException">
            The list of tags on the repository is over the limit. The maximum number of tags that
            can be applied to a repository is 50.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/TagResource">REST API Reference for TagResource Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.UntagResource(Amazon.ECRPublic.Model.UntagResourceRequest)">
            <summary>
            Deletes specified tags from a resource.
            </summary>
            <param name="request">Container for the necessary parameters to execute the UntagResource service method.</param>
            
            <returns>The response from the UntagResource service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidTagParameterException">
            An invalid parameter has been specified. Tag keys can have a maximum character length
            of 128 characters, and tag values can have a maximum length of 256 characters.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.TooManyTagsException">
            The list of tags on the repository is over the limit. The maximum number of tags that
            can be applied to a repository is 50.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/UntagResource">REST API Reference for UntagResource Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.UntagResourceAsync(Amazon.ECRPublic.Model.UntagResourceRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes specified tags from a resource.
            </summary>
            <param name="request">Container for the necessary parameters to execute the UntagResource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the UntagResource service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidTagParameterException">
            An invalid parameter has been specified. Tag keys can have a maximum character length
            of 128 characters, and tag values can have a maximum length of 256 characters.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.TooManyTagsException">
            The list of tags on the repository is over the limit. The maximum number of tags that
            can be applied to a repository is 50.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/UntagResource">REST API Reference for UntagResource Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.UploadLayerPart(Amazon.ECRPublic.Model.UploadLayerPartRequest)">
            <summary>
            Uploads an image layer part to Amazon ECR.
            
             
            <para>
            When an image is pushed, each new image layer is uploaded in parts. The maximum size
            of each image layer part can be 20971520 bytes (or about 20MB). The UploadLayerPart
            API is called once per each new image layer part.
            </para>
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy and is not generally used by customers
            for pulling and pushing images. In most cases, you should use the <code>docker</code>
            CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the UploadLayerPart service method.</param>
            
            <returns>The response from the UploadLayerPart service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidLayerPartException">
            The layer part size is not valid, or the first byte specified is not consecutive to
            the last byte of a previous layer part upload.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.LimitExceededException">
            The operation did not succeed because it would have exceeded a service limit for your
            account. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/service-quotas.html">Amazon
            ECR Service Quotas</a> in the Amazon Elastic Container Registry User Guide.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RegistryNotFoundException">
            The registry does not exist.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UnsupportedCommandException">
            The action is not supported in this Region.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UploadNotFoundException">
            The upload could not be found, or the specified upload ID is not valid for this repository.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/UploadLayerPart">REST API Reference for UploadLayerPart Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.AmazonECRPublicClient.UploadLayerPartAsync(Amazon.ECRPublic.Model.UploadLayerPartRequest,System.Threading.CancellationToken)">
            <summary>
            Uploads an image layer part to Amazon ECR.
            
             
            <para>
            When an image is pushed, each new image layer is uploaded in parts. The maximum size
            of each image layer part can be 20971520 bytes (or about 20MB). The UploadLayerPart
            API is called once per each new image layer part.
            </para>
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy and is not generally used by customers
            for pulling and pushing images. In most cases, you should use the <code>docker</code>
            CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the UploadLayerPart service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the UploadLayerPart service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidLayerPartException">
            The layer part size is not valid, or the first byte specified is not consecutive to
            the last byte of a previous layer part upload.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.LimitExceededException">
            The operation did not succeed because it would have exceeded a service limit for your
            account. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/service-quotas.html">Amazon
            ECR Service Quotas</a> in the Amazon Elastic Container Registry User Guide.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RegistryNotFoundException">
            The registry does not exist.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UnsupportedCommandException">
            The action is not supported in this Region.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UploadNotFoundException">
            The upload could not be found, or the specified upload ID is not valid for this repository.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/UploadLayerPart">REST API Reference for UploadLayerPart Operation</seealso>
        </member>
        <member name="T:Amazon.ECRPublic.IAmazonECRPublic">
             <summary>
             Interface for accessing ECRPublic
            
             Amazon Elastic Container Registry Public 
             <para>
             Amazon Elastic Container Registry (Amazon ECR) is a managed container image registry
             service. Amazon ECR provides both public and private registries to host your container
             images. You can use the familiar Docker CLI, or their preferred client, to push, pull,
             and manage images. Amazon ECR provides a secure, scalable, and reliable registry for
             your Docker or Open Container Initiative (OCI) images. Amazon ECR supports public
             repositories with this API. For information about the Amazon ECR API for private repositories,
             see <a href="https://docs.aws.amazon.com/AmazonECR/latest/APIReference/Welcome.html">Amazon
             Elastic Container Registry API Reference</a>.
             </para>
             </summary>
        </member>
        <member name="P:Amazon.ECRPublic.IAmazonECRPublic.Paginators">
            <summary>
            Paginators for the service
            </summary>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.BatchCheckLayerAvailability(Amazon.ECRPublic.Model.BatchCheckLayerAvailabilityRequest)">
            <summary>
            Checks the availability of one or more image layers within a repository in a public
            registry. When an image is pushed to a repository, each image layer is checked to
            verify if it has been uploaded before. If it has been uploaded, then the image layer
            is skipped.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy and is not generally used by customers
            for pulling and pushing images. In most cases, you should use the <code>docker</code>
            CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the BatchCheckLayerAvailability service method.</param>
            
            <returns>The response from the BatchCheckLayerAvailability service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RegistryNotFoundException">
            The registry does not exist.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/BatchCheckLayerAvailability">REST API Reference for BatchCheckLayerAvailability Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.BatchCheckLayerAvailabilityAsync(Amazon.ECRPublic.Model.BatchCheckLayerAvailabilityRequest,System.Threading.CancellationToken)">
            <summary>
            Checks the availability of one or more image layers within a repository in a public
            registry. When an image is pushed to a repository, each image layer is checked to
            verify if it has been uploaded before. If it has been uploaded, then the image layer
            is skipped.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy and is not generally used by customers
            for pulling and pushing images. In most cases, you should use the <code>docker</code>
            CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the BatchCheckLayerAvailability service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the BatchCheckLayerAvailability service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RegistryNotFoundException">
            The registry does not exist.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/BatchCheckLayerAvailability">REST API Reference for BatchCheckLayerAvailability Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.BatchDeleteImage(Amazon.ECRPublic.Model.BatchDeleteImageRequest)">
            <summary>
            Deletes a list of specified images within a repository in a public registry. Images
            are specified with either an <code>imageTag</code> or <code>imageDigest</code>.
            
             
            <para>
            You can remove a tag from an image by specifying the image's tag in your request.
            When you remove the last tag from an image, the image is deleted from your repository.
            </para>
             
            <para>
            You can completely delete an image (and all of its tags) by specifying the image's
            digest in your request.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the BatchDeleteImage service method.</param>
            
            <returns>The response from the BatchDeleteImage service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/BatchDeleteImage">REST API Reference for BatchDeleteImage Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.BatchDeleteImageAsync(Amazon.ECRPublic.Model.BatchDeleteImageRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes a list of specified images within a repository in a public registry. Images
            are specified with either an <code>imageTag</code> or <code>imageDigest</code>.
            
             
            <para>
            You can remove a tag from an image by specifying the image's tag in your request.
            When you remove the last tag from an image, the image is deleted from your repository.
            </para>
             
            <para>
            You can completely delete an image (and all of its tags) by specifying the image's
            digest in your request.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the BatchDeleteImage service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the BatchDeleteImage service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/BatchDeleteImage">REST API Reference for BatchDeleteImage Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.CompleteLayerUpload(Amazon.ECRPublic.Model.CompleteLayerUploadRequest)">
            <summary>
            Informs Amazon ECR that the image layer upload has completed for a specified public
            registry, repository name, and upload ID. You can optionally provide a <code>sha256</code>
            digest of the image layer for data validation purposes.
            
             
            <para>
            When an image is pushed, the CompleteLayerUpload API is called once per each new image
            layer to verify that the upload has completed.
            </para>
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy and is not generally used by customers
            for pulling and pushing images. In most cases, you should use the <code>docker</code>
            CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CompleteLayerUpload service method.</param>
            
            <returns>The response from the CompleteLayerUpload service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.EmptyUploadException">
            The specified layer upload does not contain any layer parts.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidLayerException">
            The layer digest calculation performed by Amazon ECR upon receipt of the image layer
            does not match the digest specified.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.LayerAlreadyExistsException">
            The image layer already exists in the associated repository.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.LayerPartTooSmallException">
            Layer parts must be at least 5 MiB in size.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RegistryNotFoundException">
            The registry does not exist.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UnsupportedCommandException">
            The action is not supported in this Region.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UploadNotFoundException">
            The upload could not be found, or the specified upload ID is not valid for this repository.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/CompleteLayerUpload">REST API Reference for CompleteLayerUpload Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.CompleteLayerUploadAsync(Amazon.ECRPublic.Model.CompleteLayerUploadRequest,System.Threading.CancellationToken)">
            <summary>
            Informs Amazon ECR that the image layer upload has completed for a specified public
            registry, repository name, and upload ID. You can optionally provide a <code>sha256</code>
            digest of the image layer for data validation purposes.
            
             
            <para>
            When an image is pushed, the CompleteLayerUpload API is called once per each new image
            layer to verify that the upload has completed.
            </para>
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy and is not generally used by customers
            for pulling and pushing images. In most cases, you should use the <code>docker</code>
            CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CompleteLayerUpload service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the CompleteLayerUpload service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.EmptyUploadException">
            The specified layer upload does not contain any layer parts.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidLayerException">
            The layer digest calculation performed by Amazon ECR upon receipt of the image layer
            does not match the digest specified.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.LayerAlreadyExistsException">
            The image layer already exists in the associated repository.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.LayerPartTooSmallException">
            Layer parts must be at least 5 MiB in size.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RegistryNotFoundException">
            The registry does not exist.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UnsupportedCommandException">
            The action is not supported in this Region.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UploadNotFoundException">
            The upload could not be found, or the specified upload ID is not valid for this repository.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/CompleteLayerUpload">REST API Reference for CompleteLayerUpload Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.CreateRepository(Amazon.ECRPublic.Model.CreateRepositoryRequest)">
            <summary>
            Creates a repository in a public registry. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/Repositories.html">Amazon
            ECR repositories</a> in the <i>Amazon Elastic Container Registry User Guide</i>.
            </summary>
            <param name="request">Container for the necessary parameters to execute the CreateRepository service method.</param>
            
            <returns>The response from the CreateRepository service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidTagParameterException">
            An invalid parameter has been specified. Tag keys can have a maximum character length
            of 128 characters, and tag values can have a maximum length of 256 characters.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.LimitExceededException">
            The operation did not succeed because it would have exceeded a service limit for your
            account. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/service-quotas.html">Amazon
            ECR Service Quotas</a> in the Amazon Elastic Container Registry User Guide.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryAlreadyExistsException">
            The specified repository already exists in the specified registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.TooManyTagsException">
            The list of tags on the repository is over the limit. The maximum number of tags that
            can be applied to a repository is 50.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/CreateRepository">REST API Reference for CreateRepository Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.CreateRepositoryAsync(Amazon.ECRPublic.Model.CreateRepositoryRequest,System.Threading.CancellationToken)">
            <summary>
            Creates a repository in a public registry. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/Repositories.html">Amazon
            ECR repositories</a> in the <i>Amazon Elastic Container Registry User Guide</i>.
            </summary>
            <param name="request">Container for the necessary parameters to execute the CreateRepository service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the CreateRepository service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidTagParameterException">
            An invalid parameter has been specified. Tag keys can have a maximum character length
            of 128 characters, and tag values can have a maximum length of 256 characters.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.LimitExceededException">
            The operation did not succeed because it would have exceeded a service limit for your
            account. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/service-quotas.html">Amazon
            ECR Service Quotas</a> in the Amazon Elastic Container Registry User Guide.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryAlreadyExistsException">
            The specified repository already exists in the specified registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.TooManyTagsException">
            The list of tags on the repository is over the limit. The maximum number of tags that
            can be applied to a repository is 50.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/CreateRepository">REST API Reference for CreateRepository Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.DeleteRepository(Amazon.ECRPublic.Model.DeleteRepositoryRequest)">
            <summary>
            Deletes a repository in a public registry. If the repository contains images, you
            must either delete all images in the repository or use the <code>force</code> option
            which deletes all images on your behalf before deleting the repository.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteRepository service method.</param>
            
            <returns>The response from the DeleteRepository service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotEmptyException">
            The specified repository contains images. To delete a repository that contains images,
            you must force the deletion with the <code>force</code> parameter.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/DeleteRepository">REST API Reference for DeleteRepository Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.DeleteRepositoryAsync(Amazon.ECRPublic.Model.DeleteRepositoryRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes a repository in a public registry. If the repository contains images, you
            must either delete all images in the repository or use the <code>force</code> option
            which deletes all images on your behalf before deleting the repository.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteRepository service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeleteRepository service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotEmptyException">
            The specified repository contains images. To delete a repository that contains images,
            you must force the deletion with the <code>force</code> parameter.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/DeleteRepository">REST API Reference for DeleteRepository Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.DeleteRepositoryPolicy(Amazon.ECRPublic.Model.DeleteRepositoryPolicyRequest)">
            <summary>
            Deletes the repository policy associated with the specified repository.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteRepositoryPolicy service method.</param>
            
            <returns>The response from the DeleteRepositoryPolicy service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryPolicyNotFoundException">
            The specified repository and registry combination does not have an associated repository
            policy.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/DeleteRepositoryPolicy">REST API Reference for DeleteRepositoryPolicy Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.DeleteRepositoryPolicyAsync(Amazon.ECRPublic.Model.DeleteRepositoryPolicyRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes the repository policy associated with the specified repository.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteRepositoryPolicy service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeleteRepositoryPolicy service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryPolicyNotFoundException">
            The specified repository and registry combination does not have an associated repository
            policy.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/DeleteRepositoryPolicy">REST API Reference for DeleteRepositoryPolicy Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.DescribeImages(Amazon.ECRPublic.Model.DescribeImagesRequest)">
            <summary>
            Returns metadata about the images in a repository in a public registry.
            
             <note> 
            <para>
            Beginning with Docker version 1.9, the Docker client compresses image layers before
            pushing them to a V2 Docker registry. The output of the <code>docker images</code>
            command shows the uncompressed image size, so it may return a larger image size than
            the image sizes returned by <a>DescribeImages</a>.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeImages service method.</param>
            
            <returns>The response from the DescribeImages service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.ImageNotFoundException">
            The image requested does not exist in the specified repository.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/DescribeImages">REST API Reference for DescribeImages Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.DescribeImagesAsync(Amazon.ECRPublic.Model.DescribeImagesRequest,System.Threading.CancellationToken)">
            <summary>
            Returns metadata about the images in a repository in a public registry.
            
             <note> 
            <para>
            Beginning with Docker version 1.9, the Docker client compresses image layers before
            pushing them to a V2 Docker registry. The output of the <code>docker images</code>
            command shows the uncompressed image size, so it may return a larger image size than
            the image sizes returned by <a>DescribeImages</a>.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeImages service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeImages service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.ImageNotFoundException">
            The image requested does not exist in the specified repository.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/DescribeImages">REST API Reference for DescribeImages Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.DescribeImageTags(Amazon.ECRPublic.Model.DescribeImageTagsRequest)">
            <summary>
            Returns the image tag details for a repository in a public registry.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeImageTags service method.</param>
            
            <returns>The response from the DescribeImageTags service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/DescribeImageTags">REST API Reference for DescribeImageTags Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.DescribeImageTagsAsync(Amazon.ECRPublic.Model.DescribeImageTagsRequest,System.Threading.CancellationToken)">
            <summary>
            Returns the image tag details for a repository in a public registry.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeImageTags service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeImageTags service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/DescribeImageTags">REST API Reference for DescribeImageTags Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.DescribeRegistries(Amazon.ECRPublic.Model.DescribeRegistriesRequest)">
            <summary>
            Returns details for a public registry.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeRegistries service method.</param>
            
            <returns>The response from the DescribeRegistries service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UnsupportedCommandException">
            The action is not supported in this Region.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/DescribeRegistries">REST API Reference for DescribeRegistries Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.DescribeRegistriesAsync(Amazon.ECRPublic.Model.DescribeRegistriesRequest,System.Threading.CancellationToken)">
            <summary>
            Returns details for a public registry.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeRegistries service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeRegistries service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UnsupportedCommandException">
            The action is not supported in this Region.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/DescribeRegistries">REST API Reference for DescribeRegistries Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.DescribeRepositories(Amazon.ECRPublic.Model.DescribeRepositoriesRequest)">
            <summary>
            Describes repositories in a public registry.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeRepositories service method.</param>
            
            <returns>The response from the DescribeRepositories service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/DescribeRepositories">REST API Reference for DescribeRepositories Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.DescribeRepositoriesAsync(Amazon.ECRPublic.Model.DescribeRepositoriesRequest,System.Threading.CancellationToken)">
            <summary>
            Describes repositories in a public registry.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeRepositories service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeRepositories service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/DescribeRepositories">REST API Reference for DescribeRepositories Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.GetAuthorizationToken(Amazon.ECRPublic.Model.GetAuthorizationTokenRequest)">
            <summary>
            Retrieves an authorization token. An authorization token represents your IAM authentication
            credentials and can be used to access any Amazon ECR registry that your IAM principal
            has access to. The authorization token is valid for 12 hours. This API requires the
            <code>ecr-public:GetAuthorizationToken</code> and <code>sts:GetServiceBearerToken</code>
            permissions.
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetAuthorizationToken service method.</param>
            
            <returns>The response from the GetAuthorizationToken service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/GetAuthorizationToken">REST API Reference for GetAuthorizationToken Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.GetAuthorizationTokenAsync(Amazon.ECRPublic.Model.GetAuthorizationTokenRequest,System.Threading.CancellationToken)">
            <summary>
            Retrieves an authorization token. An authorization token represents your IAM authentication
            credentials and can be used to access any Amazon ECR registry that your IAM principal
            has access to. The authorization token is valid for 12 hours. This API requires the
            <code>ecr-public:GetAuthorizationToken</code> and <code>sts:GetServiceBearerToken</code>
            permissions.
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetAuthorizationToken service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetAuthorizationToken service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/GetAuthorizationToken">REST API Reference for GetAuthorizationToken Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.GetRegistryCatalogData(Amazon.ECRPublic.Model.GetRegistryCatalogDataRequest)">
            <summary>
            Retrieves catalog metadata for a public registry.
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetRegistryCatalogData service method.</param>
            
            <returns>The response from the GetRegistryCatalogData service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UnsupportedCommandException">
            The action is not supported in this Region.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/GetRegistryCatalogData">REST API Reference for GetRegistryCatalogData Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.GetRegistryCatalogDataAsync(Amazon.ECRPublic.Model.GetRegistryCatalogDataRequest,System.Threading.CancellationToken)">
            <summary>
            Retrieves catalog metadata for a public registry.
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetRegistryCatalogData service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetRegistryCatalogData service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UnsupportedCommandException">
            The action is not supported in this Region.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/GetRegistryCatalogData">REST API Reference for GetRegistryCatalogData Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.GetRepositoryCatalogData(Amazon.ECRPublic.Model.GetRepositoryCatalogDataRequest)">
            <summary>
            Retrieve catalog metadata for a repository in a public registry. This metadata is
            displayed publicly in the Amazon ECR Public Gallery.
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetRepositoryCatalogData service method.</param>
            
            <returns>The response from the GetRepositoryCatalogData service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/GetRepositoryCatalogData">REST API Reference for GetRepositoryCatalogData Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.GetRepositoryCatalogDataAsync(Amazon.ECRPublic.Model.GetRepositoryCatalogDataRequest,System.Threading.CancellationToken)">
            <summary>
            Retrieve catalog metadata for a repository in a public registry. This metadata is
            displayed publicly in the Amazon ECR Public Gallery.
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetRepositoryCatalogData service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetRepositoryCatalogData service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/GetRepositoryCatalogData">REST API Reference for GetRepositoryCatalogData Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.GetRepositoryPolicy(Amazon.ECRPublic.Model.GetRepositoryPolicyRequest)">
            <summary>
            Retrieves the repository policy for the specified repository.
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetRepositoryPolicy service method.</param>
            
            <returns>The response from the GetRepositoryPolicy service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryPolicyNotFoundException">
            The specified repository and registry combination does not have an associated repository
            policy.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/GetRepositoryPolicy">REST API Reference for GetRepositoryPolicy Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.GetRepositoryPolicyAsync(Amazon.ECRPublic.Model.GetRepositoryPolicyRequest,System.Threading.CancellationToken)">
            <summary>
            Retrieves the repository policy for the specified repository.
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetRepositoryPolicy service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetRepositoryPolicy service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryPolicyNotFoundException">
            The specified repository and registry combination does not have an associated repository
            policy.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/GetRepositoryPolicy">REST API Reference for GetRepositoryPolicy Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.InitiateLayerUpload(Amazon.ECRPublic.Model.InitiateLayerUploadRequest)">
            <summary>
            Notifies Amazon ECR that you intend to upload an image layer.
            
             
            <para>
            When an image is pushed, the InitiateLayerUpload API is called once per image layer
            that has not already been uploaded. Whether or not an image layer has been uploaded
            is determined by the BatchCheckLayerAvailability API action.
            </para>
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy and is not generally used by customers
            for pulling and pushing images. In most cases, you should use the <code>docker</code>
            CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the InitiateLayerUpload service method.</param>
            
            <returns>The response from the InitiateLayerUpload service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RegistryNotFoundException">
            The registry does not exist.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UnsupportedCommandException">
            The action is not supported in this Region.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/InitiateLayerUpload">REST API Reference for InitiateLayerUpload Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.InitiateLayerUploadAsync(Amazon.ECRPublic.Model.InitiateLayerUploadRequest,System.Threading.CancellationToken)">
            <summary>
            Notifies Amazon ECR that you intend to upload an image layer.
            
             
            <para>
            When an image is pushed, the InitiateLayerUpload API is called once per image layer
            that has not already been uploaded. Whether or not an image layer has been uploaded
            is determined by the BatchCheckLayerAvailability API action.
            </para>
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy and is not generally used by customers
            for pulling and pushing images. In most cases, you should use the <code>docker</code>
            CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the InitiateLayerUpload service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the InitiateLayerUpload service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RegistryNotFoundException">
            The registry does not exist.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UnsupportedCommandException">
            The action is not supported in this Region.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/InitiateLayerUpload">REST API Reference for InitiateLayerUpload Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.ListTagsForResource(Amazon.ECRPublic.Model.ListTagsForResourceRequest)">
            <summary>
            List the tags for an Amazon ECR Public resource.
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListTagsForResource service method.</param>
            
            <returns>The response from the ListTagsForResource service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/ListTagsForResource">REST API Reference for ListTagsForResource Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.ListTagsForResourceAsync(Amazon.ECRPublic.Model.ListTagsForResourceRequest,System.Threading.CancellationToken)">
            <summary>
            List the tags for an Amazon ECR Public resource.
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListTagsForResource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListTagsForResource service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/ListTagsForResource">REST API Reference for ListTagsForResource Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.PutImage(Amazon.ECRPublic.Model.PutImageRequest)">
            <summary>
            Creates or updates the image manifest and tags associated with an image.
            
             
            <para>
            When an image is pushed and all new image layers have been uploaded, the PutImage
            API is called once to create or update the image manifest and the tags associated
            with the image.
            </para>
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy and is not generally used by customers
            for pulling and pushing images. In most cases, you should use the <code>docker</code>
            CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutImage service method.</param>
            
            <returns>The response from the PutImage service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.ImageAlreadyExistsException">
            The specified image has already been pushed, and there were no changes to the manifest
            or image tag after the last push.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ImageDigestDoesNotMatchException">
            The specified image digest does not match the digest that Amazon ECR calculated for
            the image.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ImageTagAlreadyExistsException">
            The specified image is tagged with a tag that already exists. The repository is configured
            for tag immutability.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.LayersNotFoundException">
            The specified layers could not be found, or the specified layer is not valid for this
            repository.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.LimitExceededException">
            The operation did not succeed because it would have exceeded a service limit for your
            account. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/service-quotas.html">Amazon
            ECR Service Quotas</a> in the Amazon Elastic Container Registry User Guide.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ReferencedImagesNotFoundException">
            The manifest list is referencing an image that does not exist.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RegistryNotFoundException">
            The registry does not exist.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UnsupportedCommandException">
            The action is not supported in this Region.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/PutImage">REST API Reference for PutImage Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.PutImageAsync(Amazon.ECRPublic.Model.PutImageRequest,System.Threading.CancellationToken)">
            <summary>
            Creates or updates the image manifest and tags associated with an image.
            
             
            <para>
            When an image is pushed and all new image layers have been uploaded, the PutImage
            API is called once to create or update the image manifest and the tags associated
            with the image.
            </para>
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy and is not generally used by customers
            for pulling and pushing images. In most cases, you should use the <code>docker</code>
            CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutImage service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutImage service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.ImageAlreadyExistsException">
            The specified image has already been pushed, and there were no changes to the manifest
            or image tag after the last push.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ImageDigestDoesNotMatchException">
            The specified image digest does not match the digest that Amazon ECR calculated for
            the image.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ImageTagAlreadyExistsException">
            The specified image is tagged with a tag that already exists. The repository is configured
            for tag immutability.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.LayersNotFoundException">
            The specified layers could not be found, or the specified layer is not valid for this
            repository.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.LimitExceededException">
            The operation did not succeed because it would have exceeded a service limit for your
            account. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/service-quotas.html">Amazon
            ECR Service Quotas</a> in the Amazon Elastic Container Registry User Guide.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ReferencedImagesNotFoundException">
            The manifest list is referencing an image that does not exist.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RegistryNotFoundException">
            The registry does not exist.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UnsupportedCommandException">
            The action is not supported in this Region.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/PutImage">REST API Reference for PutImage Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.PutRegistryCatalogData(Amazon.ECRPublic.Model.PutRegistryCatalogDataRequest)">
            <summary>
            Create or updates the catalog data for a public registry.
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutRegistryCatalogData service method.</param>
            
            <returns>The response from the PutRegistryCatalogData service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UnsupportedCommandException">
            The action is not supported in this Region.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/PutRegistryCatalogData">REST API Reference for PutRegistryCatalogData Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.PutRegistryCatalogDataAsync(Amazon.ECRPublic.Model.PutRegistryCatalogDataRequest,System.Threading.CancellationToken)">
            <summary>
            Create or updates the catalog data for a public registry.
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutRegistryCatalogData service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutRegistryCatalogData service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UnsupportedCommandException">
            The action is not supported in this Region.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/PutRegistryCatalogData">REST API Reference for PutRegistryCatalogData Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.PutRepositoryCatalogData(Amazon.ECRPublic.Model.PutRepositoryCatalogDataRequest)">
            <summary>
            Creates or updates the catalog data for a repository in a public registry.
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutRepositoryCatalogData service method.</param>
            
            <returns>The response from the PutRepositoryCatalogData service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/PutRepositoryCatalogData">REST API Reference for PutRepositoryCatalogData Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.PutRepositoryCatalogDataAsync(Amazon.ECRPublic.Model.PutRepositoryCatalogDataRequest,System.Threading.CancellationToken)">
            <summary>
            Creates or updates the catalog data for a repository in a public registry.
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutRepositoryCatalogData service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutRepositoryCatalogData service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/PutRepositoryCatalogData">REST API Reference for PutRepositoryCatalogData Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.SetRepositoryPolicy(Amazon.ECRPublic.Model.SetRepositoryPolicyRequest)">
            <summary>
            Applies a repository policy to the specified public repository to control access permissions.
            For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policies.html">Amazon
            ECR Repository Policies</a> in the <i>Amazon Elastic Container Registry User Guide</i>.
            </summary>
            <param name="request">Container for the necessary parameters to execute the SetRepositoryPolicy service method.</param>
            
            <returns>The response from the SetRepositoryPolicy service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/SetRepositoryPolicy">REST API Reference for SetRepositoryPolicy Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.SetRepositoryPolicyAsync(Amazon.ECRPublic.Model.SetRepositoryPolicyRequest,System.Threading.CancellationToken)">
            <summary>
            Applies a repository policy to the specified public repository to control access permissions.
            For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policies.html">Amazon
            ECR Repository Policies</a> in the <i>Amazon Elastic Container Registry User Guide</i>.
            </summary>
            <param name="request">Container for the necessary parameters to execute the SetRepositoryPolicy service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the SetRepositoryPolicy service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/SetRepositoryPolicy">REST API Reference for SetRepositoryPolicy Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.TagResource(Amazon.ECRPublic.Model.TagResourceRequest)">
            <summary>
            Associates the specified tags to a resource with the specified <code>resourceArn</code>.
            If existing tags on a resource are not specified in the request parameters, they are
            not changed. When a resource is deleted, the tags associated with that resource are
            deleted as well.
            </summary>
            <param name="request">Container for the necessary parameters to execute the TagResource service method.</param>
            
            <returns>The response from the TagResource service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidTagParameterException">
            An invalid parameter has been specified. Tag keys can have a maximum character length
            of 128 characters, and tag values can have a maximum length of 256 characters.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.TooManyTagsException">
            The list of tags on the repository is over the limit. The maximum number of tags that
            can be applied to a repository is 50.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/TagResource">REST API Reference for TagResource Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.TagResourceAsync(Amazon.ECRPublic.Model.TagResourceRequest,System.Threading.CancellationToken)">
            <summary>
            Associates the specified tags to a resource with the specified <code>resourceArn</code>.
            If existing tags on a resource are not specified in the request parameters, they are
            not changed. When a resource is deleted, the tags associated with that resource are
            deleted as well.
            </summary>
            <param name="request">Container for the necessary parameters to execute the TagResource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the TagResource service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidTagParameterException">
            An invalid parameter has been specified. Tag keys can have a maximum character length
            of 128 characters, and tag values can have a maximum length of 256 characters.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.TooManyTagsException">
            The list of tags on the repository is over the limit. The maximum number of tags that
            can be applied to a repository is 50.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/TagResource">REST API Reference for TagResource Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.UntagResource(Amazon.ECRPublic.Model.UntagResourceRequest)">
            <summary>
            Deletes specified tags from a resource.
            </summary>
            <param name="request">Container for the necessary parameters to execute the UntagResource service method.</param>
            
            <returns>The response from the UntagResource service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidTagParameterException">
            An invalid parameter has been specified. Tag keys can have a maximum character length
            of 128 characters, and tag values can have a maximum length of 256 characters.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.TooManyTagsException">
            The list of tags on the repository is over the limit. The maximum number of tags that
            can be applied to a repository is 50.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/UntagResource">REST API Reference for UntagResource Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.UntagResourceAsync(Amazon.ECRPublic.Model.UntagResourceRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes specified tags from a resource.
            </summary>
            <param name="request">Container for the necessary parameters to execute the UntagResource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the UntagResource service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidTagParameterException">
            An invalid parameter has been specified. Tag keys can have a maximum character length
            of 128 characters, and tag values can have a maximum length of 256 characters.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.TooManyTagsException">
            The list of tags on the repository is over the limit. The maximum number of tags that
            can be applied to a repository is 50.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/UntagResource">REST API Reference for UntagResource Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.UploadLayerPart(Amazon.ECRPublic.Model.UploadLayerPartRequest)">
            <summary>
            Uploads an image layer part to Amazon ECR.
            
             
            <para>
            When an image is pushed, each new image layer is uploaded in parts. The maximum size
            of each image layer part can be 20971520 bytes (or about 20MB). The UploadLayerPart
            API is called once per each new image layer part.
            </para>
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy and is not generally used by customers
            for pulling and pushing images. In most cases, you should use the <code>docker</code>
            CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the UploadLayerPart service method.</param>
            
            <returns>The response from the UploadLayerPart service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidLayerPartException">
            The layer part size is not valid, or the first byte specified is not consecutive to
            the last byte of a previous layer part upload.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.LimitExceededException">
            The operation did not succeed because it would have exceeded a service limit for your
            account. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/service-quotas.html">Amazon
            ECR Service Quotas</a> in the Amazon Elastic Container Registry User Guide.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RegistryNotFoundException">
            The registry does not exist.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UnsupportedCommandException">
            The action is not supported in this Region.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UploadNotFoundException">
            The upload could not be found, or the specified upload ID is not valid for this repository.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/UploadLayerPart">REST API Reference for UploadLayerPart Operation</seealso>
        </member>
        <member name="M:Amazon.ECRPublic.IAmazonECRPublic.UploadLayerPartAsync(Amazon.ECRPublic.Model.UploadLayerPartRequest,System.Threading.CancellationToken)">
            <summary>
            Uploads an image layer part to Amazon ECR.
            
             
            <para>
            When an image is pushed, each new image layer is uploaded in parts. The maximum size
            of each image layer part can be 20971520 bytes (or about 20MB). The UploadLayerPart
            API is called once per each new image layer part.
            </para>
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy and is not generally used by customers
            for pulling and pushing images. In most cases, you should use the <code>docker</code>
            CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the UploadLayerPart service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the UploadLayerPart service method, as returned by ECRPublic.</returns>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidLayerPartException">
            The layer part size is not valid, or the first byte specified is not consecutive to
            the last byte of a previous layer part upload.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.LimitExceededException">
            The operation did not succeed because it would have exceeded a service limit for your
            account. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/service-quotas.html">Amazon
            ECR Service Quotas</a> in the Amazon Elastic Container Registry User Guide.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RegistryNotFoundException">
            The registry does not exist.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UnsupportedCommandException">
            The action is not supported in this Region.
            </exception>
            <exception cref="T:Amazon.ECRPublic.Model.UploadNotFoundException">
            The upload could not be found, or the specified upload ID is not valid for this repository.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-public-2020-10-30/UploadLayerPart">REST API Reference for UploadLayerPart Operation</seealso>
        </member>
    </members>
</doc>
