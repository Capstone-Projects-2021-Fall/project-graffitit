<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AWSSDK.Kinesis</name>
    </assembly>
    <members>
        <member name="T:Amazon.Kinesis.AmazonKinesisConfig">
            <summary>
            Configuration for accessing Amazon Kinesis service
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisConfig.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.AmazonKinesisConfig.RegionEndpointServiceName">
            <summary>
            The constant used to lookup in the region hash the endpoint.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.AmazonKinesisConfig.ServiceVersion">
            <summary>
            Gets the ServiceVersion property.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.AmazonKinesisConfig.UserAgent">
            <summary>
            Gets the value of UserAgent property.
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.AmazonKinesisException">
            <summary>
             Common exception for the Kinesis service.
             </summary>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisException.#ctor(System.String)">
            <summary>
            Construct instance of AmazonKinesisException
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of AmazonKinesisException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisException.#ctor(System.Exception)">
            <summary>
            Construct instance of AmazonKinesisException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of AmazonKinesisException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of AmazonKinesisException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the AmazonKinesisException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:Amazon.Kinesis.Internal.AmazonKinesisMetadata">
            <summary>
            Service metadata for  Amazon Kinesis service
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Internal.AmazonKinesisMetadata.ServiceId">
            <summary>
            Gets the value of the Service Id.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Internal.AmazonKinesisMetadata.OperationNameMapping">
            <summary>
            Gets the dictionary that gives mapping of renamed operations
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.AddTagsToStreamRequest">
            <summary>
            Container for the parameters to the AddTagsToStream operation.
            Adds or updates tags for the specified Kinesis data stream. Each time you invoke this
            operation, you can specify up to 10 tags. If you want to add more than 10 tags to
            your stream, you can invoke this operation multiple times. In total, each stream can
            have up to 50 tags.
            
             
            <para>
            If tags have already been assigned to the stream, <code>AddTagsToStream</code> overwrites
            any existing tags that correspond to the specified tag keys.
            </para>
             
            <para>
             <a>AddTagsToStream</a> has a limit of five transactions per second per account.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.AddTagsToStreamRequest.StreamName">
            <summary>
            Gets and sets the property StreamName. 
            <para>
            The name of the stream.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.AddTagsToStreamRequest.Tags">
            <summary>
            Gets and sets the property Tags. 
            <para>
            A set of up to 10 key-value pairs to use to create the tags.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.AddTagsToStreamResponse">
            <summary>
            This is the response object from the AddTagsToStream operation.
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.ChildShard">
            <summary>
            
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ChildShard.HashKeyRange">
            <summary>
            Gets and sets the property HashKeyRange.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ChildShard.ParentShards">
            <summary>
            Gets and sets the property ParentShards.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ChildShard.ShardId">
            <summary>
            Gets and sets the property ShardId.
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.Consumer">
            <summary>
            An object that represents the details of the consumer you registered. This type of
            object is returned by <a>RegisterStreamConsumer</a>.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.Consumer.ConsumerARN">
            <summary>
            Gets and sets the property ConsumerARN. 
            <para>
            When you register a consumer, Kinesis Data Streams generates an ARN for it. You need
            this ARN to be able to call <a>SubscribeToShard</a>.
            </para>
             
            <para>
            If you delete a consumer and then create a new one with the same name, it won't have
            the same ARN. That's because consumer ARNs contain the creation timestamp. This is
            important to keep in mind if you have IAM policies that reference consumer ARNs.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.Consumer.ConsumerCreationTimestamp">
            <summary>
            Gets and sets the property ConsumerCreationTimestamp.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.Consumer.ConsumerName">
            <summary>
            Gets and sets the property ConsumerName. 
            <para>
            The name of the consumer is something you choose when you register the consumer.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.Consumer.ConsumerStatus">
            <summary>
            Gets and sets the property ConsumerStatus. 
            <para>
            A consumer can't read data while in the <code>CREATING</code> or <code>DELETING</code>
            states.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.ConsumerDescription">
            <summary>
            An object that represents the details of a registered consumer. This type of object
            is returned by <a>DescribeStreamConsumer</a>.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ConsumerDescription.ConsumerARN">
            <summary>
            Gets and sets the property ConsumerARN. 
            <para>
            When you register a consumer, Kinesis Data Streams generates an ARN for it. You need
            this ARN to be able to call <a>SubscribeToShard</a>.
            </para>
             
            <para>
            If you delete a consumer and then create a new one with the same name, it won't have
            the same ARN. That's because consumer ARNs contain the creation timestamp. This is
            important to keep in mind if you have IAM policies that reference consumer ARNs.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ConsumerDescription.ConsumerCreationTimestamp">
            <summary>
            Gets and sets the property ConsumerCreationTimestamp.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ConsumerDescription.ConsumerName">
            <summary>
            Gets and sets the property ConsumerName. 
            <para>
            The name of the consumer is something you choose when you register the consumer.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ConsumerDescription.ConsumerStatus">
            <summary>
            Gets and sets the property ConsumerStatus. 
            <para>
            A consumer can't read data while in the <code>CREATING</code> or <code>DELETING</code>
            states.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ConsumerDescription.StreamARN">
            <summary>
            Gets and sets the property StreamARN. 
            <para>
            The ARN of the stream with which you registered the consumer.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.CreateStreamRequest">
            <summary>
            Container for the parameters to the CreateStream operation.
            Creates a Kinesis data stream. A stream captures and transports data records that
            are continuously emitted from different data sources or <i>producers</i>. Scale-out
            within a stream is explicitly supported by means of shards, which are uniquely identified
            groups of data records in a stream.
            
             
            <para>
            You specify and control the number of shards that a stream is composed of. Each shard
            can support reads up to five transactions per second, up to a maximum data read total
            of 2 MiB per second. Each shard can support writes up to 1,000 records per second,
            up to a maximum data write total of 1 MiB per second. If the amount of data input
            increases or decreases, you can add or remove shards.
            </para>
             
            <para>
            The stream name identifies the stream. The name is scoped to the AWS account used
            by the application. It is also scoped by AWS Region. That is, two streams in two different
            accounts can have the same name, and two streams in the same account, but in two different
            Regions, can have the same name.
            </para>
             
            <para>
             <code>CreateStream</code> is an asynchronous operation. Upon receiving a <code>CreateStream</code>
            request, Kinesis Data Streams immediately returns and sets the stream status to <code>CREATING</code>.
            After the stream is created, Kinesis Data Streams sets the stream status to <code>ACTIVE</code>.
            You should perform read and write operations only on an <code>ACTIVE</code> stream.
            
            </para>
             
            <para>
            You receive a <code>LimitExceededException</code> when making a <code>CreateStream</code>
            request when you try to do one of the following:
            </para>
             <ul> <li> 
            <para>
            Have more than five streams in the <code>CREATING</code> state at any point in time.
            </para>
             </li> <li> 
            <para>
            Create more shards than are authorized for your account.
            </para>
             </li> </ul> 
            <para>
            For the default shard limit for an AWS account, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Amazon
            Kinesis Data Streams Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            To increase this limit, <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html">contact
            AWS Support</a>.
            </para>
             
            <para>
            You can use <code>DescribeStream</code> to check the stream status, which is returned
            in <code>StreamStatus</code>.
            </para>
             
            <para>
             <a>CreateStream</a> has a limit of five transactions per second per account.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.CreateStreamRequest.ShardCount">
            <summary>
            Gets and sets the property ShardCount. 
            <para>
            The number of shards that the stream will use. The throughput of the stream is a function
            of the number of shards; more shards are required for greater provisioned throughput.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.CreateStreamRequest.StreamName">
            <summary>
            Gets and sets the property StreamName. 
            <para>
            A name to identify the stream. The stream name is scoped to the AWS account used by
            the application that creates the stream. It is also scoped by AWS Region. That is,
            two streams in two different AWS accounts can have the same name. Two streams in the
            same AWS account but in two different Regions can also have the same name.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.CreateStreamResponse">
            <summary>
            This is the response object from the CreateStream operation.
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.DecreaseStreamRetentionPeriodRequest">
            <summary>
            Container for the parameters to the DecreaseStreamRetentionPeriod operation.
            Decreases the Kinesis data stream's retention period, which is the length of time
            data records are accessible after they are added to the stream. The minimum value
            of a stream's retention period is 24 hours.
            
             
            <para>
            This operation may result in lost data. For example, if the stream's retention period
            is 48 hours and is decreased to 24 hours, any data already in the stream that is older
            than 24 hours is inaccessible.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.DecreaseStreamRetentionPeriodRequest.RetentionPeriodHours">
            <summary>
            Gets and sets the property RetentionPeriodHours. 
            <para>
            The new retention period of the stream, in hours. Must be less than the current retention
            period.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.DecreaseStreamRetentionPeriodRequest.StreamName">
            <summary>
            Gets and sets the property StreamName. 
            <para>
            The name of the stream to modify.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.DecreaseStreamRetentionPeriodResponse">
            <summary>
            This is the response object from the DecreaseStreamRetentionPeriod operation.
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.DeleteStreamRequest">
            <summary>
            Container for the parameters to the DeleteStream operation.
            Deletes a Kinesis data stream and all its shards and data. You must shut down any
            applications that are operating on the stream before you delete the stream. If an
            application attempts to operate on a deleted stream, it receives the exception <code>ResourceNotFoundException</code>.
            
             
            <para>
            If the stream is in the <code>ACTIVE</code> state, you can delete it. After a <code>DeleteStream</code>
            request, the specified stream is in the <code>DELETING</code> state until Kinesis
            Data Streams completes the deletion.
            </para>
             
            <para>
             <b>Note:</b> Kinesis Data Streams might continue to accept data read and write operations,
            such as <a>PutRecord</a>, <a>PutRecords</a>, and <a>GetRecords</a>, on a stream in
            the <code>DELETING</code> state until the stream deletion is complete.
            </para>
             
            <para>
            When you delete a stream, any shards in that stream are also deleted, and any tags
            are dissociated from the stream.
            </para>
             
            <para>
            You can use the <a>DescribeStream</a> operation to check the state of the stream,
            which is returned in <code>StreamStatus</code>.
            </para>
             
            <para>
             <a>DeleteStream</a> has a limit of five transactions per second per account.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.DeleteStreamRequest.EnforceConsumerDeletion">
            <summary>
            Gets and sets the property EnforceConsumerDeletion. 
            <para>
            If this parameter is unset (<code>null</code>) or if you set it to <code>false</code>,
            and the stream has registered consumers, the call to <code>DeleteStream</code> fails
            with a <code>ResourceInUseException</code>. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.DeleteStreamRequest.StreamName">
            <summary>
            Gets and sets the property StreamName. 
            <para>
            The name of the stream to delete.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.DeleteStreamResponse">
            <summary>
            This is the response object from the DeleteStream operation.
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.DeregisterStreamConsumerRequest">
            <summary>
            Container for the parameters to the DeregisterStreamConsumer operation.
            To deregister a consumer, provide its ARN. Alternatively, you can provide the ARN
            of the data stream and the name you gave the consumer when you registered it. You
            may also provide all three parameters, as long as they don't conflict with each other.
            If you don't know the name or ARN of the consumer that you want to deregister, you
            can use the <a>ListStreamConsumers</a> operation to get a list of the descriptions
            of all the consumers that are currently registered with a given data stream. The description
            of a consumer contains its name and ARN.
            
             
            <para>
            This operation has a limit of five transactions per second per stream.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.DeregisterStreamConsumerRequest.ConsumerARN">
            <summary>
            Gets and sets the property ConsumerARN. 
            <para>
            The ARN returned by Kinesis Data Streams when you registered the consumer. If you
            don't know the ARN of the consumer that you want to deregister, you can use the ListStreamConsumers
            operation to get a list of the descriptions of all the consumers that are currently
            registered with a given data stream. The description of a consumer contains its ARN.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.DeregisterStreamConsumerRequest.ConsumerName">
            <summary>
            Gets and sets the property ConsumerName. 
            <para>
            The name that you gave to the consumer.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.DeregisterStreamConsumerRequest.StreamARN">
            <summary>
            Gets and sets the property StreamARN. 
            <para>
            The ARN of the Kinesis data stream that the consumer is registered with. For more
            information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kinesis-streams">Amazon
            Resource Names (ARNs) and AWS Service Namespaces</a>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.DeregisterStreamConsumerResponse">
            <summary>
            This is the response object from the DeregisterStreamConsumer operation.
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.DescribeLimitsRequest">
            <summary>
            Container for the parameters to the DescribeLimits operation.
            Describes the shard limits and usage for the account.
            
             
            <para>
            If you update your account limits, the old limits might be returned for a few minutes.
            </para>
             
            <para>
            This operation has a limit of one transaction per second per account.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.DescribeLimitsResponse">
            <summary>
            This is the response object from the DescribeLimits operation.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.DescribeLimitsResponse.OpenShardCount">
            <summary>
            Gets and sets the property OpenShardCount. 
            <para>
            The number of open shards.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.DescribeLimitsResponse.ShardLimit">
            <summary>
            Gets and sets the property ShardLimit. 
            <para>
            The maximum number of shards.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.DescribeStreamConsumerRequest">
            <summary>
            Container for the parameters to the DescribeStreamConsumer operation.
            To get the description of a registered consumer, provide the ARN of the consumer.
            Alternatively, you can provide the ARN of the data stream and the name you gave the
            consumer when you registered it. You may also provide all three parameters, as long
            as they don't conflict with each other. If you don't know the name or ARN of the consumer
            that you want to describe, you can use the <a>ListStreamConsumers</a> operation to
            get a list of the descriptions of all the consumers that are currently registered
            with a given data stream.
            
             
            <para>
            This operation has a limit of 20 transactions per second per stream.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.DescribeStreamConsumerRequest.ConsumerARN">
            <summary>
            Gets and sets the property ConsumerARN. 
            <para>
            The ARN returned by Kinesis Data Streams when you registered the consumer.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.DescribeStreamConsumerRequest.ConsumerName">
            <summary>
            Gets and sets the property ConsumerName. 
            <para>
            The name that you gave to the consumer.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.DescribeStreamConsumerRequest.StreamARN">
            <summary>
            Gets and sets the property StreamARN. 
            <para>
            The ARN of the Kinesis data stream that the consumer is registered with. For more
            information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kinesis-streams">Amazon
            Resource Names (ARNs) and AWS Service Namespaces</a>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.DescribeStreamConsumerResponse">
            <summary>
            This is the response object from the DescribeStreamConsumer operation.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.DescribeStreamConsumerResponse.ConsumerDescription">
            <summary>
            Gets and sets the property ConsumerDescription. 
            <para>
            An object that represents the details of the consumer.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.DescribeStreamRequest">
            <summary>
            Container for the parameters to the DescribeStream operation.
            Describes the specified Kinesis data stream.
            
             
            <para>
            The information returned includes the stream name, Amazon Resource Name (ARN), creation
            time, enhanced metric configuration, and shard map. The shard map is an array of shard
            objects. For each shard object, there is the hash key and sequence number ranges that
            the shard spans, and the IDs of any earlier shards that played in a role in creating
            the shard. Every record ingested in the stream is identified by a sequence number,
            which is assigned when the record is put into the stream.
            </para>
             
            <para>
            You can limit the number of shards returned by each call. For more information, see
            <a href="https://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-retrieve-shards.html">Retrieving
            Shards from a Stream</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             
            <para>
            There are no guarantees about the chronological order shards returned. To process
            shards in chronological order, use the ID of the parent shard to track the lineage
            to the oldest shard.
            </para>
             
            <para>
            This operation has a limit of 10 transactions per second per account.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.DescribeStreamRequest.ExclusiveStartShardId">
            <summary>
            Gets and sets the property ExclusiveStartShardId. 
            <para>
            The shard ID of the shard to start with.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.DescribeStreamRequest.Limit">
            <summary>
            Gets and sets the property Limit. 
            <para>
            The maximum number of shards to return in a single call. The default value is 100.
            If you specify a value greater than 100, at most 100 shards are returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.DescribeStreamRequest.StreamName">
            <summary>
            Gets and sets the property StreamName. 
            <para>
            The name of the stream to describe.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.DescribeStreamResponse">
            <summary>
            Represents the output for <code>DescribeStream</code>.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.DescribeStreamResponse.StreamDescription">
            <summary>
            Gets and sets the property StreamDescription. 
            <para>
            The current status of the stream, the stream Amazon Resource Name (ARN), an array
            of shard objects that comprise the stream, and whether there are more shards available.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.DescribeStreamSummaryRequest">
            <summary>
            Container for the parameters to the DescribeStreamSummary operation.
            Provides a summarized description of the specified Kinesis data stream without the
            shard list.
            
             
            <para>
            The information returned includes the stream name, Amazon Resource Name (ARN), status,
            record retention period, approximate creation time, monitoring, encryption details,
            and open shard count. 
            </para>
             
            <para>
             <a>DescribeStreamSummary</a> has a limit of 20 transactions per second per account.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.DescribeStreamSummaryRequest.StreamName">
            <summary>
            Gets and sets the property StreamName. 
            <para>
            The name of the stream to describe.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.DescribeStreamSummaryResponse">
            <summary>
            This is the response object from the DescribeStreamSummary operation.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.DescribeStreamSummaryResponse.StreamDescriptionSummary">
            <summary>
            Gets and sets the property StreamDescriptionSummary. 
            <para>
            A <a>StreamDescriptionSummary</a> containing information about the stream.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.DisableEnhancedMonitoringRequest">
            <summary>
            Container for the parameters to the DisableEnhancedMonitoring operation.
            Disables enhanced monitoring.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.DisableEnhancedMonitoringRequest.ShardLevelMetrics">
            <summary>
            Gets and sets the property ShardLevelMetrics. 
            <para>
            List of shard-level metrics to disable.
            </para>
             
            <para>
            The following are the valid shard-level metrics. The value "<code>ALL</code>" disables
            every metric.
            </para>
             <ul> <li> 
            <para>
             <code>IncomingBytes</code> 
            </para>
             </li> <li> 
            <para>
             <code>IncomingRecords</code> 
            </para>
             </li> <li> 
            <para>
             <code>OutgoingBytes</code> 
            </para>
             </li> <li> 
            <para>
             <code>OutgoingRecords</code> 
            </para>
             </li> <li> 
            <para>
             <code>WriteProvisionedThroughputExceeded</code> 
            </para>
             </li> <li> 
            <para>
             <code>ReadProvisionedThroughputExceeded</code> 
            </para>
             </li> <li> 
            <para>
             <code>IteratorAgeMilliseconds</code> 
            </para>
             </li> <li> 
            <para>
             <code>ALL</code> 
            </para>
             </li> </ul> 
            <para>
            For more information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/monitoring-with-cloudwatch.html">Monitoring
            the Amazon Kinesis Data Streams Service with Amazon CloudWatch</a> in the <i>Amazon
            Kinesis Data Streams Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.DisableEnhancedMonitoringRequest.StreamName">
            <summary>
            Gets and sets the property StreamName. 
            <para>
            The name of the Kinesis data stream for which to disable enhanced monitoring.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.DisableEnhancedMonitoringResponse">
            <summary>
            Represents the output for <a>EnableEnhancedMonitoring</a> and <a>DisableEnhancedMonitoring</a>.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.DisableEnhancedMonitoringResponse.CurrentShardLevelMetrics">
            <summary>
            Gets and sets the property CurrentShardLevelMetrics. 
            <para>
            Represents the current state of the metrics that are in the enhanced state before
            the operation.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.DisableEnhancedMonitoringResponse.DesiredShardLevelMetrics">
            <summary>
            Gets and sets the property DesiredShardLevelMetrics. 
            <para>
            Represents the list of all the metrics that would be in the enhanced state after the
            operation.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.DisableEnhancedMonitoringResponse.StreamName">
            <summary>
            Gets and sets the property StreamName. 
            <para>
            The name of the Kinesis data stream.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.EnableEnhancedMonitoringRequest">
            <summary>
            Container for the parameters to the EnableEnhancedMonitoring operation.
            Enables enhanced Kinesis data stream monitoring for shard-level metrics.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.EnableEnhancedMonitoringRequest.ShardLevelMetrics">
            <summary>
            Gets and sets the property ShardLevelMetrics. 
            <para>
            List of shard-level metrics to enable.
            </para>
             
            <para>
            The following are the valid shard-level metrics. The value "<code>ALL</code>" enables
            every metric.
            </para>
             <ul> <li> 
            <para>
             <code>IncomingBytes</code> 
            </para>
             </li> <li> 
            <para>
             <code>IncomingRecords</code> 
            </para>
             </li> <li> 
            <para>
             <code>OutgoingBytes</code> 
            </para>
             </li> <li> 
            <para>
             <code>OutgoingRecords</code> 
            </para>
             </li> <li> 
            <para>
             <code>WriteProvisionedThroughputExceeded</code> 
            </para>
             </li> <li> 
            <para>
             <code>ReadProvisionedThroughputExceeded</code> 
            </para>
             </li> <li> 
            <para>
             <code>IteratorAgeMilliseconds</code> 
            </para>
             </li> <li> 
            <para>
             <code>ALL</code> 
            </para>
             </li> </ul> 
            <para>
            For more information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/monitoring-with-cloudwatch.html">Monitoring
            the Amazon Kinesis Data Streams Service with Amazon CloudWatch</a> in the <i>Amazon
            Kinesis Data Streams Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.EnableEnhancedMonitoringRequest.StreamName">
            <summary>
            Gets and sets the property StreamName. 
            <para>
            The name of the stream for which to enable enhanced monitoring.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.EnableEnhancedMonitoringResponse">
            <summary>
            Represents the output for <a>EnableEnhancedMonitoring</a> and <a>DisableEnhancedMonitoring</a>.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.EnableEnhancedMonitoringResponse.CurrentShardLevelMetrics">
            <summary>
            Gets and sets the property CurrentShardLevelMetrics. 
            <para>
            Represents the current state of the metrics that are in the enhanced state before
            the operation.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.EnableEnhancedMonitoringResponse.DesiredShardLevelMetrics">
            <summary>
            Gets and sets the property DesiredShardLevelMetrics. 
            <para>
            Represents the list of all the metrics that would be in the enhanced state after the
            operation.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.EnableEnhancedMonitoringResponse.StreamName">
            <summary>
            Gets and sets the property StreamName. 
            <para>
            The name of the Kinesis data stream.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.EnhancedMetrics">
            <summary>
            Represents enhanced metrics types.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.EnhancedMetrics.ShardLevelMetrics">
            <summary>
            Gets and sets the property ShardLevelMetrics. 
            <para>
            List of shard-level metrics.
            </para>
             
            <para>
            The following are the valid shard-level metrics. The value "<code>ALL</code>" enhances
            every metric.
            </para>
             <ul> <li> 
            <para>
             <code>IncomingBytes</code> 
            </para>
             </li> <li> 
            <para>
             <code>IncomingRecords</code> 
            </para>
             </li> <li> 
            <para>
             <code>OutgoingBytes</code> 
            </para>
             </li> <li> 
            <para>
             <code>OutgoingRecords</code> 
            </para>
             </li> <li> 
            <para>
             <code>WriteProvisionedThroughputExceeded</code> 
            </para>
             </li> <li> 
            <para>
             <code>ReadProvisionedThroughputExceeded</code> 
            </para>
             </li> <li> 
            <para>
             <code>IteratorAgeMilliseconds</code> 
            </para>
             </li> <li> 
            <para>
             <code>ALL</code> 
            </para>
             </li> </ul> 
            <para>
            For more information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/monitoring-with-cloudwatch.html">Monitoring
            the Amazon Kinesis Data Streams Service with Amazon CloudWatch</a> in the <i>Amazon
            Kinesis Data Streams Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.ExpiredIteratorException">
            <summary>
            The provided iterator exceeds the maximum age allowed.
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.Model.ExpiredIteratorException.#ctor(System.String)">
            <summary>
            Constructs a new ExpiredIteratorException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.Kinesis.Model.ExpiredIteratorException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ExpiredIteratorException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.ExpiredIteratorException.#ctor(System.Exception)">
            <summary>
            Construct instance of ExpiredIteratorException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.ExpiredIteratorException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ExpiredIteratorException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.ExpiredIteratorException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ExpiredIteratorException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.ExpiredIteratorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the ExpiredIteratorException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.Kinesis.Model.ExpiredIteratorException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.Kinesis.Model.ExpiredNextTokenException">
            <summary>
            The pagination token passed to the operation is expired.
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.Model.ExpiredNextTokenException.#ctor(System.String)">
            <summary>
            Constructs a new ExpiredNextTokenException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.Kinesis.Model.ExpiredNextTokenException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ExpiredNextTokenException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.ExpiredNextTokenException.#ctor(System.Exception)">
            <summary>
            Construct instance of ExpiredNextTokenException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.ExpiredNextTokenException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ExpiredNextTokenException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.ExpiredNextTokenException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ExpiredNextTokenException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.ExpiredNextTokenException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the ExpiredNextTokenException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.Kinesis.Model.ExpiredNextTokenException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.Kinesis.Model.GetRecordsRequest">
            <summary>
            Container for the parameters to the GetRecords operation.
            Gets data records from a Kinesis data stream's shard.
            
             
            <para>
            Specify a shard iterator using the <code>ShardIterator</code> parameter. The shard
            iterator specifies the position in the shard from which you want to start reading
            data records sequentially. If there are no records available in the portion of the
            shard that the iterator points to, <a>GetRecords</a> returns an empty list. It might
            take multiple calls to get to a portion of the shard that contains records.
            </para>
             
            <para>
            You can scale by provisioning multiple shards per stream while considering service
            limits (for more information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Amazon
            Kinesis Data Streams Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>).
            Your application should have one thread per shard, each reading continuously from
            its stream. To read from a stream continually, call <a>GetRecords</a> in a loop. Use
            <a>GetShardIterator</a> to get the shard iterator to specify in the first <a>GetRecords</a>
            call. <a>GetRecords</a> returns a new shard iterator in <code>NextShardIterator</code>.
            Specify the shard iterator returned in <code>NextShardIterator</code> in subsequent
            calls to <a>GetRecords</a>. If the shard has been closed, the shard iterator can't
            return more data and <a>GetRecords</a> returns <code>null</code> in <code>NextShardIterator</code>.
            You can terminate the loop when the shard is closed, or when the shard iterator reaches
            the record with the sequence number or other attribute that marks it as the last record
            to process.
            </para>
             
            <para>
            Each data record can be up to 1 MiB in size, and each shard can read up to 2 MiB per
            second. You can ensure that your calls don't exceed the maximum supported size or
            throughput by using the <code>Limit</code> parameter to specify the maximum number
            of records that <a>GetRecords</a> can return. Consider your average record size when
            determining this limit. The maximum number of records that can be returned per call
            is 10,000.
            </para>
             
            <para>
            The size of the data returned by <a>GetRecords</a> varies depending on the utilization
            of the shard. The maximum size of data that <a>GetRecords</a> can return is 10 MiB.
            If a call returns this amount of data, subsequent calls made within the next 5 seconds
            throw <code>ProvisionedThroughputExceededException</code>. If there is insufficient
            provisioned throughput on the stream, subsequent calls made within the next 1 second
            throw <code>ProvisionedThroughputExceededException</code>. <a>GetRecords</a> doesn't
            return any data when it throws an exception. For this reason, we recommend that you
            wait 1 second between calls to <a>GetRecords</a>. However, it's possible that the
            application will get exceptions for longer than 1 second.
            </para>
             
            <para>
            To detect whether the application is falling behind in processing, you can use the
            <code>MillisBehindLatest</code> response attribute. You can also monitor the stream
            using CloudWatch metrics and other mechanisms (see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/monitoring.html">Monitoring</a>
            in the <i>Amazon Kinesis Data Streams Developer Guide</i>).
            </para>
             
            <para>
            Each Amazon Kinesis record includes a value, <code>ApproximateArrivalTimestamp</code>,
            that is set when a stream successfully receives and stores a record. This is commonly
            referred to as a server-side time stamp, whereas a client-side time stamp is set when
            a data producer creates or sends the record to a stream (a data producer is any data
            source putting data records into a stream, for example with <a>PutRecords</a>). The
            time stamp has millisecond precision. There are no guarantees about the time stamp
            accuracy, or that the time stamp is always increasing. For example, records in a shard
            or across a stream might have time stamps that are out of order.
            </para>
             
            <para>
            This operation has a limit of five transactions per second per shard.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.GetRecordsRequest.Limit">
            <summary>
            Gets and sets the property Limit. 
            <para>
            The maximum number of records to return. Specify a value of up to 10,000. If you specify
            a value that is greater than 10,000, <a>GetRecords</a> throws <code>InvalidArgumentException</code>.
            The default value is 10,000.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.GetRecordsRequest.ShardIterator">
            <summary>
            Gets and sets the property ShardIterator. 
            <para>
            The position in the shard from which you want to start sequentially reading data records.
            A shard iterator specifies this position using the sequence number of a data record
            in the shard.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.GetRecordsResponse">
            <summary>
            Represents the output for <a>GetRecords</a>.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.GetRecordsResponse.ChildShards">
            <summary>
            Gets and sets the property ChildShards.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.GetRecordsResponse.MillisBehindLatest">
            <summary>
            Gets and sets the property MillisBehindLatest. 
            <para>
            The number of milliseconds the <a>GetRecords</a> response is from the tip of the stream,
            indicating how far behind current time the consumer is. A value of zero indicates
            that record processing is caught up, and there are no new records to process at this
            moment.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.GetRecordsResponse.NextShardIterator">
            <summary>
            Gets and sets the property NextShardIterator. 
            <para>
            The next position in the shard from which to start sequentially reading data records.
            If set to <code>null</code>, the shard has been closed and the requested iterator
            does not return any more data. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.GetRecordsResponse.Records">
            <summary>
            Gets and sets the property Records. 
            <para>
            The data records retrieved from the shard.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.GetShardIteratorRequest">
            <summary>
            Container for the parameters to the GetShardIterator operation.
            Gets an Amazon Kinesis shard iterator. A shard iterator expires 5 minutes after it
            is returned to the requester.
            
             
            <para>
            A shard iterator specifies the shard position from which to start reading data records
            sequentially. The position is specified using the sequence number of a data record
            in a shard. A sequence number is the identifier associated with every record ingested
            in the stream, and is assigned when a record is put into the stream. Each stream has
            one or more shards.
            </para>
             
            <para>
            You must specify the shard iterator type. For example, you can set the <code>ShardIteratorType</code>
            parameter to read exactly from the position denoted by a specific sequence number
            by using the <code>AT_SEQUENCE_NUMBER</code> shard iterator type. Alternatively, the
            parameter can read right after the sequence number by using the <code>AFTER_SEQUENCE_NUMBER</code>
            shard iterator type, using sequence numbers returned by earlier calls to <a>PutRecord</a>,
            <a>PutRecords</a>, <a>GetRecords</a>, or <a>DescribeStream</a>. In the request, you
            can specify the shard iterator type <code>AT_TIMESTAMP</code> to read records from
            an arbitrary point in time, <code>TRIM_HORIZON</code> to cause <code>ShardIterator</code>
            to point to the last untrimmed record in the shard in the system (the oldest data
            record in the shard), or <code>LATEST</code> so that you always read the most recent
            data in the shard. 
            </para>
             
            <para>
            When you read repeatedly from a stream, use a <a>GetShardIterator</a> request to get
            the first shard iterator for use in your first <a>GetRecords</a> request and for subsequent
            reads use the shard iterator returned by the <a>GetRecords</a> request in <code>NextShardIterator</code>.
            A new shard iterator is returned by every <a>GetRecords</a> request in <code>NextShardIterator</code>,
            which you use in the <code>ShardIterator</code> parameter of the next <a>GetRecords</a>
            request. 
            </para>
             
            <para>
            If a <a>GetShardIterator</a> request is made too often, you receive a <code>ProvisionedThroughputExceededException</code>.
            For more information about throughput limits, see <a>GetRecords</a>, and <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams
            Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             
            <para>
            If the shard is closed, <a>GetShardIterator</a> returns a valid iterator for the last
            sequence number of the shard. A shard can be closed as a result of using <a>SplitShard</a>
            or <a>MergeShards</a>.
            </para>
             
            <para>
             <a>GetShardIterator</a> has a limit of five transactions per second per account per
            open shard.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.GetShardIteratorRequest.ShardId">
            <summary>
            Gets and sets the property ShardId. 
            <para>
            The shard ID of the Kinesis Data Streams shard to get the iterator for.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.GetShardIteratorRequest.ShardIteratorType">
            <summary>
            Gets and sets the property ShardIteratorType. 
            <para>
            Determines how the shard iterator is used to start reading data records from the shard.
            </para>
             
            <para>
            The following are the valid Amazon Kinesis shard iterator types:
            </para>
             <ul> <li> 
            <para>
            AT_SEQUENCE_NUMBER - Start reading from the position denoted by a specific sequence
            number, provided in the value <code>StartingSequenceNumber</code>.
            </para>
             </li> <li> 
            <para>
            AFTER_SEQUENCE_NUMBER - Start reading right after the position denoted by a specific
            sequence number, provided in the value <code>StartingSequenceNumber</code>.
            </para>
             </li> <li> 
            <para>
            AT_TIMESTAMP - Start reading from the position denoted by a specific time stamp, provided
            in the value <code>Timestamp</code>.
            </para>
             </li> <li> 
            <para>
            TRIM_HORIZON - Start reading at the last untrimmed record in the shard in the system,
            which is the oldest data record in the shard.
            </para>
             </li> <li> 
            <para>
            LATEST - Start reading just after the most recent record in the shard, so that you
            always read the most recent data in the shard.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.GetShardIteratorRequest.StartingSequenceNumber">
            <summary>
            Gets and sets the property StartingSequenceNumber. 
            <para>
            The sequence number of the data record in the shard from which to start reading. Used
            with shard iterator type AT_SEQUENCE_NUMBER and AFTER_SEQUENCE_NUMBER.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.GetShardIteratorRequest.StreamName">
            <summary>
            Gets and sets the property StreamName. 
            <para>
            The name of the Amazon Kinesis data stream.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.GetShardIteratorRequest.Timestamp">
            <summary>
            Gets and sets the property Timestamp. 
            <para>
            The time stamp of the data record from which to start reading. Used with shard iterator
            type AT_TIMESTAMP. A time stamp is the Unix epoch date with precision in milliseconds.
            For example, <code>2016-04-04T19:58:46.480-00:00</code> or <code>1459799926.480</code>.
            If a record with this exact time stamp does not exist, the iterator returned is for
            the next (later) record. If the time stamp is older than the current trim horizon,
            the iterator returned is for the oldest untrimmed data record (TRIM_HORIZON).
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.GetShardIteratorResponse">
            <summary>
            Represents the output for <code>GetShardIterator</code>.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.GetShardIteratorResponse.ShardIterator">
            <summary>
            Gets and sets the property ShardIterator. 
            <para>
            The position in the shard from which to start reading data records sequentially. A
            shard iterator specifies this position using the sequence number of a data record
            in a shard.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.HashKeyRange">
            <summary>
            The range of possible hash key values for the shard, which is a set of ordered contiguous
            positive integers.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.HashKeyRange.EndingHashKey">
            <summary>
            Gets and sets the property EndingHashKey. 
            <para>
            The ending hash key of the hash key range.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.HashKeyRange.StartingHashKey">
            <summary>
            Gets and sets the property StartingHashKey. 
            <para>
            The starting hash key of the hash key range.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.IncreaseStreamRetentionPeriodRequest">
            <summary>
            Container for the parameters to the IncreaseStreamRetentionPeriod operation.
            Increases the Kinesis data stream's retention period, which is the length of time
            data records are accessible after they are added to the stream. The maximum value
            of a stream's retention period is 168 hours (7 days).
            
             
            <para>
            If you choose a longer stream retention period, this operation increases the time
            period during which records that have not yet expired are accessible. However, it
            does not make previous, expired data (older than the stream's previous retention period)
            accessible after the operation has been called. For example, if a stream's retention
            period is set to 24 hours and is increased to 168 hours, any data that is older than
            24 hours remains inaccessible to consumer applications.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.IncreaseStreamRetentionPeriodRequest.RetentionPeriodHours">
            <summary>
            Gets and sets the property RetentionPeriodHours. 
            <para>
            The new retention period of the stream, in hours. Must be more than the current retention
            period.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.IncreaseStreamRetentionPeriodRequest.StreamName">
            <summary>
            Gets and sets the property StreamName. 
            <para>
            The name of the stream to modify.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.IncreaseStreamRetentionPeriodResponse">
            <summary>
            This is the response object from the IncreaseStreamRetentionPeriod operation.
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.AddTagsToStreamRequestMarshaller">
            <summary>
            AddTagsToStream Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.AddTagsToStreamRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.AddTagsToStreamRequestMarshaller.Marshall(Amazon.Kinesis.Model.AddTagsToStreamRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.AddTagsToStreamRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.AddTagsToStreamResponseUnmarshaller">
            <summary>
            Response Unmarshaller for AddTagsToStream operation
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.AddTagsToStreamResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.AddTagsToStreamResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.AddTagsToStreamResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.ChildShardUnmarshaller">
            <summary>
            Response Unmarshaller for ChildShard Object
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ChildShardUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#Kinesis#Model#ChildShard,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ChildShardUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.ChildShardUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.ConsumerDescriptionUnmarshaller">
            <summary>
            Response Unmarshaller for ConsumerDescription Object
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ConsumerDescriptionUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#Kinesis#Model#ConsumerDescription,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ConsumerDescriptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.ConsumerDescriptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.ConsumerUnmarshaller">
            <summary>
            Response Unmarshaller for Consumer Object
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ConsumerUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#Kinesis#Model#Consumer,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ConsumerUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.ConsumerUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.CreateStreamRequestMarshaller">
            <summary>
            CreateStream Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.CreateStreamRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.CreateStreamRequestMarshaller.Marshall(Amazon.Kinesis.Model.CreateStreamRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.CreateStreamRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.CreateStreamResponseUnmarshaller">
            <summary>
            Response Unmarshaller for CreateStream operation
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.CreateStreamResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.CreateStreamResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.CreateStreamResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.DecreaseStreamRetentionPeriodRequestMarshaller">
            <summary>
            DecreaseStreamRetentionPeriod Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.DecreaseStreamRetentionPeriodRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.DecreaseStreamRetentionPeriodRequestMarshaller.Marshall(Amazon.Kinesis.Model.DecreaseStreamRetentionPeriodRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.DecreaseStreamRetentionPeriodRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.DecreaseStreamRetentionPeriodResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DecreaseStreamRetentionPeriod operation
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.DecreaseStreamRetentionPeriodResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.DecreaseStreamRetentionPeriodResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.DecreaseStreamRetentionPeriodResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.DeleteStreamRequestMarshaller">
            <summary>
            DeleteStream Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.DeleteStreamRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.DeleteStreamRequestMarshaller.Marshall(Amazon.Kinesis.Model.DeleteStreamRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.DeleteStreamRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.DeleteStreamResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DeleteStream operation
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.DeleteStreamResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.DeleteStreamResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.DeleteStreamResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.DeregisterStreamConsumerRequestMarshaller">
            <summary>
            DeregisterStreamConsumer Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.DeregisterStreamConsumerRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.DeregisterStreamConsumerRequestMarshaller.Marshall(Amazon.Kinesis.Model.DeregisterStreamConsumerRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.DeregisterStreamConsumerRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.DeregisterStreamConsumerResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DeregisterStreamConsumer operation
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.DeregisterStreamConsumerResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.DeregisterStreamConsumerResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.DeregisterStreamConsumerResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.DescribeLimitsRequestMarshaller">
            <summary>
            DescribeLimits Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.DescribeLimitsRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.DescribeLimitsRequestMarshaller.Marshall(Amazon.Kinesis.Model.DescribeLimitsRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.DescribeLimitsRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.DescribeLimitsResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DescribeLimits operation
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.DescribeLimitsResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.DescribeLimitsResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.DescribeLimitsResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.DescribeStreamConsumerRequestMarshaller">
            <summary>
            DescribeStreamConsumer Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.DescribeStreamConsumerRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.DescribeStreamConsumerRequestMarshaller.Marshall(Amazon.Kinesis.Model.DescribeStreamConsumerRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.DescribeStreamConsumerRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.DescribeStreamConsumerResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DescribeStreamConsumer operation
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.DescribeStreamConsumerResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.DescribeStreamConsumerResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.DescribeStreamConsumerResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.DescribeStreamRequestMarshaller">
            <summary>
            DescribeStream Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.DescribeStreamRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.DescribeStreamRequestMarshaller.Marshall(Amazon.Kinesis.Model.DescribeStreamRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.DescribeStreamRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.DescribeStreamResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DescribeStream operation
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.DescribeStreamResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.DescribeStreamResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.DescribeStreamResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.DescribeStreamSummaryRequestMarshaller">
            <summary>
            DescribeStreamSummary Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.DescribeStreamSummaryRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.DescribeStreamSummaryRequestMarshaller.Marshall(Amazon.Kinesis.Model.DescribeStreamSummaryRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.DescribeStreamSummaryRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.DescribeStreamSummaryResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DescribeStreamSummary operation
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.DescribeStreamSummaryResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.DescribeStreamSummaryResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.DescribeStreamSummaryResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.DisableEnhancedMonitoringRequestMarshaller">
            <summary>
            DisableEnhancedMonitoring Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.DisableEnhancedMonitoringRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.DisableEnhancedMonitoringRequestMarshaller.Marshall(Amazon.Kinesis.Model.DisableEnhancedMonitoringRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.DisableEnhancedMonitoringRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.DisableEnhancedMonitoringResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DisableEnhancedMonitoring operation
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.DisableEnhancedMonitoringResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.DisableEnhancedMonitoringResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.DisableEnhancedMonitoringResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.EnableEnhancedMonitoringRequestMarshaller">
            <summary>
            EnableEnhancedMonitoring Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.EnableEnhancedMonitoringRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.EnableEnhancedMonitoringRequestMarshaller.Marshall(Amazon.Kinesis.Model.EnableEnhancedMonitoringRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.EnableEnhancedMonitoringRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.EnableEnhancedMonitoringResponseUnmarshaller">
            <summary>
            Response Unmarshaller for EnableEnhancedMonitoring operation
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.EnableEnhancedMonitoringResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.EnableEnhancedMonitoringResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.EnableEnhancedMonitoringResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.EnhancedMetricsUnmarshaller">
            <summary>
            Response Unmarshaller for EnhancedMetrics Object
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.EnhancedMetricsUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#Kinesis#Model#EnhancedMetrics,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.EnhancedMetricsUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.EnhancedMetricsUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.ExpiredIteratorExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for ExpiredIteratorException Object
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ExpiredIteratorExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ExpiredIteratorExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.ExpiredIteratorExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.ExpiredNextTokenExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for ExpiredNextTokenException Object
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ExpiredNextTokenExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ExpiredNextTokenExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.ExpiredNextTokenExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.GetRecordsRequestMarshaller">
            <summary>
            GetRecords Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.GetRecordsRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.GetRecordsRequestMarshaller.Marshall(Amazon.Kinesis.Model.GetRecordsRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.GetRecordsRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.GetRecordsResponseUnmarshaller">
            <summary>
            Response Unmarshaller for GetRecords operation
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.GetRecordsResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.GetRecordsResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.GetRecordsResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.GetShardIteratorRequestMarshaller">
            <summary>
            GetShardIterator Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.GetShardIteratorRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.GetShardIteratorRequestMarshaller.Marshall(Amazon.Kinesis.Model.GetShardIteratorRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.GetShardIteratorRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.GetShardIteratorResponseUnmarshaller">
            <summary>
            Response Unmarshaller for GetShardIterator operation
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.GetShardIteratorResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.GetShardIteratorResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.GetShardIteratorResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.HashKeyRangeUnmarshaller">
            <summary>
            Response Unmarshaller for HashKeyRange Object
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.HashKeyRangeUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#Kinesis#Model#HashKeyRange,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.HashKeyRangeUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.HashKeyRangeUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.IncreaseStreamRetentionPeriodRequestMarshaller">
            <summary>
            IncreaseStreamRetentionPeriod Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.IncreaseStreamRetentionPeriodRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.IncreaseStreamRetentionPeriodRequestMarshaller.Marshall(Amazon.Kinesis.Model.IncreaseStreamRetentionPeriodRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.IncreaseStreamRetentionPeriodRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.IncreaseStreamRetentionPeriodResponseUnmarshaller">
            <summary>
            Response Unmarshaller for IncreaseStreamRetentionPeriod operation
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.IncreaseStreamRetentionPeriodResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.IncreaseStreamRetentionPeriodResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.IncreaseStreamRetentionPeriodResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.InvalidArgumentExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for InvalidArgumentException Object
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.InvalidArgumentExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.InvalidArgumentExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.InvalidArgumentExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.KMSAccessDeniedExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for KMSAccessDeniedException Object
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.KMSAccessDeniedExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.KMSAccessDeniedExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.KMSAccessDeniedExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.KMSDisabledExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for KMSDisabledException Object
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.KMSDisabledExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.KMSDisabledExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.KMSDisabledExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.KMSInvalidStateExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for KMSInvalidStateException Object
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.KMSInvalidStateExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.KMSInvalidStateExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.KMSInvalidStateExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.KMSNotFoundExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for KMSNotFoundException Object
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.KMSNotFoundExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.KMSNotFoundExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.KMSNotFoundExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.KMSOptInRequiredExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for KMSOptInRequiredException Object
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.KMSOptInRequiredExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.KMSOptInRequiredExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.KMSOptInRequiredExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.KMSThrottlingExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for KMSThrottlingException Object
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.KMSThrottlingExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.KMSThrottlingExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.KMSThrottlingExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.LimitExceededExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for LimitExceededException Object
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.LimitExceededExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.LimitExceededExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.LimitExceededExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.ListShardsRequestMarshaller">
            <summary>
            ListShards Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ListShardsRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ListShardsRequestMarshaller.Marshall(Amazon.Kinesis.Model.ListShardsRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.ListShardsRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.ListShardsResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ListShards operation
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ListShardsResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ListShardsResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.ListShardsResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.ListStreamConsumersRequestMarshaller">
            <summary>
            ListStreamConsumers Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ListStreamConsumersRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ListStreamConsumersRequestMarshaller.Marshall(Amazon.Kinesis.Model.ListStreamConsumersRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.ListStreamConsumersRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.ListStreamConsumersResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ListStreamConsumers operation
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ListStreamConsumersResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ListStreamConsumersResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.ListStreamConsumersResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.ListStreamsRequestMarshaller">
            <summary>
            ListStreams Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ListStreamsRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ListStreamsRequestMarshaller.Marshall(Amazon.Kinesis.Model.ListStreamsRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.ListStreamsRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.ListStreamsResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ListStreams operation
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ListStreamsResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ListStreamsResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.ListStreamsResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.ListTagsForStreamRequestMarshaller">
            <summary>
            ListTagsForStream Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ListTagsForStreamRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ListTagsForStreamRequestMarshaller.Marshall(Amazon.Kinesis.Model.ListTagsForStreamRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.ListTagsForStreamRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.ListTagsForStreamResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ListTagsForStream operation
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ListTagsForStreamResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ListTagsForStreamResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.ListTagsForStreamResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.MergeShardsRequestMarshaller">
            <summary>
            MergeShards Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.MergeShardsRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.MergeShardsRequestMarshaller.Marshall(Amazon.Kinesis.Model.MergeShardsRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.MergeShardsRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.MergeShardsResponseUnmarshaller">
            <summary>
            Response Unmarshaller for MergeShards operation
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.MergeShardsResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.MergeShardsResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.MergeShardsResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.ProvisionedThroughputExceededExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for ProvisionedThroughputExceededException Object
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ProvisionedThroughputExceededExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ProvisionedThroughputExceededExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.ProvisionedThroughputExceededExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.PutRecordRequestMarshaller">
            <summary>
            PutRecord Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.PutRecordRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.PutRecordRequestMarshaller.Marshall(Amazon.Kinesis.Model.PutRecordRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.PutRecordRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.PutRecordResponseUnmarshaller">
            <summary>
            Response Unmarshaller for PutRecord operation
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.PutRecordResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.PutRecordResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.PutRecordResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.PutRecordsRequestEntryMarshaller">
            <summary>
            PutRecordsRequestEntry Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.PutRecordsRequestEntryMarshaller.Marshall(Amazon.Kinesis.Model.PutRecordsRequestEntry,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.Kinesis.Model.Internal.MarshallTransformations.PutRecordsRequestEntryMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.PutRecordsRequestMarshaller">
            <summary>
            PutRecords Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.PutRecordsRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.PutRecordsRequestMarshaller.Marshall(Amazon.Kinesis.Model.PutRecordsRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.PutRecordsRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.PutRecordsResponseUnmarshaller">
            <summary>
            Response Unmarshaller for PutRecords operation
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.PutRecordsResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.PutRecordsResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.PutRecordsResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.PutRecordsResultEntryUnmarshaller">
            <summary>
            Response Unmarshaller for PutRecordsResultEntry Object
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.PutRecordsResultEntryUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#Kinesis#Model#PutRecordsResultEntry,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.PutRecordsResultEntryUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.PutRecordsResultEntryUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.RecordUnmarshaller">
            <summary>
            Response Unmarshaller for Record Object
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.RecordUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#Kinesis#Model#Record,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.RecordUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.RecordUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.RegisterStreamConsumerRequestMarshaller">
            <summary>
            RegisterStreamConsumer Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.RegisterStreamConsumerRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.RegisterStreamConsumerRequestMarshaller.Marshall(Amazon.Kinesis.Model.RegisterStreamConsumerRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.RegisterStreamConsumerRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.RegisterStreamConsumerResponseUnmarshaller">
            <summary>
            Response Unmarshaller for RegisterStreamConsumer operation
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.RegisterStreamConsumerResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.RegisterStreamConsumerResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.RegisterStreamConsumerResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.RemoveTagsFromStreamRequestMarshaller">
            <summary>
            RemoveTagsFromStream Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.RemoveTagsFromStreamRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.RemoveTagsFromStreamRequestMarshaller.Marshall(Amazon.Kinesis.Model.RemoveTagsFromStreamRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.RemoveTagsFromStreamRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.RemoveTagsFromStreamResponseUnmarshaller">
            <summary>
            Response Unmarshaller for RemoveTagsFromStream operation
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.RemoveTagsFromStreamResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.RemoveTagsFromStreamResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.RemoveTagsFromStreamResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.ResourceInUseExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for ResourceInUseException Object
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ResourceInUseExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ResourceInUseExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.ResourceInUseExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.ResourceNotFoundExceptionUnmarshaller">
            <summary>
            Response Unmarshaller for ResourceNotFoundException Object
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ResourceNotFoundExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ResourceNotFoundExceptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,Amazon.Runtime.Internal.ErrorResponse)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <param name="errorResponse"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.ResourceNotFoundExceptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.SequenceNumberRangeUnmarshaller">
            <summary>
            Response Unmarshaller for SequenceNumberRange Object
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.SequenceNumberRangeUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#Kinesis#Model#SequenceNumberRange,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.SequenceNumberRangeUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.SequenceNumberRangeUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.ShardFilterMarshaller">
            <summary>
            ShardFilter Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ShardFilterMarshaller.Marshall(Amazon.Kinesis.Model.ShardFilter,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.Kinesis.Model.Internal.MarshallTransformations.ShardFilterMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.ShardUnmarshaller">
            <summary>
            Response Unmarshaller for Shard Object
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ShardUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#Kinesis#Model#Shard,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.ShardUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.ShardUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.SplitShardRequestMarshaller">
            <summary>
            SplitShard Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.SplitShardRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.SplitShardRequestMarshaller.Marshall(Amazon.Kinesis.Model.SplitShardRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.SplitShardRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.SplitShardResponseUnmarshaller">
            <summary>
            Response Unmarshaller for SplitShard operation
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.SplitShardResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.SplitShardResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.SplitShardResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.StartStreamEncryptionRequestMarshaller">
            <summary>
            StartStreamEncryption Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.StartStreamEncryptionRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.StartStreamEncryptionRequestMarshaller.Marshall(Amazon.Kinesis.Model.StartStreamEncryptionRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.StartStreamEncryptionRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.StartStreamEncryptionResponseUnmarshaller">
            <summary>
            Response Unmarshaller for StartStreamEncryption operation
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.StartStreamEncryptionResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.StartStreamEncryptionResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.StartStreamEncryptionResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.StopStreamEncryptionRequestMarshaller">
            <summary>
            StopStreamEncryption Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.StopStreamEncryptionRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.StopStreamEncryptionRequestMarshaller.Marshall(Amazon.Kinesis.Model.StopStreamEncryptionRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.StopStreamEncryptionRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.StopStreamEncryptionResponseUnmarshaller">
            <summary>
            Response Unmarshaller for StopStreamEncryption operation
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.StopStreamEncryptionResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.StopStreamEncryptionResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.StopStreamEncryptionResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.StreamDescriptionSummaryUnmarshaller">
            <summary>
            Response Unmarshaller for StreamDescriptionSummary Object
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.StreamDescriptionSummaryUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#Kinesis#Model#StreamDescriptionSummary,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.StreamDescriptionSummaryUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.StreamDescriptionSummaryUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.StreamDescriptionUnmarshaller">
            <summary>
            Response Unmarshaller for StreamDescription Object
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.StreamDescriptionUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#Kinesis#Model#StreamDescription,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.StreamDescriptionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.StreamDescriptionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.TagUnmarshaller">
            <summary>
            Response Unmarshaller for Tag Object
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.TagUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#Kinesis#Model#Tag,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.TagUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.TagUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.UpdateShardCountRequestMarshaller">
            <summary>
            UpdateShardCount Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.UpdateShardCountRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.UpdateShardCountRequestMarshaller.Marshall(Amazon.Kinesis.Model.UpdateShardCountRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.UpdateShardCountRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.Internal.MarshallTransformations.UpdateShardCountResponseUnmarshaller">
            <summary>
            Response Unmarshaller for UpdateShardCount operation
            </summary>  
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.UpdateShardCountResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.Kinesis.Model.Internal.MarshallTransformations.UpdateShardCountResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.Kinesis.Model.Internal.MarshallTransformations.UpdateShardCountResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.Kinesis.Model.InvalidArgumentException">
            <summary>
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.Model.InvalidArgumentException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidArgumentException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.Kinesis.Model.InvalidArgumentException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidArgumentException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.InvalidArgumentException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidArgumentException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.InvalidArgumentException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidArgumentException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.InvalidArgumentException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidArgumentException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.InvalidArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the InvalidArgumentException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.Kinesis.Model.InvalidArgumentException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.Kinesis.Model.KMSAccessDeniedException">
            <summary>
            The ciphertext references a key that doesn't exist or that you don't have access to.
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSAccessDeniedException.#ctor(System.String)">
            <summary>
            Constructs a new KMSAccessDeniedException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSAccessDeniedException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of KMSAccessDeniedException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSAccessDeniedException.#ctor(System.Exception)">
            <summary>
            Construct instance of KMSAccessDeniedException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSAccessDeniedException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of KMSAccessDeniedException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSAccessDeniedException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of KMSAccessDeniedException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSAccessDeniedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the KMSAccessDeniedException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSAccessDeniedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.Kinesis.Model.KMSDisabledException">
            <summary>
            The request was rejected because the specified customer master key (CMK) isn't enabled.
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSDisabledException.#ctor(System.String)">
            <summary>
            Constructs a new KMSDisabledException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSDisabledException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of KMSDisabledException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSDisabledException.#ctor(System.Exception)">
            <summary>
            Construct instance of KMSDisabledException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSDisabledException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of KMSDisabledException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSDisabledException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of KMSDisabledException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSDisabledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the KMSDisabledException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSDisabledException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.Kinesis.Model.KMSInvalidStateException">
            <summary>
            The request was rejected because the state of the specified resource isn't valid for
            this request. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">How
            Key State Affects Use of a Customer Master Key</a> in the <i>AWS Key Management Service
            Developer Guide</i>.
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSInvalidStateException.#ctor(System.String)">
            <summary>
            Constructs a new KMSInvalidStateException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSInvalidStateException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of KMSInvalidStateException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSInvalidStateException.#ctor(System.Exception)">
            <summary>
            Construct instance of KMSInvalidStateException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSInvalidStateException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of KMSInvalidStateException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSInvalidStateException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of KMSInvalidStateException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSInvalidStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the KMSInvalidStateException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSInvalidStateException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.Kinesis.Model.KMSNotFoundException">
            <summary>
            The request was rejected because the specified entity or resource can't be found.
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new KMSNotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of KMSNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSNotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of KMSNotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSNotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of KMSNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSNotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of KMSNotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the KMSNotFoundException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.Kinesis.Model.KMSOptInRequiredException">
            <summary>
            The AWS access key ID needs a subscription for the service.
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSOptInRequiredException.#ctor(System.String)">
            <summary>
            Constructs a new KMSOptInRequiredException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSOptInRequiredException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of KMSOptInRequiredException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSOptInRequiredException.#ctor(System.Exception)">
            <summary>
            Construct instance of KMSOptInRequiredException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSOptInRequiredException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of KMSOptInRequiredException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSOptInRequiredException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of KMSOptInRequiredException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSOptInRequiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the KMSOptInRequiredException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSOptInRequiredException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.Kinesis.Model.KMSThrottlingException">
            <summary>
            The request was denied due to request throttling. For more information about throttling,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html#requests-per-second">Limits</a>
            in the <i>AWS Key Management Service Developer Guide</i>.
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSThrottlingException.#ctor(System.String)">
            <summary>
            Constructs a new KMSThrottlingException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSThrottlingException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of KMSThrottlingException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSThrottlingException.#ctor(System.Exception)">
            <summary>
            Construct instance of KMSThrottlingException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSThrottlingException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of KMSThrottlingException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSThrottlingException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of KMSThrottlingException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSThrottlingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the KMSThrottlingException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.Kinesis.Model.KMSThrottlingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.Kinesis.Model.LimitExceededException">
            <summary>
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.Model.LimitExceededException.#ctor(System.String)">
            <summary>
            Constructs a new LimitExceededException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.Kinesis.Model.LimitExceededException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of LimitExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.LimitExceededException.#ctor(System.Exception)">
            <summary>
            Construct instance of LimitExceededException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.LimitExceededException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LimitExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.LimitExceededException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LimitExceededException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.LimitExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the LimitExceededException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.Kinesis.Model.LimitExceededException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.Kinesis.Model.ListShardsRequest">
            <summary>
            Container for the parameters to the ListShards operation.
            Lists the shards in a stream and provides information about each shard. This operation
            has a limit of 100 transactions per second per data stream.
            
             <important> 
            <para>
            This API is a new operation that is used by the Amazon Kinesis Client Library (KCL).
            If you have a fine-grained IAM policy that only allows specific operations, you must
            update your policy to allow calls to this API. For more information, see <a href="https://docs.aws.amazon.com/streams/latest/dev/controlling-access.html">Controlling
            Access to Amazon Kinesis Data Streams Resources Using IAM</a>.
            </para>
             </important>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ListShardsRequest.ExclusiveStartShardId">
            <summary>
            Gets and sets the property ExclusiveStartShardId. 
            <para>
            Specify this parameter to indicate that you want to list the shards starting with
            the shard whose ID immediately follows <code>ExclusiveStartShardId</code>.
            </para>
             
            <para>
            If you don't specify this parameter, the default behavior is for <code>ListShards</code>
            to list the shards starting with the first one in the stream.
            </para>
             
            <para>
            You cannot specify this parameter if you specify <code>NextToken</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ListShardsRequest.MaxResults">
            <summary>
            Gets and sets the property MaxResults. 
            <para>
            The maximum number of shards to return in a single call to <code>ListShards</code>.
            The minimum value you can specify for this parameter is 1, and the maximum is 10,000,
            which is also the default.
            </para>
             
            <para>
            When the number of shards to be listed is greater than the value of <code>MaxResults</code>,
            the response contains a <code>NextToken</code> value that you can use in a subsequent
            call to <code>ListShards</code> to list the next set of shards.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ListShardsRequest.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            When the number of shards in the data stream is greater than the default value for
            the <code>MaxResults</code> parameter, or if you explicitly specify a value for <code>MaxResults</code>
            that is less than the number of shards in the data stream, the response includes a
            pagination token named <code>NextToken</code>. You can specify this <code>NextToken</code>
            value in a subsequent call to <code>ListShards</code> to list the next set of shards.
            </para>
             
            <para>
            Don't specify <code>StreamName</code> or <code>StreamCreationTimestamp</code> if you
            specify <code>NextToken</code> because the latter unambiguously identifies the stream.
            </para>
             
            <para>
            You can optionally specify a value for the <code>MaxResults</code> parameter when
            you specify <code>NextToken</code>. If you specify a <code>MaxResults</code> value
            that is less than the number of shards that the operation returns if you don't specify
            <code>MaxResults</code>, the response will contain a new <code>NextToken</code> value.
            You can use the new <code>NextToken</code> value in a subsequent call to the <code>ListShards</code>
            operation.
            </para>
             <important> 
            <para>
            Tokens expire after 300 seconds. When you obtain a value for <code>NextToken</code>
            in the response to a call to <code>ListShards</code>, you have 300 seconds to use
            that value. If you specify an expired token in a call to <code>ListShards</code>,
            you get <code>ExpiredNextTokenException</code>.
            </para>
             </important>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ListShardsRequest.ShardFilter">
            <summary>
            Gets and sets the property ShardFilter.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ListShardsRequest.StreamCreationTimestamp">
            <summary>
            Gets and sets the property StreamCreationTimestamp. 
            <para>
            Specify this input parameter to distinguish data streams that have the same name.
            For example, if you create a data stream and then delete it, and you later create
            another data stream with the same name, you can use this input parameter to specify
            which of the two streams you want to list the shards for.
            </para>
             
            <para>
            You cannot specify this parameter if you specify the <code>NextToken</code> parameter.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ListShardsRequest.StreamName">
            <summary>
            Gets and sets the property StreamName. 
            <para>
            The name of the data stream whose shards you want to list. 
            </para>
             
            <para>
            You cannot specify this parameter if you specify the <code>NextToken</code> parameter.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.ListShardsResponse">
            <summary>
            This is the response object from the ListShards operation.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ListShardsResponse.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            When the number of shards in the data stream is greater than the default value for
            the <code>MaxResults</code> parameter, or if you explicitly specify a value for <code>MaxResults</code>
            that is less than the number of shards in the data stream, the response includes a
            pagination token named <code>NextToken</code>. You can specify this <code>NextToken</code>
            value in a subsequent call to <code>ListShards</code> to list the next set of shards.
            For more information about the use of this pagination token when calling the <code>ListShards</code>
            operation, see <a>ListShardsInput$NextToken</a>.
            </para>
             <important> 
            <para>
            Tokens expire after 300 seconds. When you obtain a value for <code>NextToken</code>
            in the response to a call to <code>ListShards</code>, you have 300 seconds to use
            that value. If you specify an expired token in a call to <code>ListShards</code>,
            you get <code>ExpiredNextTokenException</code>.
            </para>
             </important>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ListShardsResponse.Shards">
            <summary>
            Gets and sets the property Shards. 
            <para>
            An array of JSON objects. Each object represents one shard and specifies the IDs of
            the shard, the shard's parent, and the shard that's adjacent to the shard's parent.
            Each object also contains the starting and ending hash keys and the starting and ending
            sequence numbers for the shard.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.ListStreamConsumersRequest">
            <summary>
            Container for the parameters to the ListStreamConsumers operation.
            Lists the consumers registered to receive data from a stream using enhanced fan-out,
            and provides information about each consumer.
            
             
            <para>
            This operation has a limit of 5 transactions per second per stream.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ListStreamConsumersRequest.MaxResults">
            <summary>
            Gets and sets the property MaxResults. 
            <para>
            The maximum number of consumers that you want a single call of <code>ListStreamConsumers</code>
            to return.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ListStreamConsumersRequest.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            When the number of consumers that are registered with the data stream is greater than
            the default value for the <code>MaxResults</code> parameter, or if you explicitly
            specify a value for <code>MaxResults</code> that is less than the number of consumers
            that are registered with the data stream, the response includes a pagination token
            named <code>NextToken</code>. You can specify this <code>NextToken</code> value in
            a subsequent call to <code>ListStreamConsumers</code> to list the next set of registered
            consumers.
            </para>
             
            <para>
            Don't specify <code>StreamName</code> or <code>StreamCreationTimestamp</code> if you
            specify <code>NextToken</code> because the latter unambiguously identifies the stream.
            </para>
             
            <para>
            You can optionally specify a value for the <code>MaxResults</code> parameter when
            you specify <code>NextToken</code>. If you specify a <code>MaxResults</code> value
            that is less than the number of consumers that the operation returns if you don't
            specify <code>MaxResults</code>, the response will contain a new <code>NextToken</code>
            value. You can use the new <code>NextToken</code> value in a subsequent call to the
            <code>ListStreamConsumers</code> operation to list the next set of consumers.
            </para>
             <important> 
            <para>
            Tokens expire after 300 seconds. When you obtain a value for <code>NextToken</code>
            in the response to a call to <code>ListStreamConsumers</code>, you have 300 seconds
            to use that value. If you specify an expired token in a call to <code>ListStreamConsumers</code>,
            you get <code>ExpiredNextTokenException</code>.
            </para>
             </important>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ListStreamConsumersRequest.StreamARN">
            <summary>
            Gets and sets the property StreamARN. 
            <para>
            The ARN of the Kinesis data stream for which you want to list the registered consumers.
            For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kinesis-streams">Amazon
            Resource Names (ARNs) and AWS Service Namespaces</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ListStreamConsumersRequest.StreamCreationTimestamp">
            <summary>
            Gets and sets the property StreamCreationTimestamp. 
            <para>
            Specify this input parameter to distinguish data streams that have the same name.
            For example, if you create a data stream and then delete it, and you later create
            another data stream with the same name, you can use this input parameter to specify
            which of the two streams you want to list the consumers for. 
            </para>
             
            <para>
            You can't specify this parameter if you specify the NextToken parameter. 
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.ListStreamConsumersResponse">
            <summary>
            This is the response object from the ListStreamConsumers operation.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ListStreamConsumersResponse.Consumers">
            <summary>
            Gets and sets the property Consumers. 
            <para>
            An array of JSON objects. Each object represents one registered consumer.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ListStreamConsumersResponse.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            When the number of consumers that are registered with the data stream is greater than
            the default value for the <code>MaxResults</code> parameter, or if you explicitly
            specify a value for <code>MaxResults</code> that is less than the number of registered
            consumers, the response includes a pagination token named <code>NextToken</code>.
            You can specify this <code>NextToken</code> value in a subsequent call to <code>ListStreamConsumers</code>
            to list the next set of registered consumers. For more information about the use of
            this pagination token when calling the <code>ListStreamConsumers</code> operation,
            see <a>ListStreamConsumersInput$NextToken</a>.
            </para>
             <important> 
            <para>
            Tokens expire after 300 seconds. When you obtain a value for <code>NextToken</code>
            in the response to a call to <code>ListStreamConsumers</code>, you have 300 seconds
            to use that value. If you specify an expired token in a call to <code>ListStreamConsumers</code>,
            you get <code>ExpiredNextTokenException</code>.
            </para>
             </important>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.ListStreamsRequest">
            <summary>
            Container for the parameters to the ListStreams operation.
            Lists your Kinesis data streams.
            
             
            <para>
            The number of streams may be too large to return from a single call to <code>ListStreams</code>.
            You can limit the number of returned streams using the <code>Limit</code> parameter.
            If you do not specify a value for the <code>Limit</code> parameter, Kinesis Data Streams
            uses the default limit, which is currently 10.
            </para>
             
            <para>
            You can detect if there are more streams available to list by using the <code>HasMoreStreams</code>
            flag from the returned output. If there are more streams available, you can request
            more streams by using the name of the last stream returned by the <code>ListStreams</code>
            request in the <code>ExclusiveStartStreamName</code> parameter in a subsequent request
            to <code>ListStreams</code>. The group of stream names returned by the subsequent
            request is then added to the list. You can continue this process until all the stream
            names have been collected in the list. 
            </para>
             
            <para>
             <a>ListStreams</a> has a limit of five transactions per second per account.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ListStreamsRequest.ExclusiveStartStreamName">
            <summary>
            Gets and sets the property ExclusiveStartStreamName. 
            <para>
            The name of the stream to start the list with.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ListStreamsRequest.Limit">
            <summary>
            Gets and sets the property Limit. 
            <para>
            The maximum number of streams to list.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.ListStreamsResponse">
            <summary>
            Represents the output for <code>ListStreams</code>.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ListStreamsResponse.HasMoreStreams">
            <summary>
            Gets and sets the property HasMoreStreams. 
            <para>
            If set to <code>true</code>, there are more streams available to list.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ListStreamsResponse.StreamNames">
            <summary>
            Gets and sets the property StreamNames. 
            <para>
            The names of the streams that are associated with the AWS account making the <code>ListStreams</code>
            request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.ListTagsForStreamRequest">
            <summary>
            Container for the parameters to the ListTagsForStream operation.
            Lists the tags for the specified Kinesis data stream. This operation has a limit of
            five transactions per second per account.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ListTagsForStreamRequest.ExclusiveStartTagKey">
            <summary>
            Gets and sets the property ExclusiveStartTagKey. 
            <para>
            The key to use as the starting point for the list of tags. If this parameter is set,
            <code>ListTagsForStream</code> gets all tags that occur after <code>ExclusiveStartTagKey</code>.
            
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ListTagsForStreamRequest.Limit">
            <summary>
            Gets and sets the property Limit. 
            <para>
            The number of tags to return. If this number is less than the total number of tags
            associated with the stream, <code>HasMoreTags</code> is set to <code>true</code>.
            To list additional tags, set <code>ExclusiveStartTagKey</code> to the last key in
            the response.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ListTagsForStreamRequest.StreamName">
            <summary>
            Gets and sets the property StreamName. 
            <para>
            The name of the stream.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.ListTagsForStreamResponse">
            <summary>
            Represents the output for <code>ListTagsForStream</code>.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ListTagsForStreamResponse.HasMoreTags">
            <summary>
            Gets and sets the property HasMoreTags. 
            <para>
            If set to <code>true</code>, more tags are available. To request additional tags,
            set <code>ExclusiveStartTagKey</code> to the key of the last tag returned.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ListTagsForStreamResponse.Tags">
            <summary>
            Gets and sets the property Tags. 
            <para>
            A list of tags associated with <code>StreamName</code>, starting with the first tag
            after <code>ExclusiveStartTagKey</code> and up to the specified <code>Limit</code>.
            
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.MergeShardsRequest">
            <summary>
            Container for the parameters to the MergeShards operation.
            Merges two adjacent shards in a Kinesis data stream and combines them into a single
            shard to reduce the stream's capacity to ingest and transport data. Two shards are
            considered adjacent if the union of the hash key ranges for the two shards form a
            contiguous set with no gaps. For example, if you have two shards, one with a hash
            key range of 276...381 and the other with a hash key range of 382...454, then you
            could merge these two shards into a single shard that would have a hash key range
            of 276...454. After the merge, the single child shard receives data for all hash key
            values covered by the two parent shards.
            
             
            <para>
             <code>MergeShards</code> is called when there is a need to reduce the overall capacity
            of a stream because of excess capacity that is not being used. You must specify the
            shard to be merged and the adjacent shard for a stream. For more information about
            merging shards, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-resharding-merge.html">Merge
            Two Shards</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             
            <para>
            If the stream is in the <code>ACTIVE</code> state, you can call <code>MergeShards</code>.
            If a stream is in the <code>CREATING</code>, <code>UPDATING</code>, or <code>DELETING</code>
            state, <code>MergeShards</code> returns a <code>ResourceInUseException</code>. If
            the specified stream does not exist, <code>MergeShards</code> returns a <code>ResourceNotFoundException</code>.
            
            </para>
             
            <para>
            You can use <a>DescribeStream</a> to check the state of the stream, which is returned
            in <code>StreamStatus</code>.
            </para>
             
            <para>
             <code>MergeShards</code> is an asynchronous operation. Upon receiving a <code>MergeShards</code>
            request, Amazon Kinesis Data Streams immediately returns a response and sets the <code>StreamStatus</code>
            to <code>UPDATING</code>. After the operation is completed, Kinesis Data Streams sets
            the <code>StreamStatus</code> to <code>ACTIVE</code>. Read and write operations continue
            to work while the stream is in the <code>UPDATING</code> state. 
            </para>
             
            <para>
            You use <a>DescribeStream</a> to determine the shard IDs that are specified in the
            <code>MergeShards</code> request. 
            </para>
             
            <para>
            If you try to operate on too many streams in parallel using <a>CreateStream</a>, <a>DeleteStream</a>,
            <code>MergeShards</code>, or <a>SplitShard</a>, you receive a <code>LimitExceededException</code>.
            
            </para>
             
            <para>
             <code>MergeShards</code> has a limit of five transactions per second per account.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.MergeShardsRequest.AdjacentShardToMerge">
            <summary>
            Gets and sets the property AdjacentShardToMerge. 
            <para>
            The shard ID of the adjacent shard for the merge.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.MergeShardsRequest.ShardToMerge">
            <summary>
            Gets and sets the property ShardToMerge. 
            <para>
            The shard ID of the shard to combine with the adjacent shard for the merge.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.MergeShardsRequest.StreamName">
            <summary>
            Gets and sets the property StreamName. 
            <para>
            The name of the stream for the merge.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.MergeShardsResponse">
            <summary>
            This is the response object from the MergeShards operation.
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.ProvisionedThroughputExceededException">
            <summary>
            The request rate for the stream is too high, or the requested data is too large for
            the available throughput. Reduce the frequency or size of your requests. For more
            information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams
            Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>, and <a href="https://docs.aws.amazon.com/general/latest/gr/api-retries.html">Error
            Retries and Exponential Backoff in AWS</a> in the <i>AWS General Reference</i>.
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.Model.ProvisionedThroughputExceededException.#ctor(System.String)">
            <summary>
            Constructs a new ProvisionedThroughputExceededException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.Kinesis.Model.ProvisionedThroughputExceededException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ProvisionedThroughputExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.ProvisionedThroughputExceededException.#ctor(System.Exception)">
            <summary>
            Construct instance of ProvisionedThroughputExceededException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.ProvisionedThroughputExceededException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ProvisionedThroughputExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.ProvisionedThroughputExceededException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ProvisionedThroughputExceededException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.ProvisionedThroughputExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the ProvisionedThroughputExceededException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.Kinesis.Model.ProvisionedThroughputExceededException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.Kinesis.Model.PutRecordRequest">
            <summary>
            Container for the parameters to the PutRecord operation.
            Writes a single data record into an Amazon Kinesis data stream. Call <code>PutRecord</code>
            to send data into the stream for real-time ingestion and subsequent processing, one
            record at a time. Each shard can support writes up to 1,000 records per second, up
            to a maximum data write total of 1 MiB per second.
            
             
            <para>
            You must specify the name of the stream that captures, stores, and transports the
            data; a partition key; and the data blob itself.
            </para>
             
            <para>
            The data blob can be any type of data; for example, a segment from a log file, geographic/location
            data, website clickstream data, and so on.
            </para>
             
            <para>
            The partition key is used by Kinesis Data Streams to distribute data across shards.
            Kinesis Data Streams segregates the data records that belong to a stream into multiple
            shards, using the partition key associated with each data record to determine the
            shard to which a given data record belongs.
            </para>
             
            <para>
            Partition keys are Unicode strings, with a maximum length limit of 256 characters
            for each key. An MD5 hash function is used to map partition keys to 128-bit integer
            values and to map associated data records to shards using the hash key ranges of the
            shards. You can override hashing the partition key to determine the shard by explicitly
            specifying a hash value using the <code>ExplicitHashKey</code> parameter. For more
            information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-add-data-to-stream">Adding
            Data to a Stream</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             
            <para>
             <code>PutRecord</code> returns the shard ID of where the data record was placed and
            the sequence number that was assigned to the data record.
            </para>
             
            <para>
            Sequence numbers increase over time and are specific to a shard within a stream, not
            across all shards within a stream. To guarantee strictly increasing ordering, write
            serially to a shard and use the <code>SequenceNumberForOrdering</code> parameter.
            For more information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-add-data-to-stream">Adding
            Data to a Stream</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             <important> 
            <para>
            After you write a record to a stream, you cannot modify that record or its order within
            the stream.
            </para>
             </important> 
            <para>
            If a <code>PutRecord</code> request cannot be processed because of insufficient provisioned
            throughput on the shard involved in the request, <code>PutRecord</code> throws <code>ProvisionedThroughputExceededException</code>.
            
            </para>
             
            <para>
            By default, data records are accessible for 24 hours from the time that they are added
            to a stream. You can use <a>IncreaseStreamRetentionPeriod</a> or <a>DecreaseStreamRetentionPeriod</a>
            to modify this retention period.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.PutRecordRequest.Data">
            <summary>
            Gets and sets the property Data. 
            <para>
            The data blob to put into the record, which is base64-encoded when the blob is serialized.
            When the data blob (the payload before base64-encoding) is added to the partition
            key size, the total size must not exceed the maximum record size (1 MiB).
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.PutRecordRequest.ExplicitHashKey">
            <summary>
            Gets and sets the property ExplicitHashKey. 
            <para>
            The hash value used to explicitly determine the shard the data record is assigned
            to by overriding the partition key hash.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.PutRecordRequest.PartitionKey">
            <summary>
            Gets and sets the property PartitionKey. 
            <para>
            Determines which shard in the stream the data record is assigned to. Partition keys
            are Unicode strings with a maximum length limit of 256 characters for each key. Amazon
            Kinesis Data Streams uses the partition key as input to a hash function that maps
            the partition key and associated data to a specific shard. Specifically, an MD5 hash
            function is used to map partition keys to 128-bit integer values and to map associated
            data records to shards. As a result of this hashing mechanism, all data records with
            the same partition key map to the same shard within the stream.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.PutRecordRequest.SequenceNumberForOrdering">
            <summary>
            Gets and sets the property SequenceNumberForOrdering. 
            <para>
            Guarantees strictly increasing sequence numbers, for puts from the same client and
            to the same partition key. Usage: set the <code>SequenceNumberForOrdering</code> of
            record <i>n</i> to the sequence number of record <i>n-1</i> (as returned in the result
            when putting record <i>n-1</i>). If this parameter is not set, records are coarsely
            ordered based on arrival time.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.PutRecordRequest.StreamName">
            <summary>
            Gets and sets the property StreamName. 
            <para>
            The name of the stream to put the data record into.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.PutRecordResponse">
            <summary>
            Represents the output for <code>PutRecord</code>.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.PutRecordResponse.EncryptionType">
            <summary>
            Gets and sets the property EncryptionType. 
            <para>
            The encryption type to use on the record. This parameter can be one of the following
            values:
            </para>
             <ul> <li> 
            <para>
             <code>NONE</code>: Do not encrypt the records in the stream.
            </para>
             </li> <li> 
            <para>
             <code>KMS</code>: Use server-side encryption on the records in the stream using a
            customer-managed AWS KMS key.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.PutRecordResponse.SequenceNumber">
            <summary>
            Gets and sets the property SequenceNumber. 
            <para>
            The sequence number identifier that was assigned to the put data record. The sequence
            number for the record is unique across all records in the stream. A sequence number
            is the identifier associated with every record put into the stream.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.PutRecordResponse.ShardId">
            <summary>
            Gets and sets the property ShardId. 
            <para>
            The shard ID of the shard where the data record was placed.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.PutRecordsRequest">
            <summary>
            Container for the parameters to the PutRecords operation.
            Writes multiple data records into a Kinesis data stream in a single call (also referred
            to as a <code>PutRecords</code> request). Use this operation to send data into the
            stream for data ingestion and processing. 
            
             
            <para>
            Each <code>PutRecords</code> request can support up to 500 records. Each record in
            the request can be as large as 1 MiB, up to a limit of 5 MiB for the entire request,
            including partition keys. Each shard can support writes up to 1,000 records per second,
            up to a maximum data write total of 1 MiB per second.
            </para>
             
            <para>
            You must specify the name of the stream that captures, stores, and transports the
            data; and an array of request <code>Records</code>, with each record in the array
            requiring a partition key and data blob. The record size limit applies to the total
            size of the partition key and data blob.
            </para>
             
            <para>
            The data blob can be any type of data; for example, a segment from a log file, geographic/location
            data, website clickstream data, and so on.
            </para>
             
            <para>
            The partition key is used by Kinesis Data Streams as input to a hash function that
            maps the partition key and associated data to a specific shard. An MD5 hash function
            is used to map partition keys to 128-bit integer values and to map associated data
            records to shards. As a result of this hashing mechanism, all data records with the
            same partition key map to the same shard within the stream. For more information,
            see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-add-data-to-stream">Adding
            Data to a Stream</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             
            <para>
            Each record in the <code>Records</code> array may include an optional parameter, <code>ExplicitHashKey</code>,
            which overrides the partition key to shard mapping. This parameter allows a data producer
            to determine explicitly the shard where the record is stored. For more information,
            see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-putrecords">Adding
            Multiple Records with PutRecords</a> in the <i>Amazon Kinesis Data Streams Developer
            Guide</i>.
            </para>
             
            <para>
            The <code>PutRecords</code> response includes an array of response <code>Records</code>.
            Each record in the response array directly correlates with a record in the request
            array using natural ordering, from the top to the bottom of the request and response.
            The response <code>Records</code> array always includes the same number of records
            as the request array.
            </para>
             
            <para>
            The response <code>Records</code> array includes both successfully and unsuccessfully
            processed records. Kinesis Data Streams attempts to process all records in each <code>PutRecords</code>
            request. A single record failure does not stop the processing of subsequent records.
            As a result, PutRecords doesn't guarantee the ordering of records. If you need to
            read records in the same order they are written to the stream, use <a>PutRecord</a>
            instead of <code>PutRecords</code>, and write to the same shard.
            </para>
             
            <para>
            A successfully processed record includes <code>ShardId</code> and <code>SequenceNumber</code>
            values. The <code>ShardId</code> parameter identifies the shard in the stream where
            the record is stored. The <code>SequenceNumber</code> parameter is an identifier assigned
            to the put record, unique to all records in the stream.
            </para>
             
            <para>
            An unsuccessfully processed record includes <code>ErrorCode</code> and <code>ErrorMessage</code>
            values. <code>ErrorCode</code> reflects the type of error and can be one of the following
            values: <code>ProvisionedThroughputExceededException</code> or <code>InternalFailure</code>.
            <code>ErrorMessage</code> provides more detailed information about the <code>ProvisionedThroughputExceededException</code>
            exception including the account ID, stream name, and shard ID of the record that was
            throttled. For more information about partially successful responses, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-add-data-to-stream.html#kinesis-using-sdk-java-putrecords">Adding
            Multiple Records with PutRecords</a> in the <i>Amazon Kinesis Data Streams Developer
            Guide</i>.
            </para>
             <important> 
            <para>
            After you write a record to a stream, you cannot modify that record or its order within
            the stream.
            </para>
             </important> 
            <para>
            By default, data records are accessible for 24 hours from the time that they are added
            to a stream. You can use <a>IncreaseStreamRetentionPeriod</a> or <a>DecreaseStreamRetentionPeriod</a>
            to modify this retention period.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.PutRecordsRequest.Records">
            <summary>
            Gets and sets the property Records. 
            <para>
            The records associated with the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.PutRecordsRequest.StreamName">
            <summary>
            Gets and sets the property StreamName. 
            <para>
            The stream name associated with the request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.PutRecordsRequestEntry">
            <summary>
            Represents the output for <code>PutRecords</code>.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.PutRecordsRequestEntry.Data">
            <summary>
            Gets and sets the property Data. 
            <para>
            The data blob to put into the record, which is base64-encoded when the blob is serialized.
            When the data blob (the payload before base64-encoding) is added to the partition
            key size, the total size must not exceed the maximum record size (1 MiB).
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.PutRecordsRequestEntry.ExplicitHashKey">
            <summary>
            Gets and sets the property ExplicitHashKey. 
            <para>
            The hash value used to determine explicitly the shard that the data record is assigned
            to by overriding the partition key hash.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.PutRecordsRequestEntry.PartitionKey">
            <summary>
            Gets and sets the property PartitionKey. 
            <para>
            Determines which shard in the stream the data record is assigned to. Partition keys
            are Unicode strings with a maximum length limit of 256 characters for each key. Amazon
            Kinesis Data Streams uses the partition key as input to a hash function that maps
            the partition key and associated data to a specific shard. Specifically, an MD5 hash
            function is used to map partition keys to 128-bit integer values and to map associated
            data records to shards. As a result of this hashing mechanism, all data records with
            the same partition key map to the same shard within the stream.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.PutRecordsResponse">
            <summary>
            <code>PutRecords</code> results.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.PutRecordsResponse.EncryptionType">
            <summary>
            Gets and sets the property EncryptionType. 
            <para>
            The encryption type used on the records. This parameter can be one of the following
            values:
            </para>
             <ul> <li> 
            <para>
             <code>NONE</code>: Do not encrypt the records.
            </para>
             </li> <li> 
            <para>
             <code>KMS</code>: Use server-side encryption on the records using a customer-managed
            AWS KMS key.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.PutRecordsResponse.FailedRecordCount">
            <summary>
            Gets and sets the property FailedRecordCount. 
            <para>
            The number of unsuccessfully processed records in a <code>PutRecords</code> request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.PutRecordsResponse.Records">
            <summary>
            Gets and sets the property Records. 
            <para>
            An array of successfully and unsuccessfully processed record results, correlated with
            the request by natural ordering. A record that is successfully added to a stream includes
            <code>SequenceNumber</code> and <code>ShardId</code> in the result. A record that
            fails to be added to a stream includes <code>ErrorCode</code> and <code>ErrorMessage</code>
            in the result.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.PutRecordsResultEntry">
            <summary>
            Represents the result of an individual record from a <code>PutRecords</code> request.
            A record that is successfully added to a stream includes <code>SequenceNumber</code>
            and <code>ShardId</code> in the result. A record that fails to be added to the stream
            includes <code>ErrorCode</code> and <code>ErrorMessage</code> in the result.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.PutRecordsResultEntry.ErrorCode">
            <summary>
            Gets and sets the property ErrorCode. 
            <para>
            The error code for an individual record result. <code>ErrorCodes</code> can be either
            <code>ProvisionedThroughputExceededException</code> or <code>InternalFailure</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.PutRecordsResultEntry.ErrorMessage">
            <summary>
            Gets and sets the property ErrorMessage. 
            <para>
            The error message for an individual record result. An <code>ErrorCode</code> value
            of <code>ProvisionedThroughputExceededException</code> has an error message that includes
            the account ID, stream name, and shard ID. An <code>ErrorCode</code> value of <code>InternalFailure</code>
            has the error message <code>"Internal Service Failure"</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.PutRecordsResultEntry.SequenceNumber">
            <summary>
            Gets and sets the property SequenceNumber. 
            <para>
            The sequence number for an individual record result.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.PutRecordsResultEntry.ShardId">
            <summary>
            Gets and sets the property ShardId. 
            <para>
            The shard ID for an individual record result.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.Record">
            <summary>
            The unit of data of the Kinesis data stream, which is composed of a sequence number,
            a partition key, and a data blob.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.Record.ApproximateArrivalTimestamp">
            <summary>
            Gets and sets the property ApproximateArrivalTimestamp. 
            <para>
            The approximate time that the record was inserted into the stream.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.Record.Data">
            <summary>
            Gets and sets the property Data. 
            <para>
            The data blob. The data in the blob is both opaque and immutable to Kinesis Data Streams,
            which does not inspect, interpret, or change the data in the blob in any way. When
            the data blob (the payload before base64-encoding) is added to the partition key size,
            the total size must not exceed the maximum record size (1 MiB).
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.Record.EncryptionType">
            <summary>
            Gets and sets the property EncryptionType. 
            <para>
            The encryption type used on the record. This parameter can be one of the following
            values:
            </para>
             <ul> <li> 
            <para>
             <code>NONE</code>: Do not encrypt the records in the stream.
            </para>
             </li> <li> 
            <para>
             <code>KMS</code>: Use server-side encryption on the records in the stream using a
            customer-managed AWS KMS key.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.Record.PartitionKey">
            <summary>
            Gets and sets the property PartitionKey. 
            <para>
            Identifies which shard in the stream the data record is assigned to.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.Record.SequenceNumber">
            <summary>
            Gets and sets the property SequenceNumber. 
            <para>
            The unique identifier of the record within its shard.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.RegisterStreamConsumerRequest">
            <summary>
            Container for the parameters to the RegisterStreamConsumer operation.
            Registers a consumer with a Kinesis data stream. When you use this operation, the
            consumer you register can then call <a>SubscribeToShard</a> to receive data from the
            stream using enhanced fan-out, at a rate of up to 2 MiB per second for every shard
            you subscribe to. This rate is unaffected by the total number of consumers that read
            from the same stream.
            
             
            <para>
            You can register up to 20 consumers per stream. A given consumer can only be registered
            with one stream at a time.
            </para>
             
            <para>
            For an example of how to use this operations, see <a href="/streams/latest/dev/building-enhanced-consumers-api.html">Enhanced
            Fan-Out Using the Kinesis Data Streams API</a>.
            </para>
             
            <para>
            The use of this operation has a limit of five transactions per second per account.
            Also, only 5 consumers can be created simultaneously. In other words, you cannot have
            more than 5 consumers in a <code>CREATING</code> status at the same time. Registering
            a 6th consumer while there are 5 in a <code>CREATING</code> status results in a <code>LimitExceededException</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.RegisterStreamConsumerRequest.ConsumerName">
            <summary>
            Gets and sets the property ConsumerName. 
            <para>
            For a given Kinesis data stream, each consumer must have a unique name. However, consumer
            names don't have to be unique across data streams.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.RegisterStreamConsumerRequest.StreamARN">
            <summary>
            Gets and sets the property StreamARN. 
            <para>
            The ARN of the Kinesis data stream that you want to register the consumer with. For
            more info, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kinesis-streams">Amazon
            Resource Names (ARNs) and AWS Service Namespaces</a>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.RegisterStreamConsumerResponse">
            <summary>
            This is the response object from the RegisterStreamConsumer operation.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.RegisterStreamConsumerResponse.Consumer">
            <summary>
            Gets and sets the property Consumer. 
            <para>
            An object that represents the details of the consumer you registered. When you register
            a consumer, it gets an ARN that is generated by Kinesis Data Streams.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.RemoveTagsFromStreamRequest">
            <summary>
            Container for the parameters to the RemoveTagsFromStream operation.
            Removes tags from the specified Kinesis data stream. Removed tags are deleted and
            cannot be recovered after this operation successfully completes.
            
             
            <para>
            If you specify a tag that does not exist, it is ignored.
            </para>
             
            <para>
             <a>RemoveTagsFromStream</a> has a limit of five transactions per second per account.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.RemoveTagsFromStreamRequest.StreamName">
            <summary>
            Gets and sets the property StreamName. 
            <para>
            The name of the stream.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.RemoveTagsFromStreamRequest.TagKeys">
            <summary>
            Gets and sets the property TagKeys. 
            <para>
            A list of tag keys. Each corresponding tag is removed from the stream.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.RemoveTagsFromStreamResponse">
            <summary>
            This is the response object from the RemoveTagsFromStream operation.
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.ResourceInUseException">
            <summary>
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.Model.ResourceInUseException.#ctor(System.String)">
            <summary>
            Constructs a new ResourceInUseException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.Kinesis.Model.ResourceInUseException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ResourceInUseException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.ResourceInUseException.#ctor(System.Exception)">
            <summary>
            Construct instance of ResourceInUseException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.ResourceInUseException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ResourceInUseException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.ResourceInUseException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ResourceInUseException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.ResourceInUseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the ResourceInUseException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.Kinesis.Model.ResourceInUseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            <summary>
            The requested resource could not be found. The stream might not be specified correctly.
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.Model.ResourceNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new ResourceNotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.Kinesis.Model.ResourceNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ResourceNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.ResourceNotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of ResourceNotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.ResourceNotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ResourceNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.ResourceNotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ResourceNotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.Kinesis.Model.ResourceNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructs a new instance of the ResourceNotFoundException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="M:Amazon.Kinesis.Model.ResourceNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
        </member>
        <member name="T:Amazon.Kinesis.Model.SequenceNumberRange">
            <summary>
            The range of possible sequence numbers for the shard.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.SequenceNumberRange.EndingSequenceNumber">
            <summary>
            Gets and sets the property EndingSequenceNumber. 
            <para>
            The ending sequence number for the range. Shards that are in the OPEN state have an
            ending sequence number of <code>null</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.SequenceNumberRange.StartingSequenceNumber">
            <summary>
            Gets and sets the property StartingSequenceNumber. 
            <para>
            The starting sequence number for the range.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.Shard">
            <summary>
            A uniquely identified group of data records in a Kinesis data stream.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.Shard.AdjacentParentShardId">
            <summary>
            Gets and sets the property AdjacentParentShardId. 
            <para>
            The shard ID of the shard adjacent to the shard's parent.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.Shard.HashKeyRange">
            <summary>
            Gets and sets the property HashKeyRange. 
            <para>
            The range of possible hash key values for the shard, which is a set of ordered contiguous
            positive integers.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.Shard.ParentShardId">
            <summary>
            Gets and sets the property ParentShardId. 
            <para>
            The shard ID of the shard's parent.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.Shard.SequenceNumberRange">
            <summary>
            Gets and sets the property SequenceNumberRange. 
            <para>
            The range of possible sequence numbers for the shard.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.Shard.ShardId">
            <summary>
            Gets and sets the property ShardId. 
            <para>
            The unique identifier of the shard within the stream.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.ShardFilter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ShardFilter.ShardId">
            <summary>
            Gets and sets the property ShardId.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ShardFilter.Timestamp">
            <summary>
            Gets and sets the property Timestamp.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ShardFilter.Type">
            <summary>
            Gets and sets the property Type.
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.SplitShardRequest">
            <summary>
            Container for the parameters to the SplitShard operation.
            Splits a shard into two new shards in the Kinesis data stream, to increase the stream's
            capacity to ingest and transport data. <code>SplitShard</code> is called when there
            is a need to increase the overall capacity of a stream because of an expected increase
            in the volume of data records being ingested. 
            
             
            <para>
            You can also use <code>SplitShard</code> when a shard appears to be approaching its
            maximum utilization; for example, the producers sending data into the specific shard
            are suddenly sending more than previously anticipated. You can also call <code>SplitShard</code>
            to increase stream capacity, so that more Kinesis Data Streams applications can simultaneously
            read data from the stream for real-time processing. 
            </para>
             
            <para>
            You must specify the shard to be split and the new hash key, which is the position
            in the shard where the shard gets split in two. In many cases, the new hash key might
            be the average of the beginning and ending hash key, but it can be any hash key value
            in the range being mapped into the shard. For more information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-resharding-split.html">Split
            a Shard</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             
            <para>
            You can use <a>DescribeStream</a> to determine the shard ID and hash key values for
            the <code>ShardToSplit</code> and <code>NewStartingHashKey</code> parameters that
            are specified in the <code>SplitShard</code> request.
            </para>
             
            <para>
             <code>SplitShard</code> is an asynchronous operation. Upon receiving a <code>SplitShard</code>
            request, Kinesis Data Streams immediately returns a response and sets the stream status
            to <code>UPDATING</code>. After the operation is completed, Kinesis Data Streams sets
            the stream status to <code>ACTIVE</code>. Read and write operations continue to work
            while the stream is in the <code>UPDATING</code> state. 
            </para>
             
            <para>
            You can use <code>DescribeStream</code> to check the status of the stream, which is
            returned in <code>StreamStatus</code>. If the stream is in the <code>ACTIVE</code>
            state, you can call <code>SplitShard</code>. If a stream is in <code>CREATING</code>
            or <code>UPDATING</code> or <code>DELETING</code> states, <code>DescribeStream</code>
            returns a <code>ResourceInUseException</code>.
            </para>
             
            <para>
            If the specified stream does not exist, <code>DescribeStream</code> returns a <code>ResourceNotFoundException</code>.
            If you try to create more shards than are authorized for your account, you receive
            a <code>LimitExceededException</code>. 
            </para>
             
            <para>
            For the default shard limit for an AWS account, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Kinesis
            Data Streams Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            To increase this limit, <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html">contact
            AWS Support</a>.
            </para>
             
            <para>
            If you try to operate on too many streams simultaneously using <a>CreateStream</a>,
            <a>DeleteStream</a>, <a>MergeShards</a>, and/or <a>SplitShard</a>, you receive a <code>LimitExceededException</code>.
            
            </para>
             
            <para>
             <code>SplitShard</code> has a limit of five transactions per second per account.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.SplitShardRequest.NewStartingHashKey">
            <summary>
            Gets and sets the property NewStartingHashKey. 
            <para>
            A hash key value for the starting hash key of one of the child shards created by the
            split. The hash key range for a given shard constitutes a set of ordered contiguous
            positive integers. The value for <code>NewStartingHashKey</code> must be in the range
            of hash keys being mapped into the shard. The <code>NewStartingHashKey</code> hash
            key value and all higher hash key values in hash key range are distributed to one
            of the child shards. All the lower hash key values in the range are distributed to
            the other child shard.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.SplitShardRequest.ShardToSplit">
            <summary>
            Gets and sets the property ShardToSplit. 
            <para>
            The shard ID of the shard to split.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.SplitShardRequest.StreamName">
            <summary>
            Gets and sets the property StreamName. 
            <para>
            The name of the stream for the shard split.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.SplitShardResponse">
            <summary>
            This is the response object from the SplitShard operation.
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.StartStreamEncryptionRequest">
            <summary>
            Container for the parameters to the StartStreamEncryption operation.
            Enables or updates server-side encryption using an AWS KMS key for a specified stream.
            
            
             
            <para>
            Starting encryption is an asynchronous operation. Upon receiving the request, Kinesis
            Data Streams returns immediately and sets the status of the stream to <code>UPDATING</code>.
            After the update is complete, Kinesis Data Streams sets the status of the stream back
            to <code>ACTIVE</code>. Updating or applying encryption normally takes a few seconds
            to complete, but it can take minutes. You can continue to read and write data to your
            stream while its status is <code>UPDATING</code>. Once the status of the stream is
            <code>ACTIVE</code>, encryption begins for records written to the stream. 
            </para>
             
            <para>
            API Limits: You can successfully apply a new AWS KMS key for server-side encryption
            25 times in a rolling 24-hour period.
            </para>
             
            <para>
            Note: It can take up to 5 seconds after the stream is in an <code>ACTIVE</code> status
            before all records written to the stream are encrypted. After you enable encryption,
            you can verify that encryption is applied by inspecting the API response from <code>PutRecord</code>
            or <code>PutRecords</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.StartStreamEncryptionRequest.EncryptionType">
            <summary>
            Gets and sets the property EncryptionType. 
            <para>
            The encryption type to use. The only valid value is <code>KMS</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.StartStreamEncryptionRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            The GUID for the customer-managed AWS KMS key to use for encryption. This value can
            be a globally unique identifier, a fully specified Amazon Resource Name (ARN) to either
            an alias or a key, or an alias name prefixed by "alias/".You can also use a master
            key owned by Kinesis Data Streams by specifying the alias <code>aws/kinesis</code>.
            </para>
             <ul> <li> 
            <para>
            Key ARN example: <code>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</code>
            
            </para>
             </li> <li> 
            <para>
            Alias ARN example: <code>arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</code>
            
            </para>
             </li> <li> 
            <para>
            Globally unique key ID example: <code>12345678-1234-1234-1234-123456789012</code>
            
            </para>
             </li> <li> 
            <para>
            Alias name example: <code>alias/MyAliasName</code> 
            </para>
             </li> <li> 
            <para>
            Master key owned by Kinesis Data Streams: <code>alias/aws/kinesis</code> 
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.StartStreamEncryptionRequest.StreamName">
            <summary>
            Gets and sets the property StreamName. 
            <para>
            The name of the stream for which to start encrypting records.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.StartStreamEncryptionResponse">
            <summary>
            This is the response object from the StartStreamEncryption operation.
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.StopStreamEncryptionRequest">
            <summary>
            Container for the parameters to the StopStreamEncryption operation.
            Disables server-side encryption for a specified stream. 
            
             
            <para>
            Stopping encryption is an asynchronous operation. Upon receiving the request, Kinesis
            Data Streams returns immediately and sets the status of the stream to <code>UPDATING</code>.
            After the update is complete, Kinesis Data Streams sets the status of the stream back
            to <code>ACTIVE</code>. Stopping encryption normally takes a few seconds to complete,
            but it can take minutes. You can continue to read and write data to your stream while
            its status is <code>UPDATING</code>. Once the status of the stream is <code>ACTIVE</code>,
            records written to the stream are no longer encrypted by Kinesis Data Streams. 
            </para>
             
            <para>
            API Limits: You can successfully disable server-side encryption 25 times in a rolling
            24-hour period. 
            </para>
             
            <para>
            Note: It can take up to 5 seconds after the stream is in an <code>ACTIVE</code> status
            before all records written to the stream are no longer subject to encryption. After
            you disabled encryption, you can verify that encryption is not applied by inspecting
            the API response from <code>PutRecord</code> or <code>PutRecords</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.StopStreamEncryptionRequest.EncryptionType">
            <summary>
            Gets and sets the property EncryptionType. 
            <para>
            The encryption type. The only valid value is <code>KMS</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.StopStreamEncryptionRequest.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            The GUID for the customer-managed AWS KMS key to use for encryption. This value can
            be a globally unique identifier, a fully specified Amazon Resource Name (ARN) to either
            an alias or a key, or an alias name prefixed by "alias/".You can also use a master
            key owned by Kinesis Data Streams by specifying the alias <code>aws/kinesis</code>.
            </para>
             <ul> <li> 
            <para>
            Key ARN example: <code>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</code>
            
            </para>
             </li> <li> 
            <para>
            Alias ARN example: <code>arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</code>
            
            </para>
             </li> <li> 
            <para>
            Globally unique key ID example: <code>12345678-1234-1234-1234-123456789012</code>
            
            </para>
             </li> <li> 
            <para>
            Alias name example: <code>alias/MyAliasName</code> 
            </para>
             </li> <li> 
            <para>
            Master key owned by Kinesis Data Streams: <code>alias/aws/kinesis</code> 
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.StopStreamEncryptionRequest.StreamName">
            <summary>
            Gets and sets the property StreamName. 
            <para>
            The name of the stream on which to stop encrypting records.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.StopStreamEncryptionResponse">
            <summary>
            This is the response object from the StopStreamEncryption operation.
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.StreamDescription">
            <summary>
            Represents the output for <a>DescribeStream</a>.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.StreamDescription.EncryptionType">
            <summary>
            Gets and sets the property EncryptionType. 
            <para>
            The server-side encryption type used on the stream. This parameter can be one of the
            following values:
            </para>
             <ul> <li> 
            <para>
             <code>NONE</code>: Do not encrypt the records in the stream.
            </para>
             </li> <li> 
            <para>
             <code>KMS</code>: Use server-side encryption on the records in the stream using a
            customer-managed AWS KMS key.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.StreamDescription.EnhancedMonitoring">
            <summary>
            Gets and sets the property EnhancedMonitoring. 
            <para>
            Represents the current enhanced monitoring settings of the stream.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.StreamDescription.HasMoreShards">
            <summary>
            Gets and sets the property HasMoreShards. 
            <para>
            If set to <code>true</code>, more shards in the stream are available to describe.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.StreamDescription.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            The GUID for the customer-managed AWS KMS key to use for encryption. This value can
            be a globally unique identifier, a fully specified ARN to either an alias or a key,
            or an alias name prefixed by "alias/".You can also use a master key owned by Kinesis
            Data Streams by specifying the alias <code>aws/kinesis</code>.
            </para>
             <ul> <li> 
            <para>
            Key ARN example: <code>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</code>
            
            </para>
             </li> <li> 
            <para>
            Alias ARN example: <code>arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</code>
            
            </para>
             </li> <li> 
            <para>
            Globally unique key ID example: <code>12345678-1234-1234-1234-123456789012</code>
            
            </para>
             </li> <li> 
            <para>
            Alias name example: <code>alias/MyAliasName</code> 
            </para>
             </li> <li> 
            <para>
            Master key owned by Kinesis Data Streams: <code>alias/aws/kinesis</code> 
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.StreamDescription.RetentionPeriodHours">
            <summary>
            Gets and sets the property RetentionPeriodHours. 
            <para>
            The current retention period, in hours. Minimum value of 24. Maximum value of 168.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.StreamDescription.Shards">
            <summary>
            Gets and sets the property Shards. 
            <para>
            The shards that comprise the stream.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.StreamDescription.StreamARN">
            <summary>
            Gets and sets the property StreamARN. 
            <para>
            The Amazon Resource Name (ARN) for the stream being described.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.StreamDescription.StreamCreationTimestamp">
            <summary>
            Gets and sets the property StreamCreationTimestamp. 
            <para>
            The approximate time that the stream was created.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.StreamDescription.StreamName">
            <summary>
            Gets and sets the property StreamName. 
            <para>
            The name of the stream being described.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.StreamDescription.StreamStatus">
            <summary>
            Gets and sets the property StreamStatus. 
            <para>
            The current status of the stream being described. The stream status is one of the
            following states:
            </para>
             <ul> <li> 
            <para>
             <code>CREATING</code> - The stream is being created. Kinesis Data Streams immediately
            returns and sets <code>StreamStatus</code> to <code>CREATING</code>.
            </para>
             </li> <li> 
            <para>
             <code>DELETING</code> - The stream is being deleted. The specified stream is in the
            <code>DELETING</code> state until Kinesis Data Streams completes the deletion.
            </para>
             </li> <li> 
            <para>
             <code>ACTIVE</code> - The stream exists and is ready for read and write operations
            or deletion. You should perform read and write operations only on an <code>ACTIVE</code>
            stream.
            </para>
             </li> <li> 
            <para>
             <code>UPDATING</code> - Shards in the stream are being merged or split. Read and
            write operations continue to work while the stream is in the <code>UPDATING</code>
            state.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.StreamDescriptionSummary">
            <summary>
            Represents the output for <a>DescribeStreamSummary</a>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.StreamDescriptionSummary.ConsumerCount">
            <summary>
            Gets and sets the property ConsumerCount. 
            <para>
            The number of enhanced fan-out consumers registered with the stream.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.StreamDescriptionSummary.EncryptionType">
            <summary>
            Gets and sets the property EncryptionType. 
            <para>
            The encryption type used. This value is one of the following:
            </para>
             <ul> <li> 
            <para>
             <code>KMS</code> 
            </para>
             </li> <li> 
            <para>
             <code>NONE</code> 
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.StreamDescriptionSummary.EnhancedMonitoring">
            <summary>
            Gets and sets the property EnhancedMonitoring. 
            <para>
            Represents the current enhanced monitoring settings of the stream.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.StreamDescriptionSummary.KeyId">
            <summary>
            Gets and sets the property KeyId. 
            <para>
            The GUID for the customer-managed AWS KMS key to use for encryption. This value can
            be a globally unique identifier, a fully specified ARN to either an alias or a key,
            or an alias name prefixed by "alias/".You can also use a master key owned by Kinesis
            Data Streams by specifying the alias <code>aws/kinesis</code>.
            </para>
             <ul> <li> 
            <para>
            Key ARN example: <code>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</code>
            
            </para>
             </li> <li> 
            <para>
            Alias ARN example: <code> arn:aws:kms:us-east-1:123456789012:alias/MyAliasName</code>
            
            </para>
             </li> <li> 
            <para>
            Globally unique key ID example: <code>12345678-1234-1234-1234-123456789012</code>
            
            </para>
             </li> <li> 
            <para>
            Alias name example: <code>alias/MyAliasName</code> 
            </para>
             </li> <li> 
            <para>
            Master key owned by Kinesis Data Streams: <code>alias/aws/kinesis</code> 
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.StreamDescriptionSummary.OpenShardCount">
            <summary>
            Gets and sets the property OpenShardCount. 
            <para>
            The number of open shards in the stream.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.StreamDescriptionSummary.RetentionPeriodHours">
            <summary>
            Gets and sets the property RetentionPeriodHours. 
            <para>
            The current retention period, in hours.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.StreamDescriptionSummary.StreamARN">
            <summary>
            Gets and sets the property StreamARN. 
            <para>
            The Amazon Resource Name (ARN) for the stream being described.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.StreamDescriptionSummary.StreamCreationTimestamp">
            <summary>
            Gets and sets the property StreamCreationTimestamp. 
            <para>
            The approximate time that the stream was created.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.StreamDescriptionSummary.StreamName">
            <summary>
            Gets and sets the property StreamName. 
            <para>
            The name of the stream being described.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.StreamDescriptionSummary.StreamStatus">
            <summary>
            Gets and sets the property StreamStatus. 
            <para>
            The current status of the stream being described. The stream status is one of the
            following states:
            </para>
             <ul> <li> 
            <para>
             <code>CREATING</code> - The stream is being created. Kinesis Data Streams immediately
            returns and sets <code>StreamStatus</code> to <code>CREATING</code>.
            </para>
             </li> <li> 
            <para>
             <code>DELETING</code> - The stream is being deleted. The specified stream is in the
            <code>DELETING</code> state until Kinesis Data Streams completes the deletion.
            </para>
             </li> <li> 
            <para>
             <code>ACTIVE</code> - The stream exists and is ready for read and write operations
            or deletion. You should perform read and write operations only on an <code>ACTIVE</code>
            stream.
            </para>
             </li> <li> 
            <para>
             <code>UPDATING</code> - Shards in the stream are being merged or split. Read and
            write operations continue to work while the stream is in the <code>UPDATING</code>
            state.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.Tag">
            <summary>
            Metadata assigned to the stream, consisting of a key-value pair.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.Tag.Key">
            <summary>
            Gets and sets the property Key. 
            <para>
            A unique identifier for the tag. Maximum length: 128 characters. Valid characters:
            Unicode letters, digits, white space, _ . / = + - % @
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.Tag.Value">
            <summary>
            Gets and sets the property Value. 
            <para>
            An optional string, typically used to describe or define the tag. Maximum length:
            256 characters. Valid characters: Unicode letters, digits, white space, _ . / = +
            - % @
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.UpdateShardCountRequest">
            <summary>
            Container for the parameters to the UpdateShardCount operation.
            Updates the shard count of the specified stream to the specified number of shards.
            
             
            <para>
            Updating the shard count is an asynchronous operation. Upon receiving the request,
            Kinesis Data Streams returns immediately and sets the status of the stream to <code>UPDATING</code>.
            After the update is complete, Kinesis Data Streams sets the status of the stream back
            to <code>ACTIVE</code>. Depending on the size of the stream, the scaling action could
            take a few minutes to complete. You can continue to read and write data to your stream
            while its status is <code>UPDATING</code>.
            </para>
             
            <para>
            To update the shard count, Kinesis Data Streams performs splits or merges on individual
            shards. This can cause short-lived shards to be created, in addition to the final
            shards. These short-lived shards count towards your total shard limit for your account
            in the Region.
            </para>
             
            <para>
            When using this operation, we recommend that you specify a target shard count that
            is a multiple of 25% (25%, 50%, 75%, 100%). You can specify any target value within
            your shard limit. However, if you specify a target that isn't a multiple of 25%, the
            scaling action might take longer to complete. 
            </para>
             
            <para>
            This operation has the following default limits. By default, you cannot do the following:
            </para>
             <ul> <li> 
            <para>
            Scale more than ten times per rolling 24-hour period per stream
            </para>
             </li> <li> 
            <para>
            Scale up to more than double your current shard count for a stream
            </para>
             </li> <li> 
            <para>
            Scale down below half your current shard count for a stream
            </para>
             </li> <li> 
            <para>
            Scale up to more than 500 shards in a stream
            </para>
             </li> <li> 
            <para>
            Scale a stream with more than 500 shards down unless the result is less than 500 shards
            </para>
             </li> <li> 
            <para>
            Scale up to more than the shard limit for your account
            </para>
             </li> </ul> 
            <para>
            For the default limits for an AWS account, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams
            Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>. To request an
            increase in the call rate limit, the shard limit for this API, or your overall shard
            limit, use the <a href="https://console.aws.amazon.com/support/v1#/case/create?issueType=service-limit-increase&amp;limitType=service-code-kinesis">limits
            form</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.UpdateShardCountRequest.ScalingType">
            <summary>
            Gets and sets the property ScalingType. 
            <para>
            The scaling type. Uniform scaling creates shards of equal size.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.UpdateShardCountRequest.StreamName">
            <summary>
            Gets and sets the property StreamName. 
            <para>
            The name of the stream.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.UpdateShardCountRequest.TargetShardCount">
            <summary>
            Gets and sets the property TargetShardCount. 
            <para>
            The new number of shards. This value has the following default limits. By default,
            you cannot do the following: 
            </para>
             <ul> <li> 
            <para>
            Set this value to more than double your current shard count for a stream.
            </para>
             </li> <li> 
            <para>
            Set this value below half your current shard count for a stream.
            </para>
             </li> <li> 
            <para>
            Set this value to more than 500 shards in a stream (the default limit for shard count
            per stream is 500 per account per region), unless you request a limit increase.
            </para>
             </li> <li> 
            <para>
            Scale a stream with more than 500 shards down unless you set this value to less than
            500 shards.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.UpdateShardCountResponse">
            <summary>
            This is the response object from the UpdateShardCount operation.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.UpdateShardCountResponse.CurrentShardCount">
            <summary>
            Gets and sets the property CurrentShardCount. 
            <para>
            The current number of shards.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.UpdateShardCountResponse.StreamName">
            <summary>
            Gets and sets the property StreamName. 
            <para>
            The name of the stream.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.UpdateShardCountResponse.TargetShardCount">
            <summary>
            Gets and sets the property TargetShardCount. 
            <para>
            The updated number of shards.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.IKinesisPaginatorFactory">
             <summary>
             Paginators for the Kinesis service
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.Model.IKinesisPaginatorFactory.ListStreamConsumers(Amazon.Kinesis.Model.ListStreamConsumersRequest)">
             <summary>
             Paginator for ListStreamConsumers operation
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.IListStreamConsumersPaginator">
             <summary>
             Paginator for the ListStreamConsumers operation
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.IListStreamConsumersPaginator.Responses">
            <summary>
            Enumerable containing all full responses for the operation
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.KinesisPaginatorFactory">
             <summary>
             Paginators for the Kinesis service
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.Model.KinesisPaginatorFactory.ListStreamConsumers(Amazon.Kinesis.Model.ListStreamConsumersRequest)">
             <summary>
             Paginator for ListStreamConsumers operation
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.Model.ListStreamConsumersPaginator">
            <summary>
            Base class for ListStreamConsumers paginators.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.Model.ListStreamConsumersPaginator.Responses">
            <summary>
            Enumerable containing all full responses for the operation
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.AmazonKinesisRequest">
            <summary>
            Base class for Kinesis operation requests.
            </summary>
        </member>
        <member name="T:Amazon.Kinesis.ConsumerStatus">
            <summary>
            Constants used for properties of type ConsumerStatus.
            </summary>
        </member>
        <member name="F:Amazon.Kinesis.ConsumerStatus.ACTIVE">
            <summary>
            Constant ACTIVE for ConsumerStatus
            </summary>
        </member>
        <member name="F:Amazon.Kinesis.ConsumerStatus.CREATING">
            <summary>
            Constant CREATING for ConsumerStatus
            </summary>
        </member>
        <member name="F:Amazon.Kinesis.ConsumerStatus.DELETING">
            <summary>
            Constant DELETING for ConsumerStatus
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.ConsumerStatus.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.ConsumerStatus.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.Kinesis.ConsumerStatus.op_Implicit(System.String)~Amazon.Kinesis.ConsumerStatus">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.Kinesis.EncryptionType">
            <summary>
            Constants used for properties of type EncryptionType.
            </summary>
        </member>
        <member name="F:Amazon.Kinesis.EncryptionType.KMS">
            <summary>
            Constant KMS for EncryptionType
            </summary>
        </member>
        <member name="F:Amazon.Kinesis.EncryptionType.NONE">
            <summary>
            Constant NONE for EncryptionType
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.EncryptionType.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.EncryptionType.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.Kinesis.EncryptionType.op_Implicit(System.String)~Amazon.Kinesis.EncryptionType">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.Kinesis.MetricsName">
            <summary>
            Constants used for properties of type MetricsName.
            </summary>
        </member>
        <member name="F:Amazon.Kinesis.MetricsName.ALL">
            <summary>
            Constant ALL for MetricsName
            </summary>
        </member>
        <member name="F:Amazon.Kinesis.MetricsName.IncomingBytes">
            <summary>
            Constant IncomingBytes for MetricsName
            </summary>
        </member>
        <member name="F:Amazon.Kinesis.MetricsName.IncomingRecords">
            <summary>
            Constant IncomingRecords for MetricsName
            </summary>
        </member>
        <member name="F:Amazon.Kinesis.MetricsName.IteratorAgeMilliseconds">
            <summary>
            Constant IteratorAgeMilliseconds for MetricsName
            </summary>
        </member>
        <member name="F:Amazon.Kinesis.MetricsName.OutgoingBytes">
            <summary>
            Constant OutgoingBytes for MetricsName
            </summary>
        </member>
        <member name="F:Amazon.Kinesis.MetricsName.OutgoingRecords">
            <summary>
            Constant OutgoingRecords for MetricsName
            </summary>
        </member>
        <member name="F:Amazon.Kinesis.MetricsName.ReadProvisionedThroughputExceeded">
            <summary>
            Constant ReadProvisionedThroughputExceeded for MetricsName
            </summary>
        </member>
        <member name="F:Amazon.Kinesis.MetricsName.WriteProvisionedThroughputExceeded">
            <summary>
            Constant WriteProvisionedThroughputExceeded for MetricsName
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.MetricsName.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.MetricsName.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.Kinesis.MetricsName.op_Implicit(System.String)~Amazon.Kinesis.MetricsName">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.Kinesis.ScalingType">
            <summary>
            Constants used for properties of type ScalingType.
            </summary>
        </member>
        <member name="F:Amazon.Kinesis.ScalingType.UNIFORM_SCALING">
            <summary>
            Constant UNIFORM_SCALING for ScalingType
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.ScalingType.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.ScalingType.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.Kinesis.ScalingType.op_Implicit(System.String)~Amazon.Kinesis.ScalingType">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.Kinesis.ShardFilterType">
            <summary>
            Constants used for properties of type ShardFilterType.
            </summary>
        </member>
        <member name="F:Amazon.Kinesis.ShardFilterType.AFTER_SHARD_ID">
            <summary>
            Constant AFTER_SHARD_ID for ShardFilterType
            </summary>
        </member>
        <member name="F:Amazon.Kinesis.ShardFilterType.AT_LATEST">
            <summary>
            Constant AT_LATEST for ShardFilterType
            </summary>
        </member>
        <member name="F:Amazon.Kinesis.ShardFilterType.AT_TIMESTAMP">
            <summary>
            Constant AT_TIMESTAMP for ShardFilterType
            </summary>
        </member>
        <member name="F:Amazon.Kinesis.ShardFilterType.AT_TRIM_HORIZON">
            <summary>
            Constant AT_TRIM_HORIZON for ShardFilterType
            </summary>
        </member>
        <member name="F:Amazon.Kinesis.ShardFilterType.FROM_TIMESTAMP">
            <summary>
            Constant FROM_TIMESTAMP for ShardFilterType
            </summary>
        </member>
        <member name="F:Amazon.Kinesis.ShardFilterType.FROM_TRIM_HORIZON">
            <summary>
            Constant FROM_TRIM_HORIZON for ShardFilterType
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.ShardFilterType.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.ShardFilterType.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.Kinesis.ShardFilterType.op_Implicit(System.String)~Amazon.Kinesis.ShardFilterType">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.Kinesis.ShardIteratorType">
            <summary>
            Constants used for properties of type ShardIteratorType.
            </summary>
        </member>
        <member name="F:Amazon.Kinesis.ShardIteratorType.AFTER_SEQUENCE_NUMBER">
            <summary>
            Constant AFTER_SEQUENCE_NUMBER for ShardIteratorType
            </summary>
        </member>
        <member name="F:Amazon.Kinesis.ShardIteratorType.AT_SEQUENCE_NUMBER">
            <summary>
            Constant AT_SEQUENCE_NUMBER for ShardIteratorType
            </summary>
        </member>
        <member name="F:Amazon.Kinesis.ShardIteratorType.AT_TIMESTAMP">
            <summary>
            Constant AT_TIMESTAMP for ShardIteratorType
            </summary>
        </member>
        <member name="F:Amazon.Kinesis.ShardIteratorType.LATEST">
            <summary>
            Constant LATEST for ShardIteratorType
            </summary>
        </member>
        <member name="F:Amazon.Kinesis.ShardIteratorType.TRIM_HORIZON">
            <summary>
            Constant TRIM_HORIZON for ShardIteratorType
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.ShardIteratorType.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.ShardIteratorType.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.Kinesis.ShardIteratorType.op_Implicit(System.String)~Amazon.Kinesis.ShardIteratorType">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.Kinesis.StreamStatus">
            <summary>
            Constants used for properties of type StreamStatus.
            </summary>
        </member>
        <member name="F:Amazon.Kinesis.StreamStatus.ACTIVE">
            <summary>
            Constant ACTIVE for StreamStatus
            </summary>
        </member>
        <member name="F:Amazon.Kinesis.StreamStatus.CREATING">
            <summary>
            Constant CREATING for StreamStatus
            </summary>
        </member>
        <member name="F:Amazon.Kinesis.StreamStatus.DELETING">
            <summary>
            Constant DELETING for StreamStatus
            </summary>
        </member>
        <member name="F:Amazon.Kinesis.StreamStatus.UPDATING">
            <summary>
            Constant UPDATING for StreamStatus
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.StreamStatus.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.StreamStatus.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.Kinesis.StreamStatus.op_Implicit(System.String)~Amazon.Kinesis.StreamStatus">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.Kinesis.AmazonKinesisClient">
             <summary>
             Implementation for accessing Kinesis
            
             Amazon Kinesis Data Streams Service API Reference 
             <para>
             Amazon Kinesis Data Streams is a managed service that scales elastically for real-time
             processing of streaming big data.
             </para>
             </summary>
        </member>
        <member name="P:Amazon.Kinesis.AmazonKinesisClient.Paginators">
            <summary>
            Paginators for the service
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.#ctor">
             <summary>
             Constructs AmazonKinesisClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.#ctor(Amazon.RegionEndpoint)">
             <summary>
             Constructs AmazonKinesisClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
             <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.#ctor(Amazon.Kinesis.AmazonKinesisConfig)">
             <summary>
             Constructs AmazonKinesisClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
             <param name="config">The AmazonKinesisClient Configuration Object</param>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.#ctor(Amazon.Runtime.AWSCredentials)">
            <summary>
            Constructs AmazonKinesisClient with AWS Credentials
            </summary>
            <param name="credentials">AWS Credentials</param>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.#ctor(Amazon.Runtime.AWSCredentials,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonKinesisClient with AWS Credentials
            </summary>
            <param name="credentials">AWS Credentials</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.#ctor(Amazon.Runtime.AWSCredentials,Amazon.Kinesis.AmazonKinesisConfig)">
            <summary>
            Constructs AmazonKinesisClient with AWS Credentials and an
            AmazonKinesisClient Configuration object.
            </summary>
            <param name="credentials">AWS Credentials</param>
            <param name="clientConfig">The AmazonKinesisClient Configuration Object</param>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.#ctor(System.String,System.String)">
            <summary>
            Constructs AmazonKinesisClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.#ctor(System.String,System.String,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonKinesisClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.#ctor(System.String,System.String,Amazon.Kinesis.AmazonKinesisConfig)">
            <summary>
            Constructs AmazonKinesisClient with AWS Access Key ID, AWS Secret Key and an
            AmazonKinesisClient Configuration object. 
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="clientConfig">The AmazonKinesisClient Configuration Object</param>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs AmazonKinesisClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.#ctor(System.String,System.String,System.String,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonKinesisClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.#ctor(System.String,System.String,System.String,Amazon.Kinesis.AmazonKinesisConfig)">
            <summary>
            Constructs AmazonKinesisClient with AWS Access Key ID, AWS Secret Key and an
            AmazonKinesisClient Configuration object. 
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
            <param name="clientConfig">The AmazonKinesisClient Configuration Object</param>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.CreateSigner">
            <summary>
            Creates the signer for the service.
            </summary>
        </member>
        <member name="P:Amazon.Kinesis.AmazonKinesisClient.ServiceMetadata">
            <summary>
            Capture metadata for the service.
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.Dispose(System.Boolean)">
            <summary>
            Disposes the service client.
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.AddTagsToStream(Amazon.Kinesis.Model.AddTagsToStreamRequest)">
            <summary>
            Adds or updates tags for the specified Kinesis data stream. Each time you invoke this
            operation, you can specify up to 10 tags. If you want to add more than 10 tags to
            your stream, you can invoke this operation multiple times. In total, each stream can
            have up to 50 tags.
            
             
            <para>
            If tags have already been assigned to the stream, <code>AddTagsToStream</code> overwrites
            any existing tags that correspond to the specified tag keys.
            </para>
             
            <para>
             <a>AddTagsToStream</a> has a limit of five transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the AddTagsToStream service method.</param>
            
            <returns>The response from the AddTagsToStream service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/AddTagsToStream">REST API Reference for AddTagsToStream Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.AddTagsToStreamAsync(Amazon.Kinesis.Model.AddTagsToStreamRequest,System.Threading.CancellationToken)">
            <summary>
            Adds or updates tags for the specified Kinesis data stream. Each time you invoke this
            operation, you can specify up to 10 tags. If you want to add more than 10 tags to
            your stream, you can invoke this operation multiple times. In total, each stream can
            have up to 50 tags.
            
             
            <para>
            If tags have already been assigned to the stream, <code>AddTagsToStream</code> overwrites
            any existing tags that correspond to the specified tag keys.
            </para>
             
            <para>
             <a>AddTagsToStream</a> has a limit of five transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the AddTagsToStream service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the AddTagsToStream service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/AddTagsToStream">REST API Reference for AddTagsToStream Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.CreateStream(Amazon.Kinesis.Model.CreateStreamRequest)">
            <summary>
            Creates a Kinesis data stream. A stream captures and transports data records that
            are continuously emitted from different data sources or <i>producers</i>. Scale-out
            within a stream is explicitly supported by means of shards, which are uniquely identified
            groups of data records in a stream.
            
             
            <para>
            You specify and control the number of shards that a stream is composed of. Each shard
            can support reads up to five transactions per second, up to a maximum data read total
            of 2 MiB per second. Each shard can support writes up to 1,000 records per second,
            up to a maximum data write total of 1 MiB per second. If the amount of data input
            increases or decreases, you can add or remove shards.
            </para>
             
            <para>
            The stream name identifies the stream. The name is scoped to the AWS account used
            by the application. It is also scoped by AWS Region. That is, two streams in two different
            accounts can have the same name, and two streams in the same account, but in two different
            Regions, can have the same name.
            </para>
             
            <para>
             <code>CreateStream</code> is an asynchronous operation. Upon receiving a <code>CreateStream</code>
            request, Kinesis Data Streams immediately returns and sets the stream status to <code>CREATING</code>.
            After the stream is created, Kinesis Data Streams sets the stream status to <code>ACTIVE</code>.
            You should perform read and write operations only on an <code>ACTIVE</code> stream.
            
            </para>
             
            <para>
            You receive a <code>LimitExceededException</code> when making a <code>CreateStream</code>
            request when you try to do one of the following:
            </para>
             <ul> <li> 
            <para>
            Have more than five streams in the <code>CREATING</code> state at any point in time.
            </para>
             </li> <li> 
            <para>
            Create more shards than are authorized for your account.
            </para>
             </li> </ul> 
            <para>
            For the default shard limit for an AWS account, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Amazon
            Kinesis Data Streams Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            To increase this limit, <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html">contact
            AWS Support</a>.
            </para>
             
            <para>
            You can use <code>DescribeStream</code> to check the stream status, which is returned
            in <code>StreamStatus</code>.
            </para>
             
            <para>
             <a>CreateStream</a> has a limit of five transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CreateStream service method.</param>
            
            <returns>The response from the CreateStream service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/CreateStream">REST API Reference for CreateStream Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.CreateStreamAsync(Amazon.Kinesis.Model.CreateStreamRequest,System.Threading.CancellationToken)">
            <summary>
            Creates a Kinesis data stream. A stream captures and transports data records that
            are continuously emitted from different data sources or <i>producers</i>. Scale-out
            within a stream is explicitly supported by means of shards, which are uniquely identified
            groups of data records in a stream.
            
             
            <para>
            You specify and control the number of shards that a stream is composed of. Each shard
            can support reads up to five transactions per second, up to a maximum data read total
            of 2 MiB per second. Each shard can support writes up to 1,000 records per second,
            up to a maximum data write total of 1 MiB per second. If the amount of data input
            increases or decreases, you can add or remove shards.
            </para>
             
            <para>
            The stream name identifies the stream. The name is scoped to the AWS account used
            by the application. It is also scoped by AWS Region. That is, two streams in two different
            accounts can have the same name, and two streams in the same account, but in two different
            Regions, can have the same name.
            </para>
             
            <para>
             <code>CreateStream</code> is an asynchronous operation. Upon receiving a <code>CreateStream</code>
            request, Kinesis Data Streams immediately returns and sets the stream status to <code>CREATING</code>.
            After the stream is created, Kinesis Data Streams sets the stream status to <code>ACTIVE</code>.
            You should perform read and write operations only on an <code>ACTIVE</code> stream.
            
            </para>
             
            <para>
            You receive a <code>LimitExceededException</code> when making a <code>CreateStream</code>
            request when you try to do one of the following:
            </para>
             <ul> <li> 
            <para>
            Have more than five streams in the <code>CREATING</code> state at any point in time.
            </para>
             </li> <li> 
            <para>
            Create more shards than are authorized for your account.
            </para>
             </li> </ul> 
            <para>
            For the default shard limit for an AWS account, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Amazon
            Kinesis Data Streams Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            To increase this limit, <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html">contact
            AWS Support</a>.
            </para>
             
            <para>
            You can use <code>DescribeStream</code> to check the stream status, which is returned
            in <code>StreamStatus</code>.
            </para>
             
            <para>
             <a>CreateStream</a> has a limit of five transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CreateStream service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the CreateStream service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/CreateStream">REST API Reference for CreateStream Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.DecreaseStreamRetentionPeriod(System.String,System.Int32)">
            <summary>
            Decreases the Kinesis data stream's retention period, which is the length of time
            data records are accessible after they are added to the stream. The minimum value
            of a stream's retention period is 24 hours.
            
             
            <para>
            This operation may result in lost data. For example, if the stream's retention period
            is 48 hours and is decreased to 24 hours, any data already in the stream that is older
            than 24 hours is inaccessible.
            </para>
            </summary>
            <param name="streamName">The name of the stream to modify.</param>
            <param name="retentionPeriodHours">The new retention period of the stream, in hours. Must be less than the current retention period.</param>
            
            <returns>The response from the DecreaseStreamRetentionPeriod service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DecreaseStreamRetentionPeriod">REST API Reference for DecreaseStreamRetentionPeriod Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.DecreaseStreamRetentionPeriod(Amazon.Kinesis.Model.DecreaseStreamRetentionPeriodRequest)">
            <summary>
            Decreases the Kinesis data stream's retention period, which is the length of time
            data records are accessible after they are added to the stream. The minimum value
            of a stream's retention period is 24 hours.
            
             
            <para>
            This operation may result in lost data. For example, if the stream's retention period
            is 48 hours and is decreased to 24 hours, any data already in the stream that is older
            than 24 hours is inaccessible.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DecreaseStreamRetentionPeriod service method.</param>
            
            <returns>The response from the DecreaseStreamRetentionPeriod service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DecreaseStreamRetentionPeriod">REST API Reference for DecreaseStreamRetentionPeriod Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.DecreaseStreamRetentionPeriodAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Decreases the Kinesis data stream's retention period, which is the length of time
            data records are accessible after they are added to the stream. The minimum value
            of a stream's retention period is 24 hours.
            
             
            <para>
            This operation may result in lost data. For example, if the stream's retention period
            is 48 hours and is decreased to 24 hours, any data already in the stream that is older
            than 24 hours is inaccessible.
            </para>
            </summary>
            <param name="streamName">The name of the stream to modify.</param>
            <param name="retentionPeriodHours">The new retention period of the stream, in hours. Must be less than the current retention period.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DecreaseStreamRetentionPeriod service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DecreaseStreamRetentionPeriod">REST API Reference for DecreaseStreamRetentionPeriod Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.DecreaseStreamRetentionPeriodAsync(Amazon.Kinesis.Model.DecreaseStreamRetentionPeriodRequest,System.Threading.CancellationToken)">
            <summary>
            Decreases the Kinesis data stream's retention period, which is the length of time
            data records are accessible after they are added to the stream. The minimum value
            of a stream's retention period is 24 hours.
            
             
            <para>
            This operation may result in lost data. For example, if the stream's retention period
            is 48 hours and is decreased to 24 hours, any data already in the stream that is older
            than 24 hours is inaccessible.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DecreaseStreamRetentionPeriod service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DecreaseStreamRetentionPeriod service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DecreaseStreamRetentionPeriod">REST API Reference for DecreaseStreamRetentionPeriod Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.DeleteStream(Amazon.Kinesis.Model.DeleteStreamRequest)">
            <summary>
            Deletes a Kinesis data stream and all its shards and data. You must shut down any
            applications that are operating on the stream before you delete the stream. If an
            application attempts to operate on a deleted stream, it receives the exception <code>ResourceNotFoundException</code>.
            
             
            <para>
            If the stream is in the <code>ACTIVE</code> state, you can delete it. After a <code>DeleteStream</code>
            request, the specified stream is in the <code>DELETING</code> state until Kinesis
            Data Streams completes the deletion.
            </para>
             
            <para>
             <b>Note:</b> Kinesis Data Streams might continue to accept data read and write operations,
            such as <a>PutRecord</a>, <a>PutRecords</a>, and <a>GetRecords</a>, on a stream in
            the <code>DELETING</code> state until the stream deletion is complete.
            </para>
             
            <para>
            When you delete a stream, any shards in that stream are also deleted, and any tags
            are dissociated from the stream.
            </para>
             
            <para>
            You can use the <a>DescribeStream</a> operation to check the state of the stream,
            which is returned in <code>StreamStatus</code>.
            </para>
             
            <para>
             <a>DeleteStream</a> has a limit of five transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteStream service method.</param>
            
            <returns>The response from the DeleteStream service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DeleteStream">REST API Reference for DeleteStream Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.DeleteStreamAsync(Amazon.Kinesis.Model.DeleteStreamRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes a Kinesis data stream and all its shards and data. You must shut down any
            applications that are operating on the stream before you delete the stream. If an
            application attempts to operate on a deleted stream, it receives the exception <code>ResourceNotFoundException</code>.
            
             
            <para>
            If the stream is in the <code>ACTIVE</code> state, you can delete it. After a <code>DeleteStream</code>
            request, the specified stream is in the <code>DELETING</code> state until Kinesis
            Data Streams completes the deletion.
            </para>
             
            <para>
             <b>Note:</b> Kinesis Data Streams might continue to accept data read and write operations,
            such as <a>PutRecord</a>, <a>PutRecords</a>, and <a>GetRecords</a>, on a stream in
            the <code>DELETING</code> state until the stream deletion is complete.
            </para>
             
            <para>
            When you delete a stream, any shards in that stream are also deleted, and any tags
            are dissociated from the stream.
            </para>
             
            <para>
            You can use the <a>DescribeStream</a> operation to check the state of the stream,
            which is returned in <code>StreamStatus</code>.
            </para>
             
            <para>
             <a>DeleteStream</a> has a limit of five transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteStream service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeleteStream service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DeleteStream">REST API Reference for DeleteStream Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.DeregisterStreamConsumer(Amazon.Kinesis.Model.DeregisterStreamConsumerRequest)">
            <summary>
            To deregister a consumer, provide its ARN. Alternatively, you can provide the ARN
            of the data stream and the name you gave the consumer when you registered it. You
            may also provide all three parameters, as long as they don't conflict with each other.
            If you don't know the name or ARN of the consumer that you want to deregister, you
            can use the <a>ListStreamConsumers</a> operation to get a list of the descriptions
            of all the consumers that are currently registered with a given data stream. The description
            of a consumer contains its name and ARN.
            
             
            <para>
            This operation has a limit of five transactions per second per stream.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeregisterStreamConsumer service method.</param>
            
            <returns>The response from the DeregisterStreamConsumer service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DeregisterStreamConsumer">REST API Reference for DeregisterStreamConsumer Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.DeregisterStreamConsumerAsync(Amazon.Kinesis.Model.DeregisterStreamConsumerRequest,System.Threading.CancellationToken)">
            <summary>
            To deregister a consumer, provide its ARN. Alternatively, you can provide the ARN
            of the data stream and the name you gave the consumer when you registered it. You
            may also provide all three parameters, as long as they don't conflict with each other.
            If you don't know the name or ARN of the consumer that you want to deregister, you
            can use the <a>ListStreamConsumers</a> operation to get a list of the descriptions
            of all the consumers that are currently registered with a given data stream. The description
            of a consumer contains its name and ARN.
            
             
            <para>
            This operation has a limit of five transactions per second per stream.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeregisterStreamConsumer service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeregisterStreamConsumer service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DeregisterStreamConsumer">REST API Reference for DeregisterStreamConsumer Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.DescribeLimits(Amazon.Kinesis.Model.DescribeLimitsRequest)">
            <summary>
            Describes the shard limits and usage for the account.
            
             
            <para>
            If you update your account limits, the old limits might be returned for a few minutes.
            </para>
             
            <para>
            This operation has a limit of one transaction per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeLimits service method.</param>
            
            <returns>The response from the DescribeLimits service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DescribeLimits">REST API Reference for DescribeLimits Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.DescribeLimitsAsync(Amazon.Kinesis.Model.DescribeLimitsRequest,System.Threading.CancellationToken)">
            <summary>
            Describes the shard limits and usage for the account.
            
             
            <para>
            If you update your account limits, the old limits might be returned for a few minutes.
            </para>
             
            <para>
            This operation has a limit of one transaction per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeLimits service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeLimits service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DescribeLimits">REST API Reference for DescribeLimits Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.DescribeStream(Amazon.Kinesis.Model.DescribeStreamRequest)">
            <summary>
            Describes the specified Kinesis data stream.
            
             
            <para>
            The information returned includes the stream name, Amazon Resource Name (ARN), creation
            time, enhanced metric configuration, and shard map. The shard map is an array of shard
            objects. For each shard object, there is the hash key and sequence number ranges that
            the shard spans, and the IDs of any earlier shards that played in a role in creating
            the shard. Every record ingested in the stream is identified by a sequence number,
            which is assigned when the record is put into the stream.
            </para>
             
            <para>
            You can limit the number of shards returned by each call. For more information, see
            <a href="https://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-retrieve-shards.html">Retrieving
            Shards from a Stream</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             
            <para>
            There are no guarantees about the chronological order shards returned. To process
            shards in chronological order, use the ID of the parent shard to track the lineage
            to the oldest shard.
            </para>
             
            <para>
            This operation has a limit of 10 transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeStream service method.</param>
            
            <returns>The response from the DescribeStream service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DescribeStream">REST API Reference for DescribeStream Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.DescribeStreamAsync(Amazon.Kinesis.Model.DescribeStreamRequest,System.Threading.CancellationToken)">
            <summary>
            Describes the specified Kinesis data stream.
            
             
            <para>
            The information returned includes the stream name, Amazon Resource Name (ARN), creation
            time, enhanced metric configuration, and shard map. The shard map is an array of shard
            objects. For each shard object, there is the hash key and sequence number ranges that
            the shard spans, and the IDs of any earlier shards that played in a role in creating
            the shard. Every record ingested in the stream is identified by a sequence number,
            which is assigned when the record is put into the stream.
            </para>
             
            <para>
            You can limit the number of shards returned by each call. For more information, see
            <a href="https://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-retrieve-shards.html">Retrieving
            Shards from a Stream</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             
            <para>
            There are no guarantees about the chronological order shards returned. To process
            shards in chronological order, use the ID of the parent shard to track the lineage
            to the oldest shard.
            </para>
             
            <para>
            This operation has a limit of 10 transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeStream service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeStream service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DescribeStream">REST API Reference for DescribeStream Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.DescribeStreamConsumer(Amazon.Kinesis.Model.DescribeStreamConsumerRequest)">
            <summary>
            To get the description of a registered consumer, provide the ARN of the consumer.
            Alternatively, you can provide the ARN of the data stream and the name you gave the
            consumer when you registered it. You may also provide all three parameters, as long
            as they don't conflict with each other. If you don't know the name or ARN of the consumer
            that you want to describe, you can use the <a>ListStreamConsumers</a> operation to
            get a list of the descriptions of all the consumers that are currently registered
            with a given data stream.
            
             
            <para>
            This operation has a limit of 20 transactions per second per stream.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeStreamConsumer service method.</param>
            
            <returns>The response from the DescribeStreamConsumer service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DescribeStreamConsumer">REST API Reference for DescribeStreamConsumer Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.DescribeStreamConsumerAsync(Amazon.Kinesis.Model.DescribeStreamConsumerRequest,System.Threading.CancellationToken)">
            <summary>
            To get the description of a registered consumer, provide the ARN of the consumer.
            Alternatively, you can provide the ARN of the data stream and the name you gave the
            consumer when you registered it. You may also provide all three parameters, as long
            as they don't conflict with each other. If you don't know the name or ARN of the consumer
            that you want to describe, you can use the <a>ListStreamConsumers</a> operation to
            get a list of the descriptions of all the consumers that are currently registered
            with a given data stream.
            
             
            <para>
            This operation has a limit of 20 transactions per second per stream.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeStreamConsumer service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeStreamConsumer service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DescribeStreamConsumer">REST API Reference for DescribeStreamConsumer Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.DescribeStreamSummary(Amazon.Kinesis.Model.DescribeStreamSummaryRequest)">
            <summary>
            Provides a summarized description of the specified Kinesis data stream without the
            shard list.
            
             
            <para>
            The information returned includes the stream name, Amazon Resource Name (ARN), status,
            record retention period, approximate creation time, monitoring, encryption details,
            and open shard count. 
            </para>
             
            <para>
             <a>DescribeStreamSummary</a> has a limit of 20 transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeStreamSummary service method.</param>
            
            <returns>The response from the DescribeStreamSummary service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DescribeStreamSummary">REST API Reference for DescribeStreamSummary Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.DescribeStreamSummaryAsync(Amazon.Kinesis.Model.DescribeStreamSummaryRequest,System.Threading.CancellationToken)">
            <summary>
            Provides a summarized description of the specified Kinesis data stream without the
            shard list.
            
             
            <para>
            The information returned includes the stream name, Amazon Resource Name (ARN), status,
            record retention period, approximate creation time, monitoring, encryption details,
            and open shard count. 
            </para>
             
            <para>
             <a>DescribeStreamSummary</a> has a limit of 20 transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeStreamSummary service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeStreamSummary service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DescribeStreamSummary">REST API Reference for DescribeStreamSummary Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.DisableEnhancedMonitoring(Amazon.Kinesis.Model.DisableEnhancedMonitoringRequest)">
            <summary>
            Disables enhanced monitoring.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DisableEnhancedMonitoring service method.</param>
            
            <returns>The response from the DisableEnhancedMonitoring service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DisableEnhancedMonitoring">REST API Reference for DisableEnhancedMonitoring Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.DisableEnhancedMonitoringAsync(Amazon.Kinesis.Model.DisableEnhancedMonitoringRequest,System.Threading.CancellationToken)">
            <summary>
            Disables enhanced monitoring.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DisableEnhancedMonitoring service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DisableEnhancedMonitoring service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DisableEnhancedMonitoring">REST API Reference for DisableEnhancedMonitoring Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.EnableEnhancedMonitoring(Amazon.Kinesis.Model.EnableEnhancedMonitoringRequest)">
            <summary>
            Enables enhanced Kinesis data stream monitoring for shard-level metrics.
            </summary>
            <param name="request">Container for the necessary parameters to execute the EnableEnhancedMonitoring service method.</param>
            
            <returns>The response from the EnableEnhancedMonitoring service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/EnableEnhancedMonitoring">REST API Reference for EnableEnhancedMonitoring Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.EnableEnhancedMonitoringAsync(Amazon.Kinesis.Model.EnableEnhancedMonitoringRequest,System.Threading.CancellationToken)">
            <summary>
            Enables enhanced Kinesis data stream monitoring for shard-level metrics.
            </summary>
            <param name="request">Container for the necessary parameters to execute the EnableEnhancedMonitoring service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the EnableEnhancedMonitoring service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/EnableEnhancedMonitoring">REST API Reference for EnableEnhancedMonitoring Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.GetRecords(Amazon.Kinesis.Model.GetRecordsRequest)">
            <summary>
            Gets data records from a Kinesis data stream's shard.
            
             
            <para>
            Specify a shard iterator using the <code>ShardIterator</code> parameter. The shard
            iterator specifies the position in the shard from which you want to start reading
            data records sequentially. If there are no records available in the portion of the
            shard that the iterator points to, <a>GetRecords</a> returns an empty list. It might
            take multiple calls to get to a portion of the shard that contains records.
            </para>
             
            <para>
            You can scale by provisioning multiple shards per stream while considering service
            limits (for more information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Amazon
            Kinesis Data Streams Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>).
            Your application should have one thread per shard, each reading continuously from
            its stream. To read from a stream continually, call <a>GetRecords</a> in a loop. Use
            <a>GetShardIterator</a> to get the shard iterator to specify in the first <a>GetRecords</a>
            call. <a>GetRecords</a> returns a new shard iterator in <code>NextShardIterator</code>.
            Specify the shard iterator returned in <code>NextShardIterator</code> in subsequent
            calls to <a>GetRecords</a>. If the shard has been closed, the shard iterator can't
            return more data and <a>GetRecords</a> returns <code>null</code> in <code>NextShardIterator</code>.
            You can terminate the loop when the shard is closed, or when the shard iterator reaches
            the record with the sequence number or other attribute that marks it as the last record
            to process.
            </para>
             
            <para>
            Each data record can be up to 1 MiB in size, and each shard can read up to 2 MiB per
            second. You can ensure that your calls don't exceed the maximum supported size or
            throughput by using the <code>Limit</code> parameter to specify the maximum number
            of records that <a>GetRecords</a> can return. Consider your average record size when
            determining this limit. The maximum number of records that can be returned per call
            is 10,000.
            </para>
             
            <para>
            The size of the data returned by <a>GetRecords</a> varies depending on the utilization
            of the shard. The maximum size of data that <a>GetRecords</a> can return is 10 MiB.
            If a call returns this amount of data, subsequent calls made within the next 5 seconds
            throw <code>ProvisionedThroughputExceededException</code>. If there is insufficient
            provisioned throughput on the stream, subsequent calls made within the next 1 second
            throw <code>ProvisionedThroughputExceededException</code>. <a>GetRecords</a> doesn't
            return any data when it throws an exception. For this reason, we recommend that you
            wait 1 second between calls to <a>GetRecords</a>. However, it's possible that the
            application will get exceptions for longer than 1 second.
            </para>
             
            <para>
            To detect whether the application is falling behind in processing, you can use the
            <code>MillisBehindLatest</code> response attribute. You can also monitor the stream
            using CloudWatch metrics and other mechanisms (see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/monitoring.html">Monitoring</a>
            in the <i>Amazon Kinesis Data Streams Developer Guide</i>).
            </para>
             
            <para>
            Each Amazon Kinesis record includes a value, <code>ApproximateArrivalTimestamp</code>,
            that is set when a stream successfully receives and stores a record. This is commonly
            referred to as a server-side time stamp, whereas a client-side time stamp is set when
            a data producer creates or sends the record to a stream (a data producer is any data
            source putting data records into a stream, for example with <a>PutRecords</a>). The
            time stamp has millisecond precision. There are no guarantees about the time stamp
            accuracy, or that the time stamp is always increasing. For example, records in a shard
            or across a stream might have time stamps that are out of order.
            </para>
             
            <para>
            This operation has a limit of five transactions per second per shard.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetRecords service method.</param>
            
            <returns>The response from the GetRecords service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.ExpiredIteratorException">
            The provided iterator exceeds the maximum age allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSAccessDeniedException">
            The ciphertext references a key that doesn't exist or that you don't have access to.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSDisabledException">
            The request was rejected because the specified customer master key (CMK) isn't enabled.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource isn't valid for
            this request. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">How
            Key State Affects Use of a Customer Master Key</a> in the <i>AWS Key Management Service
            Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSNotFoundException">
            The request was rejected because the specified entity or resource can't be found.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSOptInRequiredException">
            The AWS access key ID needs a subscription for the service.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSThrottlingException">
            The request was denied due to request throttling. For more information about throttling,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html#requests-per-second">Limits</a>
            in the <i>AWS Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ProvisionedThroughputExceededException">
            The request rate for the stream is too high, or the requested data is too large for
            the available throughput. Reduce the frequency or size of your requests. For more
            information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams
            Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>, and <a href="https://docs.aws.amazon.com/general/latest/gr/api-retries.html">Error
            Retries and Exponential Backoff in AWS</a> in the <i>AWS General Reference</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/GetRecords">REST API Reference for GetRecords Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.GetRecordsAsync(Amazon.Kinesis.Model.GetRecordsRequest,System.Threading.CancellationToken)">
            <summary>
            Gets data records from a Kinesis data stream's shard.
            
             
            <para>
            Specify a shard iterator using the <code>ShardIterator</code> parameter. The shard
            iterator specifies the position in the shard from which you want to start reading
            data records sequentially. If there are no records available in the portion of the
            shard that the iterator points to, <a>GetRecords</a> returns an empty list. It might
            take multiple calls to get to a portion of the shard that contains records.
            </para>
             
            <para>
            You can scale by provisioning multiple shards per stream while considering service
            limits (for more information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Amazon
            Kinesis Data Streams Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>).
            Your application should have one thread per shard, each reading continuously from
            its stream. To read from a stream continually, call <a>GetRecords</a> in a loop. Use
            <a>GetShardIterator</a> to get the shard iterator to specify in the first <a>GetRecords</a>
            call. <a>GetRecords</a> returns a new shard iterator in <code>NextShardIterator</code>.
            Specify the shard iterator returned in <code>NextShardIterator</code> in subsequent
            calls to <a>GetRecords</a>. If the shard has been closed, the shard iterator can't
            return more data and <a>GetRecords</a> returns <code>null</code> in <code>NextShardIterator</code>.
            You can terminate the loop when the shard is closed, or when the shard iterator reaches
            the record with the sequence number or other attribute that marks it as the last record
            to process.
            </para>
             
            <para>
            Each data record can be up to 1 MiB in size, and each shard can read up to 2 MiB per
            second. You can ensure that your calls don't exceed the maximum supported size or
            throughput by using the <code>Limit</code> parameter to specify the maximum number
            of records that <a>GetRecords</a> can return. Consider your average record size when
            determining this limit. The maximum number of records that can be returned per call
            is 10,000.
            </para>
             
            <para>
            The size of the data returned by <a>GetRecords</a> varies depending on the utilization
            of the shard. The maximum size of data that <a>GetRecords</a> can return is 10 MiB.
            If a call returns this amount of data, subsequent calls made within the next 5 seconds
            throw <code>ProvisionedThroughputExceededException</code>. If there is insufficient
            provisioned throughput on the stream, subsequent calls made within the next 1 second
            throw <code>ProvisionedThroughputExceededException</code>. <a>GetRecords</a> doesn't
            return any data when it throws an exception. For this reason, we recommend that you
            wait 1 second between calls to <a>GetRecords</a>. However, it's possible that the
            application will get exceptions for longer than 1 second.
            </para>
             
            <para>
            To detect whether the application is falling behind in processing, you can use the
            <code>MillisBehindLatest</code> response attribute. You can also monitor the stream
            using CloudWatch metrics and other mechanisms (see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/monitoring.html">Monitoring</a>
            in the <i>Amazon Kinesis Data Streams Developer Guide</i>).
            </para>
             
            <para>
            Each Amazon Kinesis record includes a value, <code>ApproximateArrivalTimestamp</code>,
            that is set when a stream successfully receives and stores a record. This is commonly
            referred to as a server-side time stamp, whereas a client-side time stamp is set when
            a data producer creates or sends the record to a stream (a data producer is any data
            source putting data records into a stream, for example with <a>PutRecords</a>). The
            time stamp has millisecond precision. There are no guarantees about the time stamp
            accuracy, or that the time stamp is always increasing. For example, records in a shard
            or across a stream might have time stamps that are out of order.
            </para>
             
            <para>
            This operation has a limit of five transactions per second per shard.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetRecords service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetRecords service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.ExpiredIteratorException">
            The provided iterator exceeds the maximum age allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSAccessDeniedException">
            The ciphertext references a key that doesn't exist or that you don't have access to.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSDisabledException">
            The request was rejected because the specified customer master key (CMK) isn't enabled.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource isn't valid for
            this request. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">How
            Key State Affects Use of a Customer Master Key</a> in the <i>AWS Key Management Service
            Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSNotFoundException">
            The request was rejected because the specified entity or resource can't be found.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSOptInRequiredException">
            The AWS access key ID needs a subscription for the service.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSThrottlingException">
            The request was denied due to request throttling. For more information about throttling,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html#requests-per-second">Limits</a>
            in the <i>AWS Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ProvisionedThroughputExceededException">
            The request rate for the stream is too high, or the requested data is too large for
            the available throughput. Reduce the frequency or size of your requests. For more
            information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams
            Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>, and <a href="https://docs.aws.amazon.com/general/latest/gr/api-retries.html">Error
            Retries and Exponential Backoff in AWS</a> in the <i>AWS General Reference</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/GetRecords">REST API Reference for GetRecords Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.GetShardIterator(Amazon.Kinesis.Model.GetShardIteratorRequest)">
            <summary>
            Gets an Amazon Kinesis shard iterator. A shard iterator expires 5 minutes after it
            is returned to the requester.
            
             
            <para>
            A shard iterator specifies the shard position from which to start reading data records
            sequentially. The position is specified using the sequence number of a data record
            in a shard. A sequence number is the identifier associated with every record ingested
            in the stream, and is assigned when a record is put into the stream. Each stream has
            one or more shards.
            </para>
             
            <para>
            You must specify the shard iterator type. For example, you can set the <code>ShardIteratorType</code>
            parameter to read exactly from the position denoted by a specific sequence number
            by using the <code>AT_SEQUENCE_NUMBER</code> shard iterator type. Alternatively, the
            parameter can read right after the sequence number by using the <code>AFTER_SEQUENCE_NUMBER</code>
            shard iterator type, using sequence numbers returned by earlier calls to <a>PutRecord</a>,
            <a>PutRecords</a>, <a>GetRecords</a>, or <a>DescribeStream</a>. In the request, you
            can specify the shard iterator type <code>AT_TIMESTAMP</code> to read records from
            an arbitrary point in time, <code>TRIM_HORIZON</code> to cause <code>ShardIterator</code>
            to point to the last untrimmed record in the shard in the system (the oldest data
            record in the shard), or <code>LATEST</code> so that you always read the most recent
            data in the shard. 
            </para>
             
            <para>
            When you read repeatedly from a stream, use a <a>GetShardIterator</a> request to get
            the first shard iterator for use in your first <a>GetRecords</a> request and for subsequent
            reads use the shard iterator returned by the <a>GetRecords</a> request in <code>NextShardIterator</code>.
            A new shard iterator is returned by every <a>GetRecords</a> request in <code>NextShardIterator</code>,
            which you use in the <code>ShardIterator</code> parameter of the next <a>GetRecords</a>
            request. 
            </para>
             
            <para>
            If a <a>GetShardIterator</a> request is made too often, you receive a <code>ProvisionedThroughputExceededException</code>.
            For more information about throughput limits, see <a>GetRecords</a>, and <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams
            Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             
            <para>
            If the shard is closed, <a>GetShardIterator</a> returns a valid iterator for the last
            sequence number of the shard. A shard can be closed as a result of using <a>SplitShard</a>
            or <a>MergeShards</a>.
            </para>
             
            <para>
             <a>GetShardIterator</a> has a limit of five transactions per second per account per
            open shard.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetShardIterator service method.</param>
            
            <returns>The response from the GetShardIterator service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ProvisionedThroughputExceededException">
            The request rate for the stream is too high, or the requested data is too large for
            the available throughput. Reduce the frequency or size of your requests. For more
            information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams
            Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>, and <a href="https://docs.aws.amazon.com/general/latest/gr/api-retries.html">Error
            Retries and Exponential Backoff in AWS</a> in the <i>AWS General Reference</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/GetShardIterator">REST API Reference for GetShardIterator Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.GetShardIteratorAsync(Amazon.Kinesis.Model.GetShardIteratorRequest,System.Threading.CancellationToken)">
            <summary>
            Gets an Amazon Kinesis shard iterator. A shard iterator expires 5 minutes after it
            is returned to the requester.
            
             
            <para>
            A shard iterator specifies the shard position from which to start reading data records
            sequentially. The position is specified using the sequence number of a data record
            in a shard. A sequence number is the identifier associated with every record ingested
            in the stream, and is assigned when a record is put into the stream. Each stream has
            one or more shards.
            </para>
             
            <para>
            You must specify the shard iterator type. For example, you can set the <code>ShardIteratorType</code>
            parameter to read exactly from the position denoted by a specific sequence number
            by using the <code>AT_SEQUENCE_NUMBER</code> shard iterator type. Alternatively, the
            parameter can read right after the sequence number by using the <code>AFTER_SEQUENCE_NUMBER</code>
            shard iterator type, using sequence numbers returned by earlier calls to <a>PutRecord</a>,
            <a>PutRecords</a>, <a>GetRecords</a>, or <a>DescribeStream</a>. In the request, you
            can specify the shard iterator type <code>AT_TIMESTAMP</code> to read records from
            an arbitrary point in time, <code>TRIM_HORIZON</code> to cause <code>ShardIterator</code>
            to point to the last untrimmed record in the shard in the system (the oldest data
            record in the shard), or <code>LATEST</code> so that you always read the most recent
            data in the shard. 
            </para>
             
            <para>
            When you read repeatedly from a stream, use a <a>GetShardIterator</a> request to get
            the first shard iterator for use in your first <a>GetRecords</a> request and for subsequent
            reads use the shard iterator returned by the <a>GetRecords</a> request in <code>NextShardIterator</code>.
            A new shard iterator is returned by every <a>GetRecords</a> request in <code>NextShardIterator</code>,
            which you use in the <code>ShardIterator</code> parameter of the next <a>GetRecords</a>
            request. 
            </para>
             
            <para>
            If a <a>GetShardIterator</a> request is made too often, you receive a <code>ProvisionedThroughputExceededException</code>.
            For more information about throughput limits, see <a>GetRecords</a>, and <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams
            Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             
            <para>
            If the shard is closed, <a>GetShardIterator</a> returns a valid iterator for the last
            sequence number of the shard. A shard can be closed as a result of using <a>SplitShard</a>
            or <a>MergeShards</a>.
            </para>
             
            <para>
             <a>GetShardIterator</a> has a limit of five transactions per second per account per
            open shard.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetShardIterator service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetShardIterator service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ProvisionedThroughputExceededException">
            The request rate for the stream is too high, or the requested data is too large for
            the available throughput. Reduce the frequency or size of your requests. For more
            information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams
            Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>, and <a href="https://docs.aws.amazon.com/general/latest/gr/api-retries.html">Error
            Retries and Exponential Backoff in AWS</a> in the <i>AWS General Reference</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/GetShardIterator">REST API Reference for GetShardIterator Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.IncreaseStreamRetentionPeriod(System.String,System.Int32)">
            <summary>
            Increases the Kinesis data stream's retention period, which is the length of time
            data records are accessible after they are added to the stream. The maximum value
            of a stream's retention period is 168 hours (7 days).
            
             
            <para>
            If you choose a longer stream retention period, this operation increases the time
            period during which records that have not yet expired are accessible. However, it
            does not make previous, expired data (older than the stream's previous retention period)
            accessible after the operation has been called. For example, if a stream's retention
            period is set to 24 hours and is increased to 168 hours, any data that is older than
            24 hours remains inaccessible to consumer applications.
            </para>
            </summary>
            <param name="streamName">The name of the stream to modify.</param>
            <param name="retentionPeriodHours">The new retention period of the stream, in hours. Must be more than the current retention period.</param>
            
            <returns>The response from the IncreaseStreamRetentionPeriod service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/IncreaseStreamRetentionPeriod">REST API Reference for IncreaseStreamRetentionPeriod Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.IncreaseStreamRetentionPeriod(Amazon.Kinesis.Model.IncreaseStreamRetentionPeriodRequest)">
            <summary>
            Increases the Kinesis data stream's retention period, which is the length of time
            data records are accessible after they are added to the stream. The maximum value
            of a stream's retention period is 168 hours (7 days).
            
             
            <para>
            If you choose a longer stream retention period, this operation increases the time
            period during which records that have not yet expired are accessible. However, it
            does not make previous, expired data (older than the stream's previous retention period)
            accessible after the operation has been called. For example, if a stream's retention
            period is set to 24 hours and is increased to 168 hours, any data that is older than
            24 hours remains inaccessible to consumer applications.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the IncreaseStreamRetentionPeriod service method.</param>
            
            <returns>The response from the IncreaseStreamRetentionPeriod service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/IncreaseStreamRetentionPeriod">REST API Reference for IncreaseStreamRetentionPeriod Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.IncreaseStreamRetentionPeriodAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Increases the Kinesis data stream's retention period, which is the length of time
            data records are accessible after they are added to the stream. The maximum value
            of a stream's retention period is 168 hours (7 days).
            
             
            <para>
            If you choose a longer stream retention period, this operation increases the time
            period during which records that have not yet expired are accessible. However, it
            does not make previous, expired data (older than the stream's previous retention period)
            accessible after the operation has been called. For example, if a stream's retention
            period is set to 24 hours and is increased to 168 hours, any data that is older than
            24 hours remains inaccessible to consumer applications.
            </para>
            </summary>
            <param name="streamName">The name of the stream to modify.</param>
            <param name="retentionPeriodHours">The new retention period of the stream, in hours. Must be more than the current retention period.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the IncreaseStreamRetentionPeriod service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/IncreaseStreamRetentionPeriod">REST API Reference for IncreaseStreamRetentionPeriod Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.IncreaseStreamRetentionPeriodAsync(Amazon.Kinesis.Model.IncreaseStreamRetentionPeriodRequest,System.Threading.CancellationToken)">
            <summary>
            Increases the Kinesis data stream's retention period, which is the length of time
            data records are accessible after they are added to the stream. The maximum value
            of a stream's retention period is 168 hours (7 days).
            
             
            <para>
            If you choose a longer stream retention period, this operation increases the time
            period during which records that have not yet expired are accessible. However, it
            does not make previous, expired data (older than the stream's previous retention period)
            accessible after the operation has been called. For example, if a stream's retention
            period is set to 24 hours and is increased to 168 hours, any data that is older than
            24 hours remains inaccessible to consumer applications.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the IncreaseStreamRetentionPeriod service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the IncreaseStreamRetentionPeriod service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/IncreaseStreamRetentionPeriod">REST API Reference for IncreaseStreamRetentionPeriod Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.ListShards(Amazon.Kinesis.Model.ListShardsRequest)">
            <summary>
            Lists the shards in a stream and provides information about each shard. This operation
            has a limit of 100 transactions per second per data stream.
            
             <important> 
            <para>
            This API is a new operation that is used by the Amazon Kinesis Client Library (KCL).
            If you have a fine-grained IAM policy that only allows specific operations, you must
            update your policy to allow calls to this API. For more information, see <a href="https://docs.aws.amazon.com/streams/latest/dev/controlling-access.html">Controlling
            Access to Amazon Kinesis Data Streams Resources Using IAM</a>.
            </para>
             </important>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListShards service method.</param>
            
            <returns>The response from the ListShards service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.ExpiredNextTokenException">
            The pagination token passed to the operation is expired.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/ListShards">REST API Reference for ListShards Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.ListShardsAsync(Amazon.Kinesis.Model.ListShardsRequest,System.Threading.CancellationToken)">
            <summary>
            Lists the shards in a stream and provides information about each shard. This operation
            has a limit of 100 transactions per second per data stream.
            
             <important> 
            <para>
            This API is a new operation that is used by the Amazon Kinesis Client Library (KCL).
            If you have a fine-grained IAM policy that only allows specific operations, you must
            update your policy to allow calls to this API. For more information, see <a href="https://docs.aws.amazon.com/streams/latest/dev/controlling-access.html">Controlling
            Access to Amazon Kinesis Data Streams Resources Using IAM</a>.
            </para>
             </important>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListShards service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListShards service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.ExpiredNextTokenException">
            The pagination token passed to the operation is expired.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/ListShards">REST API Reference for ListShards Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.ListStreamConsumers(Amazon.Kinesis.Model.ListStreamConsumersRequest)">
            <summary>
            Lists the consumers registered to receive data from a stream using enhanced fan-out,
            and provides information about each consumer.
            
             
            <para>
            This operation has a limit of 5 transactions per second per stream.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListStreamConsumers service method.</param>
            
            <returns>The response from the ListStreamConsumers service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.ExpiredNextTokenException">
            The pagination token passed to the operation is expired.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/ListStreamConsumers">REST API Reference for ListStreamConsumers Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.ListStreamConsumersAsync(Amazon.Kinesis.Model.ListStreamConsumersRequest,System.Threading.CancellationToken)">
            <summary>
            Lists the consumers registered to receive data from a stream using enhanced fan-out,
            and provides information about each consumer.
            
             
            <para>
            This operation has a limit of 5 transactions per second per stream.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListStreamConsumers service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListStreamConsumers service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.ExpiredNextTokenException">
            The pagination token passed to the operation is expired.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/ListStreamConsumers">REST API Reference for ListStreamConsumers Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.ListStreams">
            <summary>
            Lists your Kinesis data streams.
            
             
            <para>
            The number of streams may be too large to return from a single call to <code>ListStreams</code>.
            You can limit the number of returned streams using the <code>Limit</code> parameter.
            If you do not specify a value for the <code>Limit</code> parameter, Kinesis Data Streams
            uses the default limit, which is currently 10.
            </para>
             
            <para>
            You can detect if there are more streams available to list by using the <code>HasMoreStreams</code>
            flag from the returned output. If there are more streams available, you can request
            more streams by using the name of the last stream returned by the <code>ListStreams</code>
            request in the <code>ExclusiveStartStreamName</code> parameter in a subsequent request
            to <code>ListStreams</code>. The group of stream names returned by the subsequent
            request is then added to the list. You can continue this process until all the stream
            names have been collected in the list. 
            </para>
             
            <para>
             <a>ListStreams</a> has a limit of five transactions per second per account.
            </para>
            </summary>
            
            <returns>The response from the ListStreams service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/ListStreams">REST API Reference for ListStreams Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.ListStreams(Amazon.Kinesis.Model.ListStreamsRequest)">
            <summary>
            Lists your Kinesis data streams.
            
             
            <para>
            The number of streams may be too large to return from a single call to <code>ListStreams</code>.
            You can limit the number of returned streams using the <code>Limit</code> parameter.
            If you do not specify a value for the <code>Limit</code> parameter, Kinesis Data Streams
            uses the default limit, which is currently 10.
            </para>
             
            <para>
            You can detect if there are more streams available to list by using the <code>HasMoreStreams</code>
            flag from the returned output. If there are more streams available, you can request
            more streams by using the name of the last stream returned by the <code>ListStreams</code>
            request in the <code>ExclusiveStartStreamName</code> parameter in a subsequent request
            to <code>ListStreams</code>. The group of stream names returned by the subsequent
            request is then added to the list. You can continue this process until all the stream
            names have been collected in the list. 
            </para>
             
            <para>
             <a>ListStreams</a> has a limit of five transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListStreams service method.</param>
            
            <returns>The response from the ListStreams service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/ListStreams">REST API Reference for ListStreams Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.ListStreamsAsync(System.Threading.CancellationToken)">
            <summary>
            Lists your Kinesis data streams.
            
             
            <para>
            The number of streams may be too large to return from a single call to <code>ListStreams</code>.
            You can limit the number of returned streams using the <code>Limit</code> parameter.
            If you do not specify a value for the <code>Limit</code> parameter, Kinesis Data Streams
            uses the default limit, which is currently 10.
            </para>
             
            <para>
            You can detect if there are more streams available to list by using the <code>HasMoreStreams</code>
            flag from the returned output. If there are more streams available, you can request
            more streams by using the name of the last stream returned by the <code>ListStreams</code>
            request in the <code>ExclusiveStartStreamName</code> parameter in a subsequent request
            to <code>ListStreams</code>. The group of stream names returned by the subsequent
            request is then added to the list. You can continue this process until all the stream
            names have been collected in the list. 
            </para>
             
            <para>
             <a>ListStreams</a> has a limit of five transactions per second per account.
            </para>
            </summary>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListStreams service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/ListStreams">REST API Reference for ListStreams Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.ListStreamsAsync(Amazon.Kinesis.Model.ListStreamsRequest,System.Threading.CancellationToken)">
            <summary>
            Lists your Kinesis data streams.
            
             
            <para>
            The number of streams may be too large to return from a single call to <code>ListStreams</code>.
            You can limit the number of returned streams using the <code>Limit</code> parameter.
            If you do not specify a value for the <code>Limit</code> parameter, Kinesis Data Streams
            uses the default limit, which is currently 10.
            </para>
             
            <para>
            You can detect if there are more streams available to list by using the <code>HasMoreStreams</code>
            flag from the returned output. If there are more streams available, you can request
            more streams by using the name of the last stream returned by the <code>ListStreams</code>
            request in the <code>ExclusiveStartStreamName</code> parameter in a subsequent request
            to <code>ListStreams</code>. The group of stream names returned by the subsequent
            request is then added to the list. You can continue this process until all the stream
            names have been collected in the list. 
            </para>
             
            <para>
             <a>ListStreams</a> has a limit of five transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListStreams service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListStreams service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/ListStreams">REST API Reference for ListStreams Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.ListTagsForStream(Amazon.Kinesis.Model.ListTagsForStreamRequest)">
            <summary>
            Lists the tags for the specified Kinesis data stream. This operation has a limit of
            five transactions per second per account.
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListTagsForStream service method.</param>
            
            <returns>The response from the ListTagsForStream service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/ListTagsForStream">REST API Reference for ListTagsForStream Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.ListTagsForStreamAsync(Amazon.Kinesis.Model.ListTagsForStreamRequest,System.Threading.CancellationToken)">
            <summary>
            Lists the tags for the specified Kinesis data stream. This operation has a limit of
            five transactions per second per account.
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListTagsForStream service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListTagsForStream service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/ListTagsForStream">REST API Reference for ListTagsForStream Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.MergeShards(Amazon.Kinesis.Model.MergeShardsRequest)">
            <summary>
            Merges two adjacent shards in a Kinesis data stream and combines them into a single
            shard to reduce the stream's capacity to ingest and transport data. Two shards are
            considered adjacent if the union of the hash key ranges for the two shards form a
            contiguous set with no gaps. For example, if you have two shards, one with a hash
            key range of 276...381 and the other with a hash key range of 382...454, then you
            could merge these two shards into a single shard that would have a hash key range
            of 276...454. After the merge, the single child shard receives data for all hash key
            values covered by the two parent shards.
            
             
            <para>
             <code>MergeShards</code> is called when there is a need to reduce the overall capacity
            of a stream because of excess capacity that is not being used. You must specify the
            shard to be merged and the adjacent shard for a stream. For more information about
            merging shards, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-resharding-merge.html">Merge
            Two Shards</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             
            <para>
            If the stream is in the <code>ACTIVE</code> state, you can call <code>MergeShards</code>.
            If a stream is in the <code>CREATING</code>, <code>UPDATING</code>, or <code>DELETING</code>
            state, <code>MergeShards</code> returns a <code>ResourceInUseException</code>. If
            the specified stream does not exist, <code>MergeShards</code> returns a <code>ResourceNotFoundException</code>.
            
            </para>
             
            <para>
            You can use <a>DescribeStream</a> to check the state of the stream, which is returned
            in <code>StreamStatus</code>.
            </para>
             
            <para>
             <code>MergeShards</code> is an asynchronous operation. Upon receiving a <code>MergeShards</code>
            request, Amazon Kinesis Data Streams immediately returns a response and sets the <code>StreamStatus</code>
            to <code>UPDATING</code>. After the operation is completed, Kinesis Data Streams sets
            the <code>StreamStatus</code> to <code>ACTIVE</code>. Read and write operations continue
            to work while the stream is in the <code>UPDATING</code> state. 
            </para>
             
            <para>
            You use <a>DescribeStream</a> to determine the shard IDs that are specified in the
            <code>MergeShards</code> request. 
            </para>
             
            <para>
            If you try to operate on too many streams in parallel using <a>CreateStream</a>, <a>DeleteStream</a>,
            <code>MergeShards</code>, or <a>SplitShard</a>, you receive a <code>LimitExceededException</code>.
            
            </para>
             
            <para>
             <code>MergeShards</code> has a limit of five transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the MergeShards service method.</param>
            
            <returns>The response from the MergeShards service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/MergeShards">REST API Reference for MergeShards Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.MergeShardsAsync(Amazon.Kinesis.Model.MergeShardsRequest,System.Threading.CancellationToken)">
            <summary>
            Merges two adjacent shards in a Kinesis data stream and combines them into a single
            shard to reduce the stream's capacity to ingest and transport data. Two shards are
            considered adjacent if the union of the hash key ranges for the two shards form a
            contiguous set with no gaps. For example, if you have two shards, one with a hash
            key range of 276...381 and the other with a hash key range of 382...454, then you
            could merge these two shards into a single shard that would have a hash key range
            of 276...454. After the merge, the single child shard receives data for all hash key
            values covered by the two parent shards.
            
             
            <para>
             <code>MergeShards</code> is called when there is a need to reduce the overall capacity
            of a stream because of excess capacity that is not being used. You must specify the
            shard to be merged and the adjacent shard for a stream. For more information about
            merging shards, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-resharding-merge.html">Merge
            Two Shards</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             
            <para>
            If the stream is in the <code>ACTIVE</code> state, you can call <code>MergeShards</code>.
            If a stream is in the <code>CREATING</code>, <code>UPDATING</code>, or <code>DELETING</code>
            state, <code>MergeShards</code> returns a <code>ResourceInUseException</code>. If
            the specified stream does not exist, <code>MergeShards</code> returns a <code>ResourceNotFoundException</code>.
            
            </para>
             
            <para>
            You can use <a>DescribeStream</a> to check the state of the stream, which is returned
            in <code>StreamStatus</code>.
            </para>
             
            <para>
             <code>MergeShards</code> is an asynchronous operation. Upon receiving a <code>MergeShards</code>
            request, Amazon Kinesis Data Streams immediately returns a response and sets the <code>StreamStatus</code>
            to <code>UPDATING</code>. After the operation is completed, Kinesis Data Streams sets
            the <code>StreamStatus</code> to <code>ACTIVE</code>. Read and write operations continue
            to work while the stream is in the <code>UPDATING</code> state. 
            </para>
             
            <para>
            You use <a>DescribeStream</a> to determine the shard IDs that are specified in the
            <code>MergeShards</code> request. 
            </para>
             
            <para>
            If you try to operate on too many streams in parallel using <a>CreateStream</a>, <a>DeleteStream</a>,
            <code>MergeShards</code>, or <a>SplitShard</a>, you receive a <code>LimitExceededException</code>.
            
            </para>
             
            <para>
             <code>MergeShards</code> has a limit of five transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the MergeShards service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the MergeShards service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/MergeShards">REST API Reference for MergeShards Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.PutRecord(Amazon.Kinesis.Model.PutRecordRequest)">
            <summary>
            Writes a single data record into an Amazon Kinesis data stream. Call <code>PutRecord</code>
            to send data into the stream for real-time ingestion and subsequent processing, one
            record at a time. Each shard can support writes up to 1,000 records per second, up
            to a maximum data write total of 1 MiB per second.
            
             
            <para>
            You must specify the name of the stream that captures, stores, and transports the
            data; a partition key; and the data blob itself.
            </para>
             
            <para>
            The data blob can be any type of data; for example, a segment from a log file, geographic/location
            data, website clickstream data, and so on.
            </para>
             
            <para>
            The partition key is used by Kinesis Data Streams to distribute data across shards.
            Kinesis Data Streams segregates the data records that belong to a stream into multiple
            shards, using the partition key associated with each data record to determine the
            shard to which a given data record belongs.
            </para>
             
            <para>
            Partition keys are Unicode strings, with a maximum length limit of 256 characters
            for each key. An MD5 hash function is used to map partition keys to 128-bit integer
            values and to map associated data records to shards using the hash key ranges of the
            shards. You can override hashing the partition key to determine the shard by explicitly
            specifying a hash value using the <code>ExplicitHashKey</code> parameter. For more
            information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-add-data-to-stream">Adding
            Data to a Stream</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             
            <para>
             <code>PutRecord</code> returns the shard ID of where the data record was placed and
            the sequence number that was assigned to the data record.
            </para>
             
            <para>
            Sequence numbers increase over time and are specific to a shard within a stream, not
            across all shards within a stream. To guarantee strictly increasing ordering, write
            serially to a shard and use the <code>SequenceNumberForOrdering</code> parameter.
            For more information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-add-data-to-stream">Adding
            Data to a Stream</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             <important> 
            <para>
            After you write a record to a stream, you cannot modify that record or its order within
            the stream.
            </para>
             </important> 
            <para>
            If a <code>PutRecord</code> request cannot be processed because of insufficient provisioned
            throughput on the shard involved in the request, <code>PutRecord</code> throws <code>ProvisionedThroughputExceededException</code>.
            
            </para>
             
            <para>
            By default, data records are accessible for 24 hours from the time that they are added
            to a stream. You can use <a>IncreaseStreamRetentionPeriod</a> or <a>DecreaseStreamRetentionPeriod</a>
            to modify this retention period.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutRecord service method.</param>
            
            <returns>The response from the PutRecord service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSAccessDeniedException">
            The ciphertext references a key that doesn't exist or that you don't have access to.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSDisabledException">
            The request was rejected because the specified customer master key (CMK) isn't enabled.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource isn't valid for
            this request. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">How
            Key State Affects Use of a Customer Master Key</a> in the <i>AWS Key Management Service
            Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSNotFoundException">
            The request was rejected because the specified entity or resource can't be found.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSOptInRequiredException">
            The AWS access key ID needs a subscription for the service.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSThrottlingException">
            The request was denied due to request throttling. For more information about throttling,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html#requests-per-second">Limits</a>
            in the <i>AWS Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ProvisionedThroughputExceededException">
            The request rate for the stream is too high, or the requested data is too large for
            the available throughput. Reduce the frequency or size of your requests. For more
            information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams
            Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>, and <a href="https://docs.aws.amazon.com/general/latest/gr/api-retries.html">Error
            Retries and Exponential Backoff in AWS</a> in the <i>AWS General Reference</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/PutRecord">REST API Reference for PutRecord Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.PutRecordAsync(Amazon.Kinesis.Model.PutRecordRequest,System.Threading.CancellationToken)">
            <summary>
            Writes a single data record into an Amazon Kinesis data stream. Call <code>PutRecord</code>
            to send data into the stream for real-time ingestion and subsequent processing, one
            record at a time. Each shard can support writes up to 1,000 records per second, up
            to a maximum data write total of 1 MiB per second.
            
             
            <para>
            You must specify the name of the stream that captures, stores, and transports the
            data; a partition key; and the data blob itself.
            </para>
             
            <para>
            The data blob can be any type of data; for example, a segment from a log file, geographic/location
            data, website clickstream data, and so on.
            </para>
             
            <para>
            The partition key is used by Kinesis Data Streams to distribute data across shards.
            Kinesis Data Streams segregates the data records that belong to a stream into multiple
            shards, using the partition key associated with each data record to determine the
            shard to which a given data record belongs.
            </para>
             
            <para>
            Partition keys are Unicode strings, with a maximum length limit of 256 characters
            for each key. An MD5 hash function is used to map partition keys to 128-bit integer
            values and to map associated data records to shards using the hash key ranges of the
            shards. You can override hashing the partition key to determine the shard by explicitly
            specifying a hash value using the <code>ExplicitHashKey</code> parameter. For more
            information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-add-data-to-stream">Adding
            Data to a Stream</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             
            <para>
             <code>PutRecord</code> returns the shard ID of where the data record was placed and
            the sequence number that was assigned to the data record.
            </para>
             
            <para>
            Sequence numbers increase over time and are specific to a shard within a stream, not
            across all shards within a stream. To guarantee strictly increasing ordering, write
            serially to a shard and use the <code>SequenceNumberForOrdering</code> parameter.
            For more information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-add-data-to-stream">Adding
            Data to a Stream</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             <important> 
            <para>
            After you write a record to a stream, you cannot modify that record or its order within
            the stream.
            </para>
             </important> 
            <para>
            If a <code>PutRecord</code> request cannot be processed because of insufficient provisioned
            throughput on the shard involved in the request, <code>PutRecord</code> throws <code>ProvisionedThroughputExceededException</code>.
            
            </para>
             
            <para>
            By default, data records are accessible for 24 hours from the time that they are added
            to a stream. You can use <a>IncreaseStreamRetentionPeriod</a> or <a>DecreaseStreamRetentionPeriod</a>
            to modify this retention period.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutRecord service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutRecord service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSAccessDeniedException">
            The ciphertext references a key that doesn't exist or that you don't have access to.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSDisabledException">
            The request was rejected because the specified customer master key (CMK) isn't enabled.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource isn't valid for
            this request. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">How
            Key State Affects Use of a Customer Master Key</a> in the <i>AWS Key Management Service
            Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSNotFoundException">
            The request was rejected because the specified entity or resource can't be found.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSOptInRequiredException">
            The AWS access key ID needs a subscription for the service.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSThrottlingException">
            The request was denied due to request throttling. For more information about throttling,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html#requests-per-second">Limits</a>
            in the <i>AWS Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ProvisionedThroughputExceededException">
            The request rate for the stream is too high, or the requested data is too large for
            the available throughput. Reduce the frequency or size of your requests. For more
            information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams
            Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>, and <a href="https://docs.aws.amazon.com/general/latest/gr/api-retries.html">Error
            Retries and Exponential Backoff in AWS</a> in the <i>AWS General Reference</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/PutRecord">REST API Reference for PutRecord Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.PutRecords(Amazon.Kinesis.Model.PutRecordsRequest)">
            <summary>
            Writes multiple data records into a Kinesis data stream in a single call (also referred
            to as a <code>PutRecords</code> request). Use this operation to send data into the
            stream for data ingestion and processing. 
            
             
            <para>
            Each <code>PutRecords</code> request can support up to 500 records. Each record in
            the request can be as large as 1 MiB, up to a limit of 5 MiB for the entire request,
            including partition keys. Each shard can support writes up to 1,000 records per second,
            up to a maximum data write total of 1 MiB per second.
            </para>
             
            <para>
            You must specify the name of the stream that captures, stores, and transports the
            data; and an array of request <code>Records</code>, with each record in the array
            requiring a partition key and data blob. The record size limit applies to the total
            size of the partition key and data blob.
            </para>
             
            <para>
            The data blob can be any type of data; for example, a segment from a log file, geographic/location
            data, website clickstream data, and so on.
            </para>
             
            <para>
            The partition key is used by Kinesis Data Streams as input to a hash function that
            maps the partition key and associated data to a specific shard. An MD5 hash function
            is used to map partition keys to 128-bit integer values and to map associated data
            records to shards. As a result of this hashing mechanism, all data records with the
            same partition key map to the same shard within the stream. For more information,
            see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-add-data-to-stream">Adding
            Data to a Stream</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             
            <para>
            Each record in the <code>Records</code> array may include an optional parameter, <code>ExplicitHashKey</code>,
            which overrides the partition key to shard mapping. This parameter allows a data producer
            to determine explicitly the shard where the record is stored. For more information,
            see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-putrecords">Adding
            Multiple Records with PutRecords</a> in the <i>Amazon Kinesis Data Streams Developer
            Guide</i>.
            </para>
             
            <para>
            The <code>PutRecords</code> response includes an array of response <code>Records</code>.
            Each record in the response array directly correlates with a record in the request
            array using natural ordering, from the top to the bottom of the request and response.
            The response <code>Records</code> array always includes the same number of records
            as the request array.
            </para>
             
            <para>
            The response <code>Records</code> array includes both successfully and unsuccessfully
            processed records. Kinesis Data Streams attempts to process all records in each <code>PutRecords</code>
            request. A single record failure does not stop the processing of subsequent records.
            As a result, PutRecords doesn't guarantee the ordering of records. If you need to
            read records in the same order they are written to the stream, use <a>PutRecord</a>
            instead of <code>PutRecords</code>, and write to the same shard.
            </para>
             
            <para>
            A successfully processed record includes <code>ShardId</code> and <code>SequenceNumber</code>
            values. The <code>ShardId</code> parameter identifies the shard in the stream where
            the record is stored. The <code>SequenceNumber</code> parameter is an identifier assigned
            to the put record, unique to all records in the stream.
            </para>
             
            <para>
            An unsuccessfully processed record includes <code>ErrorCode</code> and <code>ErrorMessage</code>
            values. <code>ErrorCode</code> reflects the type of error and can be one of the following
            values: <code>ProvisionedThroughputExceededException</code> or <code>InternalFailure</code>.
            <code>ErrorMessage</code> provides more detailed information about the <code>ProvisionedThroughputExceededException</code>
            exception including the account ID, stream name, and shard ID of the record that was
            throttled. For more information about partially successful responses, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-add-data-to-stream.html#kinesis-using-sdk-java-putrecords">Adding
            Multiple Records with PutRecords</a> in the <i>Amazon Kinesis Data Streams Developer
            Guide</i>.
            </para>
             <important> 
            <para>
            After you write a record to a stream, you cannot modify that record or its order within
            the stream.
            </para>
             </important> 
            <para>
            By default, data records are accessible for 24 hours from the time that they are added
            to a stream. You can use <a>IncreaseStreamRetentionPeriod</a> or <a>DecreaseStreamRetentionPeriod</a>
            to modify this retention period.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutRecords service method.</param>
            
            <returns>The response from the PutRecords service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSAccessDeniedException">
            The ciphertext references a key that doesn't exist or that you don't have access to.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSDisabledException">
            The request was rejected because the specified customer master key (CMK) isn't enabled.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource isn't valid for
            this request. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">How
            Key State Affects Use of a Customer Master Key</a> in the <i>AWS Key Management Service
            Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSNotFoundException">
            The request was rejected because the specified entity or resource can't be found.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSOptInRequiredException">
            The AWS access key ID needs a subscription for the service.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSThrottlingException">
            The request was denied due to request throttling. For more information about throttling,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html#requests-per-second">Limits</a>
            in the <i>AWS Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ProvisionedThroughputExceededException">
            The request rate for the stream is too high, or the requested data is too large for
            the available throughput. Reduce the frequency or size of your requests. For more
            information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams
            Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>, and <a href="https://docs.aws.amazon.com/general/latest/gr/api-retries.html">Error
            Retries and Exponential Backoff in AWS</a> in the <i>AWS General Reference</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/PutRecords">REST API Reference for PutRecords Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.PutRecordsAsync(Amazon.Kinesis.Model.PutRecordsRequest,System.Threading.CancellationToken)">
            <summary>
            Writes multiple data records into a Kinesis data stream in a single call (also referred
            to as a <code>PutRecords</code> request). Use this operation to send data into the
            stream for data ingestion and processing. 
            
             
            <para>
            Each <code>PutRecords</code> request can support up to 500 records. Each record in
            the request can be as large as 1 MiB, up to a limit of 5 MiB for the entire request,
            including partition keys. Each shard can support writes up to 1,000 records per second,
            up to a maximum data write total of 1 MiB per second.
            </para>
             
            <para>
            You must specify the name of the stream that captures, stores, and transports the
            data; and an array of request <code>Records</code>, with each record in the array
            requiring a partition key and data blob. The record size limit applies to the total
            size of the partition key and data blob.
            </para>
             
            <para>
            The data blob can be any type of data; for example, a segment from a log file, geographic/location
            data, website clickstream data, and so on.
            </para>
             
            <para>
            The partition key is used by Kinesis Data Streams as input to a hash function that
            maps the partition key and associated data to a specific shard. An MD5 hash function
            is used to map partition keys to 128-bit integer values and to map associated data
            records to shards. As a result of this hashing mechanism, all data records with the
            same partition key map to the same shard within the stream. For more information,
            see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-add-data-to-stream">Adding
            Data to a Stream</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             
            <para>
            Each record in the <code>Records</code> array may include an optional parameter, <code>ExplicitHashKey</code>,
            which overrides the partition key to shard mapping. This parameter allows a data producer
            to determine explicitly the shard where the record is stored. For more information,
            see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-putrecords">Adding
            Multiple Records with PutRecords</a> in the <i>Amazon Kinesis Data Streams Developer
            Guide</i>.
            </para>
             
            <para>
            The <code>PutRecords</code> response includes an array of response <code>Records</code>.
            Each record in the response array directly correlates with a record in the request
            array using natural ordering, from the top to the bottom of the request and response.
            The response <code>Records</code> array always includes the same number of records
            as the request array.
            </para>
             
            <para>
            The response <code>Records</code> array includes both successfully and unsuccessfully
            processed records. Kinesis Data Streams attempts to process all records in each <code>PutRecords</code>
            request. A single record failure does not stop the processing of subsequent records.
            As a result, PutRecords doesn't guarantee the ordering of records. If you need to
            read records in the same order they are written to the stream, use <a>PutRecord</a>
            instead of <code>PutRecords</code>, and write to the same shard.
            </para>
             
            <para>
            A successfully processed record includes <code>ShardId</code> and <code>SequenceNumber</code>
            values. The <code>ShardId</code> parameter identifies the shard in the stream where
            the record is stored. The <code>SequenceNumber</code> parameter is an identifier assigned
            to the put record, unique to all records in the stream.
            </para>
             
            <para>
            An unsuccessfully processed record includes <code>ErrorCode</code> and <code>ErrorMessage</code>
            values. <code>ErrorCode</code> reflects the type of error and can be one of the following
            values: <code>ProvisionedThroughputExceededException</code> or <code>InternalFailure</code>.
            <code>ErrorMessage</code> provides more detailed information about the <code>ProvisionedThroughputExceededException</code>
            exception including the account ID, stream name, and shard ID of the record that was
            throttled. For more information about partially successful responses, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-add-data-to-stream.html#kinesis-using-sdk-java-putrecords">Adding
            Multiple Records with PutRecords</a> in the <i>Amazon Kinesis Data Streams Developer
            Guide</i>.
            </para>
             <important> 
            <para>
            After you write a record to a stream, you cannot modify that record or its order within
            the stream.
            </para>
             </important> 
            <para>
            By default, data records are accessible for 24 hours from the time that they are added
            to a stream. You can use <a>IncreaseStreamRetentionPeriod</a> or <a>DecreaseStreamRetentionPeriod</a>
            to modify this retention period.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutRecords service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutRecords service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSAccessDeniedException">
            The ciphertext references a key that doesn't exist or that you don't have access to.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSDisabledException">
            The request was rejected because the specified customer master key (CMK) isn't enabled.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource isn't valid for
            this request. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">How
            Key State Affects Use of a Customer Master Key</a> in the <i>AWS Key Management Service
            Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSNotFoundException">
            The request was rejected because the specified entity or resource can't be found.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSOptInRequiredException">
            The AWS access key ID needs a subscription for the service.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSThrottlingException">
            The request was denied due to request throttling. For more information about throttling,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html#requests-per-second">Limits</a>
            in the <i>AWS Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ProvisionedThroughputExceededException">
            The request rate for the stream is too high, or the requested data is too large for
            the available throughput. Reduce the frequency or size of your requests. For more
            information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams
            Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>, and <a href="https://docs.aws.amazon.com/general/latest/gr/api-retries.html">Error
            Retries and Exponential Backoff in AWS</a> in the <i>AWS General Reference</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/PutRecords">REST API Reference for PutRecords Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.RegisterStreamConsumer(Amazon.Kinesis.Model.RegisterStreamConsumerRequest)">
            <summary>
            Registers a consumer with a Kinesis data stream. When you use this operation, the
            consumer you register can then call <a>SubscribeToShard</a> to receive data from the
            stream using enhanced fan-out, at a rate of up to 2 MiB per second for every shard
            you subscribe to. This rate is unaffected by the total number of consumers that read
            from the same stream.
            
             
            <para>
            You can register up to 20 consumers per stream. A given consumer can only be registered
            with one stream at a time.
            </para>
             
            <para>
            For an example of how to use this operations, see <a href="/streams/latest/dev/building-enhanced-consumers-api.html">Enhanced
            Fan-Out Using the Kinesis Data Streams API</a>.
            </para>
             
            <para>
            The use of this operation has a limit of five transactions per second per account.
            Also, only 5 consumers can be created simultaneously. In other words, you cannot have
            more than 5 consumers in a <code>CREATING</code> status at the same time. Registering
            a 6th consumer while there are 5 in a <code>CREATING</code> status results in a <code>LimitExceededException</code>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the RegisterStreamConsumer service method.</param>
            
            <returns>The response from the RegisterStreamConsumer service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/RegisterStreamConsumer">REST API Reference for RegisterStreamConsumer Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.RegisterStreamConsumerAsync(Amazon.Kinesis.Model.RegisterStreamConsumerRequest,System.Threading.CancellationToken)">
            <summary>
            Registers a consumer with a Kinesis data stream. When you use this operation, the
            consumer you register can then call <a>SubscribeToShard</a> to receive data from the
            stream using enhanced fan-out, at a rate of up to 2 MiB per second for every shard
            you subscribe to. This rate is unaffected by the total number of consumers that read
            from the same stream.
            
             
            <para>
            You can register up to 20 consumers per stream. A given consumer can only be registered
            with one stream at a time.
            </para>
             
            <para>
            For an example of how to use this operations, see <a href="/streams/latest/dev/building-enhanced-consumers-api.html">Enhanced
            Fan-Out Using the Kinesis Data Streams API</a>.
            </para>
             
            <para>
            The use of this operation has a limit of five transactions per second per account.
            Also, only 5 consumers can be created simultaneously. In other words, you cannot have
            more than 5 consumers in a <code>CREATING</code> status at the same time. Registering
            a 6th consumer while there are 5 in a <code>CREATING</code> status results in a <code>LimitExceededException</code>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the RegisterStreamConsumer service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the RegisterStreamConsumer service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/RegisterStreamConsumer">REST API Reference for RegisterStreamConsumer Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.RemoveTagsFromStream(Amazon.Kinesis.Model.RemoveTagsFromStreamRequest)">
            <summary>
            Removes tags from the specified Kinesis data stream. Removed tags are deleted and
            cannot be recovered after this operation successfully completes.
            
             
            <para>
            If you specify a tag that does not exist, it is ignored.
            </para>
             
            <para>
             <a>RemoveTagsFromStream</a> has a limit of five transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the RemoveTagsFromStream service method.</param>
            
            <returns>The response from the RemoveTagsFromStream service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/RemoveTagsFromStream">REST API Reference for RemoveTagsFromStream Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.RemoveTagsFromStreamAsync(Amazon.Kinesis.Model.RemoveTagsFromStreamRequest,System.Threading.CancellationToken)">
            <summary>
            Removes tags from the specified Kinesis data stream. Removed tags are deleted and
            cannot be recovered after this operation successfully completes.
            
             
            <para>
            If you specify a tag that does not exist, it is ignored.
            </para>
             
            <para>
             <a>RemoveTagsFromStream</a> has a limit of five transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the RemoveTagsFromStream service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the RemoveTagsFromStream service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/RemoveTagsFromStream">REST API Reference for RemoveTagsFromStream Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.SplitShard(Amazon.Kinesis.Model.SplitShardRequest)">
            <summary>
            Splits a shard into two new shards in the Kinesis data stream, to increase the stream's
            capacity to ingest and transport data. <code>SplitShard</code> is called when there
            is a need to increase the overall capacity of a stream because of an expected increase
            in the volume of data records being ingested. 
            
             
            <para>
            You can also use <code>SplitShard</code> when a shard appears to be approaching its
            maximum utilization; for example, the producers sending data into the specific shard
            are suddenly sending more than previously anticipated. You can also call <code>SplitShard</code>
            to increase stream capacity, so that more Kinesis Data Streams applications can simultaneously
            read data from the stream for real-time processing. 
            </para>
             
            <para>
            You must specify the shard to be split and the new hash key, which is the position
            in the shard where the shard gets split in two. In many cases, the new hash key might
            be the average of the beginning and ending hash key, but it can be any hash key value
            in the range being mapped into the shard. For more information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-resharding-split.html">Split
            a Shard</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             
            <para>
            You can use <a>DescribeStream</a> to determine the shard ID and hash key values for
            the <code>ShardToSplit</code> and <code>NewStartingHashKey</code> parameters that
            are specified in the <code>SplitShard</code> request.
            </para>
             
            <para>
             <code>SplitShard</code> is an asynchronous operation. Upon receiving a <code>SplitShard</code>
            request, Kinesis Data Streams immediately returns a response and sets the stream status
            to <code>UPDATING</code>. After the operation is completed, Kinesis Data Streams sets
            the stream status to <code>ACTIVE</code>. Read and write operations continue to work
            while the stream is in the <code>UPDATING</code> state. 
            </para>
             
            <para>
            You can use <code>DescribeStream</code> to check the status of the stream, which is
            returned in <code>StreamStatus</code>. If the stream is in the <code>ACTIVE</code>
            state, you can call <code>SplitShard</code>. If a stream is in <code>CREATING</code>
            or <code>UPDATING</code> or <code>DELETING</code> states, <code>DescribeStream</code>
            returns a <code>ResourceInUseException</code>.
            </para>
             
            <para>
            If the specified stream does not exist, <code>DescribeStream</code> returns a <code>ResourceNotFoundException</code>.
            If you try to create more shards than are authorized for your account, you receive
            a <code>LimitExceededException</code>. 
            </para>
             
            <para>
            For the default shard limit for an AWS account, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Kinesis
            Data Streams Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            To increase this limit, <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html">contact
            AWS Support</a>.
            </para>
             
            <para>
            If you try to operate on too many streams simultaneously using <a>CreateStream</a>,
            <a>DeleteStream</a>, <a>MergeShards</a>, and/or <a>SplitShard</a>, you receive a <code>LimitExceededException</code>.
            
            </para>
             
            <para>
             <code>SplitShard</code> has a limit of five transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the SplitShard service method.</param>
            
            <returns>The response from the SplitShard service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/SplitShard">REST API Reference for SplitShard Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.SplitShardAsync(Amazon.Kinesis.Model.SplitShardRequest,System.Threading.CancellationToken)">
            <summary>
            Splits a shard into two new shards in the Kinesis data stream, to increase the stream's
            capacity to ingest and transport data. <code>SplitShard</code> is called when there
            is a need to increase the overall capacity of a stream because of an expected increase
            in the volume of data records being ingested. 
            
             
            <para>
            You can also use <code>SplitShard</code> when a shard appears to be approaching its
            maximum utilization; for example, the producers sending data into the specific shard
            are suddenly sending more than previously anticipated. You can also call <code>SplitShard</code>
            to increase stream capacity, so that more Kinesis Data Streams applications can simultaneously
            read data from the stream for real-time processing. 
            </para>
             
            <para>
            You must specify the shard to be split and the new hash key, which is the position
            in the shard where the shard gets split in two. In many cases, the new hash key might
            be the average of the beginning and ending hash key, but it can be any hash key value
            in the range being mapped into the shard. For more information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-resharding-split.html">Split
            a Shard</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             
            <para>
            You can use <a>DescribeStream</a> to determine the shard ID and hash key values for
            the <code>ShardToSplit</code> and <code>NewStartingHashKey</code> parameters that
            are specified in the <code>SplitShard</code> request.
            </para>
             
            <para>
             <code>SplitShard</code> is an asynchronous operation. Upon receiving a <code>SplitShard</code>
            request, Kinesis Data Streams immediately returns a response and sets the stream status
            to <code>UPDATING</code>. After the operation is completed, Kinesis Data Streams sets
            the stream status to <code>ACTIVE</code>. Read and write operations continue to work
            while the stream is in the <code>UPDATING</code> state. 
            </para>
             
            <para>
            You can use <code>DescribeStream</code> to check the status of the stream, which is
            returned in <code>StreamStatus</code>. If the stream is in the <code>ACTIVE</code>
            state, you can call <code>SplitShard</code>. If a stream is in <code>CREATING</code>
            or <code>UPDATING</code> or <code>DELETING</code> states, <code>DescribeStream</code>
            returns a <code>ResourceInUseException</code>.
            </para>
             
            <para>
            If the specified stream does not exist, <code>DescribeStream</code> returns a <code>ResourceNotFoundException</code>.
            If you try to create more shards than are authorized for your account, you receive
            a <code>LimitExceededException</code>. 
            </para>
             
            <para>
            For the default shard limit for an AWS account, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Kinesis
            Data Streams Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            To increase this limit, <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html">contact
            AWS Support</a>.
            </para>
             
            <para>
            If you try to operate on too many streams simultaneously using <a>CreateStream</a>,
            <a>DeleteStream</a>, <a>MergeShards</a>, and/or <a>SplitShard</a>, you receive a <code>LimitExceededException</code>.
            
            </para>
             
            <para>
             <code>SplitShard</code> has a limit of five transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the SplitShard service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the SplitShard service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/SplitShard">REST API Reference for SplitShard Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.StartStreamEncryption(Amazon.Kinesis.Model.StartStreamEncryptionRequest)">
            <summary>
            Enables or updates server-side encryption using an AWS KMS key for a specified stream.
            
            
             
            <para>
            Starting encryption is an asynchronous operation. Upon receiving the request, Kinesis
            Data Streams returns immediately and sets the status of the stream to <code>UPDATING</code>.
            After the update is complete, Kinesis Data Streams sets the status of the stream back
            to <code>ACTIVE</code>. Updating or applying encryption normally takes a few seconds
            to complete, but it can take minutes. You can continue to read and write data to your
            stream while its status is <code>UPDATING</code>. Once the status of the stream is
            <code>ACTIVE</code>, encryption begins for records written to the stream. 
            </para>
             
            <para>
            API Limits: You can successfully apply a new AWS KMS key for server-side encryption
            25 times in a rolling 24-hour period.
            </para>
             
            <para>
            Note: It can take up to 5 seconds after the stream is in an <code>ACTIVE</code> status
            before all records written to the stream are encrypted. After you enable encryption,
            you can verify that encryption is applied by inspecting the API response from <code>PutRecord</code>
            or <code>PutRecords</code>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the StartStreamEncryption service method.</param>
            
            <returns>The response from the StartStreamEncryption service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSAccessDeniedException">
            The ciphertext references a key that doesn't exist or that you don't have access to.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSDisabledException">
            The request was rejected because the specified customer master key (CMK) isn't enabled.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource isn't valid for
            this request. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">How
            Key State Affects Use of a Customer Master Key</a> in the <i>AWS Key Management Service
            Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSNotFoundException">
            The request was rejected because the specified entity or resource can't be found.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSOptInRequiredException">
            The AWS access key ID needs a subscription for the service.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSThrottlingException">
            The request was denied due to request throttling. For more information about throttling,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html#requests-per-second">Limits</a>
            in the <i>AWS Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/StartStreamEncryption">REST API Reference for StartStreamEncryption Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.StartStreamEncryptionAsync(Amazon.Kinesis.Model.StartStreamEncryptionRequest,System.Threading.CancellationToken)">
            <summary>
            Enables or updates server-side encryption using an AWS KMS key for a specified stream.
            
            
             
            <para>
            Starting encryption is an asynchronous operation. Upon receiving the request, Kinesis
            Data Streams returns immediately and sets the status of the stream to <code>UPDATING</code>.
            After the update is complete, Kinesis Data Streams sets the status of the stream back
            to <code>ACTIVE</code>. Updating or applying encryption normally takes a few seconds
            to complete, but it can take minutes. You can continue to read and write data to your
            stream while its status is <code>UPDATING</code>. Once the status of the stream is
            <code>ACTIVE</code>, encryption begins for records written to the stream. 
            </para>
             
            <para>
            API Limits: You can successfully apply a new AWS KMS key for server-side encryption
            25 times in a rolling 24-hour period.
            </para>
             
            <para>
            Note: It can take up to 5 seconds after the stream is in an <code>ACTIVE</code> status
            before all records written to the stream are encrypted. After you enable encryption,
            you can verify that encryption is applied by inspecting the API response from <code>PutRecord</code>
            or <code>PutRecords</code>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the StartStreamEncryption service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the StartStreamEncryption service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSAccessDeniedException">
            The ciphertext references a key that doesn't exist or that you don't have access to.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSDisabledException">
            The request was rejected because the specified customer master key (CMK) isn't enabled.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource isn't valid for
            this request. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">How
            Key State Affects Use of a Customer Master Key</a> in the <i>AWS Key Management Service
            Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSNotFoundException">
            The request was rejected because the specified entity or resource can't be found.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSOptInRequiredException">
            The AWS access key ID needs a subscription for the service.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSThrottlingException">
            The request was denied due to request throttling. For more information about throttling,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html#requests-per-second">Limits</a>
            in the <i>AWS Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/StartStreamEncryption">REST API Reference for StartStreamEncryption Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.StopStreamEncryption(Amazon.Kinesis.Model.StopStreamEncryptionRequest)">
            <summary>
            Disables server-side encryption for a specified stream. 
            
             
            <para>
            Stopping encryption is an asynchronous operation. Upon receiving the request, Kinesis
            Data Streams returns immediately and sets the status of the stream to <code>UPDATING</code>.
            After the update is complete, Kinesis Data Streams sets the status of the stream back
            to <code>ACTIVE</code>. Stopping encryption normally takes a few seconds to complete,
            but it can take minutes. You can continue to read and write data to your stream while
            its status is <code>UPDATING</code>. Once the status of the stream is <code>ACTIVE</code>,
            records written to the stream are no longer encrypted by Kinesis Data Streams. 
            </para>
             
            <para>
            API Limits: You can successfully disable server-side encryption 25 times in a rolling
            24-hour period. 
            </para>
             
            <para>
            Note: It can take up to 5 seconds after the stream is in an <code>ACTIVE</code> status
            before all records written to the stream are no longer subject to encryption. After
            you disabled encryption, you can verify that encryption is not applied by inspecting
            the API response from <code>PutRecord</code> or <code>PutRecords</code>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the StopStreamEncryption service method.</param>
            
            <returns>The response from the StopStreamEncryption service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/StopStreamEncryption">REST API Reference for StopStreamEncryption Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.StopStreamEncryptionAsync(Amazon.Kinesis.Model.StopStreamEncryptionRequest,System.Threading.CancellationToken)">
            <summary>
            Disables server-side encryption for a specified stream. 
            
             
            <para>
            Stopping encryption is an asynchronous operation. Upon receiving the request, Kinesis
            Data Streams returns immediately and sets the status of the stream to <code>UPDATING</code>.
            After the update is complete, Kinesis Data Streams sets the status of the stream back
            to <code>ACTIVE</code>. Stopping encryption normally takes a few seconds to complete,
            but it can take minutes. You can continue to read and write data to your stream while
            its status is <code>UPDATING</code>. Once the status of the stream is <code>ACTIVE</code>,
            records written to the stream are no longer encrypted by Kinesis Data Streams. 
            </para>
             
            <para>
            API Limits: You can successfully disable server-side encryption 25 times in a rolling
            24-hour period. 
            </para>
             
            <para>
            Note: It can take up to 5 seconds after the stream is in an <code>ACTIVE</code> status
            before all records written to the stream are no longer subject to encryption. After
            you disabled encryption, you can verify that encryption is not applied by inspecting
            the API response from <code>PutRecord</code> or <code>PutRecords</code>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the StopStreamEncryption service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the StopStreamEncryption service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/StopStreamEncryption">REST API Reference for StopStreamEncryption Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.UpdateShardCount(Amazon.Kinesis.Model.UpdateShardCountRequest)">
            <summary>
            Updates the shard count of the specified stream to the specified number of shards.
            
             
            <para>
            Updating the shard count is an asynchronous operation. Upon receiving the request,
            Kinesis Data Streams returns immediately and sets the status of the stream to <code>UPDATING</code>.
            After the update is complete, Kinesis Data Streams sets the status of the stream back
            to <code>ACTIVE</code>. Depending on the size of the stream, the scaling action could
            take a few minutes to complete. You can continue to read and write data to your stream
            while its status is <code>UPDATING</code>.
            </para>
             
            <para>
            To update the shard count, Kinesis Data Streams performs splits or merges on individual
            shards. This can cause short-lived shards to be created, in addition to the final
            shards. These short-lived shards count towards your total shard limit for your account
            in the Region.
            </para>
             
            <para>
            When using this operation, we recommend that you specify a target shard count that
            is a multiple of 25% (25%, 50%, 75%, 100%). You can specify any target value within
            your shard limit. However, if you specify a target that isn't a multiple of 25%, the
            scaling action might take longer to complete. 
            </para>
             
            <para>
            This operation has the following default limits. By default, you cannot do the following:
            </para>
             <ul> <li> 
            <para>
            Scale more than ten times per rolling 24-hour period per stream
            </para>
             </li> <li> 
            <para>
            Scale up to more than double your current shard count for a stream
            </para>
             </li> <li> 
            <para>
            Scale down below half your current shard count for a stream
            </para>
             </li> <li> 
            <para>
            Scale up to more than 500 shards in a stream
            </para>
             </li> <li> 
            <para>
            Scale a stream with more than 500 shards down unless the result is less than 500 shards
            </para>
             </li> <li> 
            <para>
            Scale up to more than the shard limit for your account
            </para>
             </li> </ul> 
            <para>
            For the default limits for an AWS account, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams
            Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>. To request an
            increase in the call rate limit, the shard limit for this API, or your overall shard
            limit, use the <a href="https://console.aws.amazon.com/support/v1#/case/create?issueType=service-limit-increase&amp;limitType=service-code-kinesis">limits
            form</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the UpdateShardCount service method.</param>
            
            <returns>The response from the UpdateShardCount service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/UpdateShardCount">REST API Reference for UpdateShardCount Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.AmazonKinesisClient.UpdateShardCountAsync(Amazon.Kinesis.Model.UpdateShardCountRequest,System.Threading.CancellationToken)">
            <summary>
            Updates the shard count of the specified stream to the specified number of shards.
            
             
            <para>
            Updating the shard count is an asynchronous operation. Upon receiving the request,
            Kinesis Data Streams returns immediately and sets the status of the stream to <code>UPDATING</code>.
            After the update is complete, Kinesis Data Streams sets the status of the stream back
            to <code>ACTIVE</code>. Depending on the size of the stream, the scaling action could
            take a few minutes to complete. You can continue to read and write data to your stream
            while its status is <code>UPDATING</code>.
            </para>
             
            <para>
            To update the shard count, Kinesis Data Streams performs splits or merges on individual
            shards. This can cause short-lived shards to be created, in addition to the final
            shards. These short-lived shards count towards your total shard limit for your account
            in the Region.
            </para>
             
            <para>
            When using this operation, we recommend that you specify a target shard count that
            is a multiple of 25% (25%, 50%, 75%, 100%). You can specify any target value within
            your shard limit. However, if you specify a target that isn't a multiple of 25%, the
            scaling action might take longer to complete. 
            </para>
             
            <para>
            This operation has the following default limits. By default, you cannot do the following:
            </para>
             <ul> <li> 
            <para>
            Scale more than ten times per rolling 24-hour period per stream
            </para>
             </li> <li> 
            <para>
            Scale up to more than double your current shard count for a stream
            </para>
             </li> <li> 
            <para>
            Scale down below half your current shard count for a stream
            </para>
             </li> <li> 
            <para>
            Scale up to more than 500 shards in a stream
            </para>
             </li> <li> 
            <para>
            Scale a stream with more than 500 shards down unless the result is less than 500 shards
            </para>
             </li> <li> 
            <para>
            Scale up to more than the shard limit for your account
            </para>
             </li> </ul> 
            <para>
            For the default limits for an AWS account, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams
            Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>. To request an
            increase in the call rate limit, the shard limit for this API, or your overall shard
            limit, use the <a href="https://console.aws.amazon.com/support/v1#/case/create?issueType=service-limit-increase&amp;limitType=service-code-kinesis">limits
            form</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the UpdateShardCount service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the UpdateShardCount service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/UpdateShardCount">REST API Reference for UpdateShardCount Operation</seealso>
        </member>
        <member name="T:Amazon.Kinesis.IAmazonKinesis">
             <summary>
             Interface for accessing Kinesis
            
             Amazon Kinesis Data Streams Service API Reference 
             <para>
             Amazon Kinesis Data Streams is a managed service that scales elastically for real-time
             processing of streaming big data.
             </para>
             </summary>
        </member>
        <member name="P:Amazon.Kinesis.IAmazonKinesis.Paginators">
            <summary>
            Paginators for the service
            </summary>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.AddTagsToStream(Amazon.Kinesis.Model.AddTagsToStreamRequest)">
            <summary>
            Adds or updates tags for the specified Kinesis data stream. Each time you invoke this
            operation, you can specify up to 10 tags. If you want to add more than 10 tags to
            your stream, you can invoke this operation multiple times. In total, each stream can
            have up to 50 tags.
            
             
            <para>
            If tags have already been assigned to the stream, <code>AddTagsToStream</code> overwrites
            any existing tags that correspond to the specified tag keys.
            </para>
             
            <para>
             <a>AddTagsToStream</a> has a limit of five transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the AddTagsToStream service method.</param>
            
            <returns>The response from the AddTagsToStream service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/AddTagsToStream">REST API Reference for AddTagsToStream Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.AddTagsToStreamAsync(Amazon.Kinesis.Model.AddTagsToStreamRequest,System.Threading.CancellationToken)">
            <summary>
            Adds or updates tags for the specified Kinesis data stream. Each time you invoke this
            operation, you can specify up to 10 tags. If you want to add more than 10 tags to
            your stream, you can invoke this operation multiple times. In total, each stream can
            have up to 50 tags.
            
             
            <para>
            If tags have already been assigned to the stream, <code>AddTagsToStream</code> overwrites
            any existing tags that correspond to the specified tag keys.
            </para>
             
            <para>
             <a>AddTagsToStream</a> has a limit of five transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the AddTagsToStream service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the AddTagsToStream service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/AddTagsToStream">REST API Reference for AddTagsToStream Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.CreateStream(Amazon.Kinesis.Model.CreateStreamRequest)">
            <summary>
            Creates a Kinesis data stream. A stream captures and transports data records that
            are continuously emitted from different data sources or <i>producers</i>. Scale-out
            within a stream is explicitly supported by means of shards, which are uniquely identified
            groups of data records in a stream.
            
             
            <para>
            You specify and control the number of shards that a stream is composed of. Each shard
            can support reads up to five transactions per second, up to a maximum data read total
            of 2 MiB per second. Each shard can support writes up to 1,000 records per second,
            up to a maximum data write total of 1 MiB per second. If the amount of data input
            increases or decreases, you can add or remove shards.
            </para>
             
            <para>
            The stream name identifies the stream. The name is scoped to the AWS account used
            by the application. It is also scoped by AWS Region. That is, two streams in two different
            accounts can have the same name, and two streams in the same account, but in two different
            Regions, can have the same name.
            </para>
             
            <para>
             <code>CreateStream</code> is an asynchronous operation. Upon receiving a <code>CreateStream</code>
            request, Kinesis Data Streams immediately returns and sets the stream status to <code>CREATING</code>.
            After the stream is created, Kinesis Data Streams sets the stream status to <code>ACTIVE</code>.
            You should perform read and write operations only on an <code>ACTIVE</code> stream.
            
            </para>
             
            <para>
            You receive a <code>LimitExceededException</code> when making a <code>CreateStream</code>
            request when you try to do one of the following:
            </para>
             <ul> <li> 
            <para>
            Have more than five streams in the <code>CREATING</code> state at any point in time.
            </para>
             </li> <li> 
            <para>
            Create more shards than are authorized for your account.
            </para>
             </li> </ul> 
            <para>
            For the default shard limit for an AWS account, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Amazon
            Kinesis Data Streams Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            To increase this limit, <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html">contact
            AWS Support</a>.
            </para>
             
            <para>
            You can use <code>DescribeStream</code> to check the stream status, which is returned
            in <code>StreamStatus</code>.
            </para>
             
            <para>
             <a>CreateStream</a> has a limit of five transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CreateStream service method.</param>
            
            <returns>The response from the CreateStream service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/CreateStream">REST API Reference for CreateStream Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.CreateStreamAsync(Amazon.Kinesis.Model.CreateStreamRequest,System.Threading.CancellationToken)">
            <summary>
            Creates a Kinesis data stream. A stream captures and transports data records that
            are continuously emitted from different data sources or <i>producers</i>. Scale-out
            within a stream is explicitly supported by means of shards, which are uniquely identified
            groups of data records in a stream.
            
             
            <para>
            You specify and control the number of shards that a stream is composed of. Each shard
            can support reads up to five transactions per second, up to a maximum data read total
            of 2 MiB per second. Each shard can support writes up to 1,000 records per second,
            up to a maximum data write total of 1 MiB per second. If the amount of data input
            increases or decreases, you can add or remove shards.
            </para>
             
            <para>
            The stream name identifies the stream. The name is scoped to the AWS account used
            by the application. It is also scoped by AWS Region. That is, two streams in two different
            accounts can have the same name, and two streams in the same account, but in two different
            Regions, can have the same name.
            </para>
             
            <para>
             <code>CreateStream</code> is an asynchronous operation. Upon receiving a <code>CreateStream</code>
            request, Kinesis Data Streams immediately returns and sets the stream status to <code>CREATING</code>.
            After the stream is created, Kinesis Data Streams sets the stream status to <code>ACTIVE</code>.
            You should perform read and write operations only on an <code>ACTIVE</code> stream.
            
            </para>
             
            <para>
            You receive a <code>LimitExceededException</code> when making a <code>CreateStream</code>
            request when you try to do one of the following:
            </para>
             <ul> <li> 
            <para>
            Have more than five streams in the <code>CREATING</code> state at any point in time.
            </para>
             </li> <li> 
            <para>
            Create more shards than are authorized for your account.
            </para>
             </li> </ul> 
            <para>
            For the default shard limit for an AWS account, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Amazon
            Kinesis Data Streams Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            To increase this limit, <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html">contact
            AWS Support</a>.
            </para>
             
            <para>
            You can use <code>DescribeStream</code> to check the stream status, which is returned
            in <code>StreamStatus</code>.
            </para>
             
            <para>
             <a>CreateStream</a> has a limit of five transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CreateStream service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the CreateStream service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/CreateStream">REST API Reference for CreateStream Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.DecreaseStreamRetentionPeriod(System.String,System.Int32)">
            <summary>
            Decreases the Kinesis data stream's retention period, which is the length of time
            data records are accessible after they are added to the stream. The minimum value
            of a stream's retention period is 24 hours.
            
             
            <para>
            This operation may result in lost data. For example, if the stream's retention period
            is 48 hours and is decreased to 24 hours, any data already in the stream that is older
            than 24 hours is inaccessible.
            </para>
            </summary>
            <param name="streamName">The name of the stream to modify.</param>
            <param name="retentionPeriodHours">The new retention period of the stream, in hours. Must be less than the current retention period.</param>
            
            <returns>The response from the DecreaseStreamRetentionPeriod service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DecreaseStreamRetentionPeriod">REST API Reference for DecreaseStreamRetentionPeriod Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.DecreaseStreamRetentionPeriod(Amazon.Kinesis.Model.DecreaseStreamRetentionPeriodRequest)">
            <summary>
            Decreases the Kinesis data stream's retention period, which is the length of time
            data records are accessible after they are added to the stream. The minimum value
            of a stream's retention period is 24 hours.
            
             
            <para>
            This operation may result in lost data. For example, if the stream's retention period
            is 48 hours and is decreased to 24 hours, any data already in the stream that is older
            than 24 hours is inaccessible.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DecreaseStreamRetentionPeriod service method.</param>
            
            <returns>The response from the DecreaseStreamRetentionPeriod service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DecreaseStreamRetentionPeriod">REST API Reference for DecreaseStreamRetentionPeriod Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.DecreaseStreamRetentionPeriodAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Decreases the Kinesis data stream's retention period, which is the length of time
            data records are accessible after they are added to the stream. The minimum value
            of a stream's retention period is 24 hours.
            
             
            <para>
            This operation may result in lost data. For example, if the stream's retention period
            is 48 hours and is decreased to 24 hours, any data already in the stream that is older
            than 24 hours is inaccessible.
            </para>
            </summary>
            <param name="streamName">The name of the stream to modify.</param>
            <param name="retentionPeriodHours">The new retention period of the stream, in hours. Must be less than the current retention period.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DecreaseStreamRetentionPeriod service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DecreaseStreamRetentionPeriod">REST API Reference for DecreaseStreamRetentionPeriod Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.DecreaseStreamRetentionPeriodAsync(Amazon.Kinesis.Model.DecreaseStreamRetentionPeriodRequest,System.Threading.CancellationToken)">
            <summary>
            Decreases the Kinesis data stream's retention period, which is the length of time
            data records are accessible after they are added to the stream. The minimum value
            of a stream's retention period is 24 hours.
            
             
            <para>
            This operation may result in lost data. For example, if the stream's retention period
            is 48 hours and is decreased to 24 hours, any data already in the stream that is older
            than 24 hours is inaccessible.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DecreaseStreamRetentionPeriod service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DecreaseStreamRetentionPeriod service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DecreaseStreamRetentionPeriod">REST API Reference for DecreaseStreamRetentionPeriod Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.DeleteStream(Amazon.Kinesis.Model.DeleteStreamRequest)">
            <summary>
            Deletes a Kinesis data stream and all its shards and data. You must shut down any
            applications that are operating on the stream before you delete the stream. If an
            application attempts to operate on a deleted stream, it receives the exception <code>ResourceNotFoundException</code>.
            
             
            <para>
            If the stream is in the <code>ACTIVE</code> state, you can delete it. After a <code>DeleteStream</code>
            request, the specified stream is in the <code>DELETING</code> state until Kinesis
            Data Streams completes the deletion.
            </para>
             
            <para>
             <b>Note:</b> Kinesis Data Streams might continue to accept data read and write operations,
            such as <a>PutRecord</a>, <a>PutRecords</a>, and <a>GetRecords</a>, on a stream in
            the <code>DELETING</code> state until the stream deletion is complete.
            </para>
             
            <para>
            When you delete a stream, any shards in that stream are also deleted, and any tags
            are dissociated from the stream.
            </para>
             
            <para>
            You can use the <a>DescribeStream</a> operation to check the state of the stream,
            which is returned in <code>StreamStatus</code>.
            </para>
             
            <para>
             <a>DeleteStream</a> has a limit of five transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteStream service method.</param>
            
            <returns>The response from the DeleteStream service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DeleteStream">REST API Reference for DeleteStream Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.DeleteStreamAsync(Amazon.Kinesis.Model.DeleteStreamRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes a Kinesis data stream and all its shards and data. You must shut down any
            applications that are operating on the stream before you delete the stream. If an
            application attempts to operate on a deleted stream, it receives the exception <code>ResourceNotFoundException</code>.
            
             
            <para>
            If the stream is in the <code>ACTIVE</code> state, you can delete it. After a <code>DeleteStream</code>
            request, the specified stream is in the <code>DELETING</code> state until Kinesis
            Data Streams completes the deletion.
            </para>
             
            <para>
             <b>Note:</b> Kinesis Data Streams might continue to accept data read and write operations,
            such as <a>PutRecord</a>, <a>PutRecords</a>, and <a>GetRecords</a>, on a stream in
            the <code>DELETING</code> state until the stream deletion is complete.
            </para>
             
            <para>
            When you delete a stream, any shards in that stream are also deleted, and any tags
            are dissociated from the stream.
            </para>
             
            <para>
            You can use the <a>DescribeStream</a> operation to check the state of the stream,
            which is returned in <code>StreamStatus</code>.
            </para>
             
            <para>
             <a>DeleteStream</a> has a limit of five transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteStream service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeleteStream service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DeleteStream">REST API Reference for DeleteStream Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.DeregisterStreamConsumer(Amazon.Kinesis.Model.DeregisterStreamConsumerRequest)">
            <summary>
            To deregister a consumer, provide its ARN. Alternatively, you can provide the ARN
            of the data stream and the name you gave the consumer when you registered it. You
            may also provide all three parameters, as long as they don't conflict with each other.
            If you don't know the name or ARN of the consumer that you want to deregister, you
            can use the <a>ListStreamConsumers</a> operation to get a list of the descriptions
            of all the consumers that are currently registered with a given data stream. The description
            of a consumer contains its name and ARN.
            
             
            <para>
            This operation has a limit of five transactions per second per stream.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeregisterStreamConsumer service method.</param>
            
            <returns>The response from the DeregisterStreamConsumer service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DeregisterStreamConsumer">REST API Reference for DeregisterStreamConsumer Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.DeregisterStreamConsumerAsync(Amazon.Kinesis.Model.DeregisterStreamConsumerRequest,System.Threading.CancellationToken)">
            <summary>
            To deregister a consumer, provide its ARN. Alternatively, you can provide the ARN
            of the data stream and the name you gave the consumer when you registered it. You
            may also provide all three parameters, as long as they don't conflict with each other.
            If you don't know the name or ARN of the consumer that you want to deregister, you
            can use the <a>ListStreamConsumers</a> operation to get a list of the descriptions
            of all the consumers that are currently registered with a given data stream. The description
            of a consumer contains its name and ARN.
            
             
            <para>
            This operation has a limit of five transactions per second per stream.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeregisterStreamConsumer service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeregisterStreamConsumer service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DeregisterStreamConsumer">REST API Reference for DeregisterStreamConsumer Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.DescribeLimits(Amazon.Kinesis.Model.DescribeLimitsRequest)">
            <summary>
            Describes the shard limits and usage for the account.
            
             
            <para>
            If you update your account limits, the old limits might be returned for a few minutes.
            </para>
             
            <para>
            This operation has a limit of one transaction per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeLimits service method.</param>
            
            <returns>The response from the DescribeLimits service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DescribeLimits">REST API Reference for DescribeLimits Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.DescribeLimitsAsync(Amazon.Kinesis.Model.DescribeLimitsRequest,System.Threading.CancellationToken)">
            <summary>
            Describes the shard limits and usage for the account.
            
             
            <para>
            If you update your account limits, the old limits might be returned for a few minutes.
            </para>
             
            <para>
            This operation has a limit of one transaction per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeLimits service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeLimits service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DescribeLimits">REST API Reference for DescribeLimits Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.DescribeStream(Amazon.Kinesis.Model.DescribeStreamRequest)">
            <summary>
            Describes the specified Kinesis data stream.
            
             
            <para>
            The information returned includes the stream name, Amazon Resource Name (ARN), creation
            time, enhanced metric configuration, and shard map. The shard map is an array of shard
            objects. For each shard object, there is the hash key and sequence number ranges that
            the shard spans, and the IDs of any earlier shards that played in a role in creating
            the shard. Every record ingested in the stream is identified by a sequence number,
            which is assigned when the record is put into the stream.
            </para>
             
            <para>
            You can limit the number of shards returned by each call. For more information, see
            <a href="https://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-retrieve-shards.html">Retrieving
            Shards from a Stream</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             
            <para>
            There are no guarantees about the chronological order shards returned. To process
            shards in chronological order, use the ID of the parent shard to track the lineage
            to the oldest shard.
            </para>
             
            <para>
            This operation has a limit of 10 transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeStream service method.</param>
            
            <returns>The response from the DescribeStream service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DescribeStream">REST API Reference for DescribeStream Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.DescribeStreamAsync(Amazon.Kinesis.Model.DescribeStreamRequest,System.Threading.CancellationToken)">
            <summary>
            Describes the specified Kinesis data stream.
            
             
            <para>
            The information returned includes the stream name, Amazon Resource Name (ARN), creation
            time, enhanced metric configuration, and shard map. The shard map is an array of shard
            objects. For each shard object, there is the hash key and sequence number ranges that
            the shard spans, and the IDs of any earlier shards that played in a role in creating
            the shard. Every record ingested in the stream is identified by a sequence number,
            which is assigned when the record is put into the stream.
            </para>
             
            <para>
            You can limit the number of shards returned by each call. For more information, see
            <a href="https://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-retrieve-shards.html">Retrieving
            Shards from a Stream</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             
            <para>
            There are no guarantees about the chronological order shards returned. To process
            shards in chronological order, use the ID of the parent shard to track the lineage
            to the oldest shard.
            </para>
             
            <para>
            This operation has a limit of 10 transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeStream service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeStream service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DescribeStream">REST API Reference for DescribeStream Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.DescribeStreamConsumer(Amazon.Kinesis.Model.DescribeStreamConsumerRequest)">
            <summary>
            To get the description of a registered consumer, provide the ARN of the consumer.
            Alternatively, you can provide the ARN of the data stream and the name you gave the
            consumer when you registered it. You may also provide all three parameters, as long
            as they don't conflict with each other. If you don't know the name or ARN of the consumer
            that you want to describe, you can use the <a>ListStreamConsumers</a> operation to
            get a list of the descriptions of all the consumers that are currently registered
            with a given data stream.
            
             
            <para>
            This operation has a limit of 20 transactions per second per stream.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeStreamConsumer service method.</param>
            
            <returns>The response from the DescribeStreamConsumer service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DescribeStreamConsumer">REST API Reference for DescribeStreamConsumer Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.DescribeStreamConsumerAsync(Amazon.Kinesis.Model.DescribeStreamConsumerRequest,System.Threading.CancellationToken)">
            <summary>
            To get the description of a registered consumer, provide the ARN of the consumer.
            Alternatively, you can provide the ARN of the data stream and the name you gave the
            consumer when you registered it. You may also provide all three parameters, as long
            as they don't conflict with each other. If you don't know the name or ARN of the consumer
            that you want to describe, you can use the <a>ListStreamConsumers</a> operation to
            get a list of the descriptions of all the consumers that are currently registered
            with a given data stream.
            
             
            <para>
            This operation has a limit of 20 transactions per second per stream.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeStreamConsumer service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeStreamConsumer service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DescribeStreamConsumer">REST API Reference for DescribeStreamConsumer Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.DescribeStreamSummary(Amazon.Kinesis.Model.DescribeStreamSummaryRequest)">
            <summary>
            Provides a summarized description of the specified Kinesis data stream without the
            shard list.
            
             
            <para>
            The information returned includes the stream name, Amazon Resource Name (ARN), status,
            record retention period, approximate creation time, monitoring, encryption details,
            and open shard count. 
            </para>
             
            <para>
             <a>DescribeStreamSummary</a> has a limit of 20 transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeStreamSummary service method.</param>
            
            <returns>The response from the DescribeStreamSummary service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DescribeStreamSummary">REST API Reference for DescribeStreamSummary Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.DescribeStreamSummaryAsync(Amazon.Kinesis.Model.DescribeStreamSummaryRequest,System.Threading.CancellationToken)">
            <summary>
            Provides a summarized description of the specified Kinesis data stream without the
            shard list.
            
             
            <para>
            The information returned includes the stream name, Amazon Resource Name (ARN), status,
            record retention period, approximate creation time, monitoring, encryption details,
            and open shard count. 
            </para>
             
            <para>
             <a>DescribeStreamSummary</a> has a limit of 20 transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeStreamSummary service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeStreamSummary service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DescribeStreamSummary">REST API Reference for DescribeStreamSummary Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.DisableEnhancedMonitoring(Amazon.Kinesis.Model.DisableEnhancedMonitoringRequest)">
            <summary>
            Disables enhanced monitoring.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DisableEnhancedMonitoring service method.</param>
            
            <returns>The response from the DisableEnhancedMonitoring service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DisableEnhancedMonitoring">REST API Reference for DisableEnhancedMonitoring Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.DisableEnhancedMonitoringAsync(Amazon.Kinesis.Model.DisableEnhancedMonitoringRequest,System.Threading.CancellationToken)">
            <summary>
            Disables enhanced monitoring.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DisableEnhancedMonitoring service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DisableEnhancedMonitoring service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/DisableEnhancedMonitoring">REST API Reference for DisableEnhancedMonitoring Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.EnableEnhancedMonitoring(Amazon.Kinesis.Model.EnableEnhancedMonitoringRequest)">
            <summary>
            Enables enhanced Kinesis data stream monitoring for shard-level metrics.
            </summary>
            <param name="request">Container for the necessary parameters to execute the EnableEnhancedMonitoring service method.</param>
            
            <returns>The response from the EnableEnhancedMonitoring service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/EnableEnhancedMonitoring">REST API Reference for EnableEnhancedMonitoring Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.EnableEnhancedMonitoringAsync(Amazon.Kinesis.Model.EnableEnhancedMonitoringRequest,System.Threading.CancellationToken)">
            <summary>
            Enables enhanced Kinesis data stream monitoring for shard-level metrics.
            </summary>
            <param name="request">Container for the necessary parameters to execute the EnableEnhancedMonitoring service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the EnableEnhancedMonitoring service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/EnableEnhancedMonitoring">REST API Reference for EnableEnhancedMonitoring Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.GetRecords(Amazon.Kinesis.Model.GetRecordsRequest)">
            <summary>
            Gets data records from a Kinesis data stream's shard.
            
             
            <para>
            Specify a shard iterator using the <code>ShardIterator</code> parameter. The shard
            iterator specifies the position in the shard from which you want to start reading
            data records sequentially. If there are no records available in the portion of the
            shard that the iterator points to, <a>GetRecords</a> returns an empty list. It might
            take multiple calls to get to a portion of the shard that contains records.
            </para>
             
            <para>
            You can scale by provisioning multiple shards per stream while considering service
            limits (for more information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Amazon
            Kinesis Data Streams Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>).
            Your application should have one thread per shard, each reading continuously from
            its stream. To read from a stream continually, call <a>GetRecords</a> in a loop. Use
            <a>GetShardIterator</a> to get the shard iterator to specify in the first <a>GetRecords</a>
            call. <a>GetRecords</a> returns a new shard iterator in <code>NextShardIterator</code>.
            Specify the shard iterator returned in <code>NextShardIterator</code> in subsequent
            calls to <a>GetRecords</a>. If the shard has been closed, the shard iterator can't
            return more data and <a>GetRecords</a> returns <code>null</code> in <code>NextShardIterator</code>.
            You can terminate the loop when the shard is closed, or when the shard iterator reaches
            the record with the sequence number or other attribute that marks it as the last record
            to process.
            </para>
             
            <para>
            Each data record can be up to 1 MiB in size, and each shard can read up to 2 MiB per
            second. You can ensure that your calls don't exceed the maximum supported size or
            throughput by using the <code>Limit</code> parameter to specify the maximum number
            of records that <a>GetRecords</a> can return. Consider your average record size when
            determining this limit. The maximum number of records that can be returned per call
            is 10,000.
            </para>
             
            <para>
            The size of the data returned by <a>GetRecords</a> varies depending on the utilization
            of the shard. The maximum size of data that <a>GetRecords</a> can return is 10 MiB.
            If a call returns this amount of data, subsequent calls made within the next 5 seconds
            throw <code>ProvisionedThroughputExceededException</code>. If there is insufficient
            provisioned throughput on the stream, subsequent calls made within the next 1 second
            throw <code>ProvisionedThroughputExceededException</code>. <a>GetRecords</a> doesn't
            return any data when it throws an exception. For this reason, we recommend that you
            wait 1 second between calls to <a>GetRecords</a>. However, it's possible that the
            application will get exceptions for longer than 1 second.
            </para>
             
            <para>
            To detect whether the application is falling behind in processing, you can use the
            <code>MillisBehindLatest</code> response attribute. You can also monitor the stream
            using CloudWatch metrics and other mechanisms (see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/monitoring.html">Monitoring</a>
            in the <i>Amazon Kinesis Data Streams Developer Guide</i>).
            </para>
             
            <para>
            Each Amazon Kinesis record includes a value, <code>ApproximateArrivalTimestamp</code>,
            that is set when a stream successfully receives and stores a record. This is commonly
            referred to as a server-side time stamp, whereas a client-side time stamp is set when
            a data producer creates or sends the record to a stream (a data producer is any data
            source putting data records into a stream, for example with <a>PutRecords</a>). The
            time stamp has millisecond precision. There are no guarantees about the time stamp
            accuracy, or that the time stamp is always increasing. For example, records in a shard
            or across a stream might have time stamps that are out of order.
            </para>
             
            <para>
            This operation has a limit of five transactions per second per shard.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetRecords service method.</param>
            
            <returns>The response from the GetRecords service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.ExpiredIteratorException">
            The provided iterator exceeds the maximum age allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSAccessDeniedException">
            The ciphertext references a key that doesn't exist or that you don't have access to.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSDisabledException">
            The request was rejected because the specified customer master key (CMK) isn't enabled.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource isn't valid for
            this request. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">How
            Key State Affects Use of a Customer Master Key</a> in the <i>AWS Key Management Service
            Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSNotFoundException">
            The request was rejected because the specified entity or resource can't be found.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSOptInRequiredException">
            The AWS access key ID needs a subscription for the service.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSThrottlingException">
            The request was denied due to request throttling. For more information about throttling,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html#requests-per-second">Limits</a>
            in the <i>AWS Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ProvisionedThroughputExceededException">
            The request rate for the stream is too high, or the requested data is too large for
            the available throughput. Reduce the frequency or size of your requests. For more
            information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams
            Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>, and <a href="https://docs.aws.amazon.com/general/latest/gr/api-retries.html">Error
            Retries and Exponential Backoff in AWS</a> in the <i>AWS General Reference</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/GetRecords">REST API Reference for GetRecords Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.GetRecordsAsync(Amazon.Kinesis.Model.GetRecordsRequest,System.Threading.CancellationToken)">
            <summary>
            Gets data records from a Kinesis data stream's shard.
            
             
            <para>
            Specify a shard iterator using the <code>ShardIterator</code> parameter. The shard
            iterator specifies the position in the shard from which you want to start reading
            data records sequentially. If there are no records available in the portion of the
            shard that the iterator points to, <a>GetRecords</a> returns an empty list. It might
            take multiple calls to get to a portion of the shard that contains records.
            </para>
             
            <para>
            You can scale by provisioning multiple shards per stream while considering service
            limits (for more information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Amazon
            Kinesis Data Streams Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>).
            Your application should have one thread per shard, each reading continuously from
            its stream. To read from a stream continually, call <a>GetRecords</a> in a loop. Use
            <a>GetShardIterator</a> to get the shard iterator to specify in the first <a>GetRecords</a>
            call. <a>GetRecords</a> returns a new shard iterator in <code>NextShardIterator</code>.
            Specify the shard iterator returned in <code>NextShardIterator</code> in subsequent
            calls to <a>GetRecords</a>. If the shard has been closed, the shard iterator can't
            return more data and <a>GetRecords</a> returns <code>null</code> in <code>NextShardIterator</code>.
            You can terminate the loop when the shard is closed, or when the shard iterator reaches
            the record with the sequence number or other attribute that marks it as the last record
            to process.
            </para>
             
            <para>
            Each data record can be up to 1 MiB in size, and each shard can read up to 2 MiB per
            second. You can ensure that your calls don't exceed the maximum supported size or
            throughput by using the <code>Limit</code> parameter to specify the maximum number
            of records that <a>GetRecords</a> can return. Consider your average record size when
            determining this limit. The maximum number of records that can be returned per call
            is 10,000.
            </para>
             
            <para>
            The size of the data returned by <a>GetRecords</a> varies depending on the utilization
            of the shard. The maximum size of data that <a>GetRecords</a> can return is 10 MiB.
            If a call returns this amount of data, subsequent calls made within the next 5 seconds
            throw <code>ProvisionedThroughputExceededException</code>. If there is insufficient
            provisioned throughput on the stream, subsequent calls made within the next 1 second
            throw <code>ProvisionedThroughputExceededException</code>. <a>GetRecords</a> doesn't
            return any data when it throws an exception. For this reason, we recommend that you
            wait 1 second between calls to <a>GetRecords</a>. However, it's possible that the
            application will get exceptions for longer than 1 second.
            </para>
             
            <para>
            To detect whether the application is falling behind in processing, you can use the
            <code>MillisBehindLatest</code> response attribute. You can also monitor the stream
            using CloudWatch metrics and other mechanisms (see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/monitoring.html">Monitoring</a>
            in the <i>Amazon Kinesis Data Streams Developer Guide</i>).
            </para>
             
            <para>
            Each Amazon Kinesis record includes a value, <code>ApproximateArrivalTimestamp</code>,
            that is set when a stream successfully receives and stores a record. This is commonly
            referred to as a server-side time stamp, whereas a client-side time stamp is set when
            a data producer creates or sends the record to a stream (a data producer is any data
            source putting data records into a stream, for example with <a>PutRecords</a>). The
            time stamp has millisecond precision. There are no guarantees about the time stamp
            accuracy, or that the time stamp is always increasing. For example, records in a shard
            or across a stream might have time stamps that are out of order.
            </para>
             
            <para>
            This operation has a limit of five transactions per second per shard.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetRecords service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetRecords service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.ExpiredIteratorException">
            The provided iterator exceeds the maximum age allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSAccessDeniedException">
            The ciphertext references a key that doesn't exist or that you don't have access to.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSDisabledException">
            The request was rejected because the specified customer master key (CMK) isn't enabled.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource isn't valid for
            this request. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">How
            Key State Affects Use of a Customer Master Key</a> in the <i>AWS Key Management Service
            Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSNotFoundException">
            The request was rejected because the specified entity or resource can't be found.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSOptInRequiredException">
            The AWS access key ID needs a subscription for the service.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSThrottlingException">
            The request was denied due to request throttling. For more information about throttling,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html#requests-per-second">Limits</a>
            in the <i>AWS Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ProvisionedThroughputExceededException">
            The request rate for the stream is too high, or the requested data is too large for
            the available throughput. Reduce the frequency or size of your requests. For more
            information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams
            Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>, and <a href="https://docs.aws.amazon.com/general/latest/gr/api-retries.html">Error
            Retries and Exponential Backoff in AWS</a> in the <i>AWS General Reference</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/GetRecords">REST API Reference for GetRecords Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.GetShardIterator(Amazon.Kinesis.Model.GetShardIteratorRequest)">
            <summary>
            Gets an Amazon Kinesis shard iterator. A shard iterator expires 5 minutes after it
            is returned to the requester.
            
             
            <para>
            A shard iterator specifies the shard position from which to start reading data records
            sequentially. The position is specified using the sequence number of a data record
            in a shard. A sequence number is the identifier associated with every record ingested
            in the stream, and is assigned when a record is put into the stream. Each stream has
            one or more shards.
            </para>
             
            <para>
            You must specify the shard iterator type. For example, you can set the <code>ShardIteratorType</code>
            parameter to read exactly from the position denoted by a specific sequence number
            by using the <code>AT_SEQUENCE_NUMBER</code> shard iterator type. Alternatively, the
            parameter can read right after the sequence number by using the <code>AFTER_SEQUENCE_NUMBER</code>
            shard iterator type, using sequence numbers returned by earlier calls to <a>PutRecord</a>,
            <a>PutRecords</a>, <a>GetRecords</a>, or <a>DescribeStream</a>. In the request, you
            can specify the shard iterator type <code>AT_TIMESTAMP</code> to read records from
            an arbitrary point in time, <code>TRIM_HORIZON</code> to cause <code>ShardIterator</code>
            to point to the last untrimmed record in the shard in the system (the oldest data
            record in the shard), or <code>LATEST</code> so that you always read the most recent
            data in the shard. 
            </para>
             
            <para>
            When you read repeatedly from a stream, use a <a>GetShardIterator</a> request to get
            the first shard iterator for use in your first <a>GetRecords</a> request and for subsequent
            reads use the shard iterator returned by the <a>GetRecords</a> request in <code>NextShardIterator</code>.
            A new shard iterator is returned by every <a>GetRecords</a> request in <code>NextShardIterator</code>,
            which you use in the <code>ShardIterator</code> parameter of the next <a>GetRecords</a>
            request. 
            </para>
             
            <para>
            If a <a>GetShardIterator</a> request is made too often, you receive a <code>ProvisionedThroughputExceededException</code>.
            For more information about throughput limits, see <a>GetRecords</a>, and <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams
            Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             
            <para>
            If the shard is closed, <a>GetShardIterator</a> returns a valid iterator for the last
            sequence number of the shard. A shard can be closed as a result of using <a>SplitShard</a>
            or <a>MergeShards</a>.
            </para>
             
            <para>
             <a>GetShardIterator</a> has a limit of five transactions per second per account per
            open shard.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetShardIterator service method.</param>
            
            <returns>The response from the GetShardIterator service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ProvisionedThroughputExceededException">
            The request rate for the stream is too high, or the requested data is too large for
            the available throughput. Reduce the frequency or size of your requests. For more
            information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams
            Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>, and <a href="https://docs.aws.amazon.com/general/latest/gr/api-retries.html">Error
            Retries and Exponential Backoff in AWS</a> in the <i>AWS General Reference</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/GetShardIterator">REST API Reference for GetShardIterator Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.GetShardIteratorAsync(Amazon.Kinesis.Model.GetShardIteratorRequest,System.Threading.CancellationToken)">
            <summary>
            Gets an Amazon Kinesis shard iterator. A shard iterator expires 5 minutes after it
            is returned to the requester.
            
             
            <para>
            A shard iterator specifies the shard position from which to start reading data records
            sequentially. The position is specified using the sequence number of a data record
            in a shard. A sequence number is the identifier associated with every record ingested
            in the stream, and is assigned when a record is put into the stream. Each stream has
            one or more shards.
            </para>
             
            <para>
            You must specify the shard iterator type. For example, you can set the <code>ShardIteratorType</code>
            parameter to read exactly from the position denoted by a specific sequence number
            by using the <code>AT_SEQUENCE_NUMBER</code> shard iterator type. Alternatively, the
            parameter can read right after the sequence number by using the <code>AFTER_SEQUENCE_NUMBER</code>
            shard iterator type, using sequence numbers returned by earlier calls to <a>PutRecord</a>,
            <a>PutRecords</a>, <a>GetRecords</a>, or <a>DescribeStream</a>. In the request, you
            can specify the shard iterator type <code>AT_TIMESTAMP</code> to read records from
            an arbitrary point in time, <code>TRIM_HORIZON</code> to cause <code>ShardIterator</code>
            to point to the last untrimmed record in the shard in the system (the oldest data
            record in the shard), or <code>LATEST</code> so that you always read the most recent
            data in the shard. 
            </para>
             
            <para>
            When you read repeatedly from a stream, use a <a>GetShardIterator</a> request to get
            the first shard iterator for use in your first <a>GetRecords</a> request and for subsequent
            reads use the shard iterator returned by the <a>GetRecords</a> request in <code>NextShardIterator</code>.
            A new shard iterator is returned by every <a>GetRecords</a> request in <code>NextShardIterator</code>,
            which you use in the <code>ShardIterator</code> parameter of the next <a>GetRecords</a>
            request. 
            </para>
             
            <para>
            If a <a>GetShardIterator</a> request is made too often, you receive a <code>ProvisionedThroughputExceededException</code>.
            For more information about throughput limits, see <a>GetRecords</a>, and <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams
            Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             
            <para>
            If the shard is closed, <a>GetShardIterator</a> returns a valid iterator for the last
            sequence number of the shard. A shard can be closed as a result of using <a>SplitShard</a>
            or <a>MergeShards</a>.
            </para>
             
            <para>
             <a>GetShardIterator</a> has a limit of five transactions per second per account per
            open shard.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetShardIterator service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetShardIterator service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ProvisionedThroughputExceededException">
            The request rate for the stream is too high, or the requested data is too large for
            the available throughput. Reduce the frequency or size of your requests. For more
            information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams
            Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>, and <a href="https://docs.aws.amazon.com/general/latest/gr/api-retries.html">Error
            Retries and Exponential Backoff in AWS</a> in the <i>AWS General Reference</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/GetShardIterator">REST API Reference for GetShardIterator Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.IncreaseStreamRetentionPeriod(System.String,System.Int32)">
            <summary>
            Increases the Kinesis data stream's retention period, which is the length of time
            data records are accessible after they are added to the stream. The maximum value
            of a stream's retention period is 168 hours (7 days).
            
             
            <para>
            If you choose a longer stream retention period, this operation increases the time
            period during which records that have not yet expired are accessible. However, it
            does not make previous, expired data (older than the stream's previous retention period)
            accessible after the operation has been called. For example, if a stream's retention
            period is set to 24 hours and is increased to 168 hours, any data that is older than
            24 hours remains inaccessible to consumer applications.
            </para>
            </summary>
            <param name="streamName">The name of the stream to modify.</param>
            <param name="retentionPeriodHours">The new retention period of the stream, in hours. Must be more than the current retention period.</param>
            
            <returns>The response from the IncreaseStreamRetentionPeriod service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/IncreaseStreamRetentionPeriod">REST API Reference for IncreaseStreamRetentionPeriod Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.IncreaseStreamRetentionPeriod(Amazon.Kinesis.Model.IncreaseStreamRetentionPeriodRequest)">
            <summary>
            Increases the Kinesis data stream's retention period, which is the length of time
            data records are accessible after they are added to the stream. The maximum value
            of a stream's retention period is 168 hours (7 days).
            
             
            <para>
            If you choose a longer stream retention period, this operation increases the time
            period during which records that have not yet expired are accessible. However, it
            does not make previous, expired data (older than the stream's previous retention period)
            accessible after the operation has been called. For example, if a stream's retention
            period is set to 24 hours and is increased to 168 hours, any data that is older than
            24 hours remains inaccessible to consumer applications.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the IncreaseStreamRetentionPeriod service method.</param>
            
            <returns>The response from the IncreaseStreamRetentionPeriod service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/IncreaseStreamRetentionPeriod">REST API Reference for IncreaseStreamRetentionPeriod Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.IncreaseStreamRetentionPeriodAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Increases the Kinesis data stream's retention period, which is the length of time
            data records are accessible after they are added to the stream. The maximum value
            of a stream's retention period is 168 hours (7 days).
            
             
            <para>
            If you choose a longer stream retention period, this operation increases the time
            period during which records that have not yet expired are accessible. However, it
            does not make previous, expired data (older than the stream's previous retention period)
            accessible after the operation has been called. For example, if a stream's retention
            period is set to 24 hours and is increased to 168 hours, any data that is older than
            24 hours remains inaccessible to consumer applications.
            </para>
            </summary>
            <param name="streamName">The name of the stream to modify.</param>
            <param name="retentionPeriodHours">The new retention period of the stream, in hours. Must be more than the current retention period.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the IncreaseStreamRetentionPeriod service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/IncreaseStreamRetentionPeriod">REST API Reference for IncreaseStreamRetentionPeriod Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.IncreaseStreamRetentionPeriodAsync(Amazon.Kinesis.Model.IncreaseStreamRetentionPeriodRequest,System.Threading.CancellationToken)">
            <summary>
            Increases the Kinesis data stream's retention period, which is the length of time
            data records are accessible after they are added to the stream. The maximum value
            of a stream's retention period is 168 hours (7 days).
            
             
            <para>
            If you choose a longer stream retention period, this operation increases the time
            period during which records that have not yet expired are accessible. However, it
            does not make previous, expired data (older than the stream's previous retention period)
            accessible after the operation has been called. For example, if a stream's retention
            period is set to 24 hours and is increased to 168 hours, any data that is older than
            24 hours remains inaccessible to consumer applications.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the IncreaseStreamRetentionPeriod service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the IncreaseStreamRetentionPeriod service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/IncreaseStreamRetentionPeriod">REST API Reference for IncreaseStreamRetentionPeriod Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.ListShards(Amazon.Kinesis.Model.ListShardsRequest)">
            <summary>
            Lists the shards in a stream and provides information about each shard. This operation
            has a limit of 100 transactions per second per data stream.
            
             <important> 
            <para>
            This API is a new operation that is used by the Amazon Kinesis Client Library (KCL).
            If you have a fine-grained IAM policy that only allows specific operations, you must
            update your policy to allow calls to this API. For more information, see <a href="https://docs.aws.amazon.com/streams/latest/dev/controlling-access.html">Controlling
            Access to Amazon Kinesis Data Streams Resources Using IAM</a>.
            </para>
             </important>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListShards service method.</param>
            
            <returns>The response from the ListShards service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.ExpiredNextTokenException">
            The pagination token passed to the operation is expired.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/ListShards">REST API Reference for ListShards Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.ListShardsAsync(Amazon.Kinesis.Model.ListShardsRequest,System.Threading.CancellationToken)">
            <summary>
            Lists the shards in a stream and provides information about each shard. This operation
            has a limit of 100 transactions per second per data stream.
            
             <important> 
            <para>
            This API is a new operation that is used by the Amazon Kinesis Client Library (KCL).
            If you have a fine-grained IAM policy that only allows specific operations, you must
            update your policy to allow calls to this API. For more information, see <a href="https://docs.aws.amazon.com/streams/latest/dev/controlling-access.html">Controlling
            Access to Amazon Kinesis Data Streams Resources Using IAM</a>.
            </para>
             </important>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListShards service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListShards service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.ExpiredNextTokenException">
            The pagination token passed to the operation is expired.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/ListShards">REST API Reference for ListShards Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.ListStreamConsumers(Amazon.Kinesis.Model.ListStreamConsumersRequest)">
            <summary>
            Lists the consumers registered to receive data from a stream using enhanced fan-out,
            and provides information about each consumer.
            
             
            <para>
            This operation has a limit of 5 transactions per second per stream.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListStreamConsumers service method.</param>
            
            <returns>The response from the ListStreamConsumers service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.ExpiredNextTokenException">
            The pagination token passed to the operation is expired.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/ListStreamConsumers">REST API Reference for ListStreamConsumers Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.ListStreamConsumersAsync(Amazon.Kinesis.Model.ListStreamConsumersRequest,System.Threading.CancellationToken)">
            <summary>
            Lists the consumers registered to receive data from a stream using enhanced fan-out,
            and provides information about each consumer.
            
             
            <para>
            This operation has a limit of 5 transactions per second per stream.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListStreamConsumers service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListStreamConsumers service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.ExpiredNextTokenException">
            The pagination token passed to the operation is expired.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/ListStreamConsumers">REST API Reference for ListStreamConsumers Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.ListStreams">
            <summary>
            Lists your Kinesis data streams.
            
             
            <para>
            The number of streams may be too large to return from a single call to <code>ListStreams</code>.
            You can limit the number of returned streams using the <code>Limit</code> parameter.
            If you do not specify a value for the <code>Limit</code> parameter, Kinesis Data Streams
            uses the default limit, which is currently 10.
            </para>
             
            <para>
            You can detect if there are more streams available to list by using the <code>HasMoreStreams</code>
            flag from the returned output. If there are more streams available, you can request
            more streams by using the name of the last stream returned by the <code>ListStreams</code>
            request in the <code>ExclusiveStartStreamName</code> parameter in a subsequent request
            to <code>ListStreams</code>. The group of stream names returned by the subsequent
            request is then added to the list. You can continue this process until all the stream
            names have been collected in the list. 
            </para>
             
            <para>
             <a>ListStreams</a> has a limit of five transactions per second per account.
            </para>
            </summary>
            
            <returns>The response from the ListStreams service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/ListStreams">REST API Reference for ListStreams Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.ListStreams(Amazon.Kinesis.Model.ListStreamsRequest)">
            <summary>
            Lists your Kinesis data streams.
            
             
            <para>
            The number of streams may be too large to return from a single call to <code>ListStreams</code>.
            You can limit the number of returned streams using the <code>Limit</code> parameter.
            If you do not specify a value for the <code>Limit</code> parameter, Kinesis Data Streams
            uses the default limit, which is currently 10.
            </para>
             
            <para>
            You can detect if there are more streams available to list by using the <code>HasMoreStreams</code>
            flag from the returned output. If there are more streams available, you can request
            more streams by using the name of the last stream returned by the <code>ListStreams</code>
            request in the <code>ExclusiveStartStreamName</code> parameter in a subsequent request
            to <code>ListStreams</code>. The group of stream names returned by the subsequent
            request is then added to the list. You can continue this process until all the stream
            names have been collected in the list. 
            </para>
             
            <para>
             <a>ListStreams</a> has a limit of five transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListStreams service method.</param>
            
            <returns>The response from the ListStreams service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/ListStreams">REST API Reference for ListStreams Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.ListStreamsAsync(System.Threading.CancellationToken)">
            <summary>
            Lists your Kinesis data streams.
            
             
            <para>
            The number of streams may be too large to return from a single call to <code>ListStreams</code>.
            You can limit the number of returned streams using the <code>Limit</code> parameter.
            If you do not specify a value for the <code>Limit</code> parameter, Kinesis Data Streams
            uses the default limit, which is currently 10.
            </para>
             
            <para>
            You can detect if there are more streams available to list by using the <code>HasMoreStreams</code>
            flag from the returned output. If there are more streams available, you can request
            more streams by using the name of the last stream returned by the <code>ListStreams</code>
            request in the <code>ExclusiveStartStreamName</code> parameter in a subsequent request
            to <code>ListStreams</code>. The group of stream names returned by the subsequent
            request is then added to the list. You can continue this process until all the stream
            names have been collected in the list. 
            </para>
             
            <para>
             <a>ListStreams</a> has a limit of five transactions per second per account.
            </para>
            </summary>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListStreams service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/ListStreams">REST API Reference for ListStreams Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.ListStreamsAsync(Amazon.Kinesis.Model.ListStreamsRequest,System.Threading.CancellationToken)">
            <summary>
            Lists your Kinesis data streams.
            
             
            <para>
            The number of streams may be too large to return from a single call to <code>ListStreams</code>.
            You can limit the number of returned streams using the <code>Limit</code> parameter.
            If you do not specify a value for the <code>Limit</code> parameter, Kinesis Data Streams
            uses the default limit, which is currently 10.
            </para>
             
            <para>
            You can detect if there are more streams available to list by using the <code>HasMoreStreams</code>
            flag from the returned output. If there are more streams available, you can request
            more streams by using the name of the last stream returned by the <code>ListStreams</code>
            request in the <code>ExclusiveStartStreamName</code> parameter in a subsequent request
            to <code>ListStreams</code>. The group of stream names returned by the subsequent
            request is then added to the list. You can continue this process until all the stream
            names have been collected in the list. 
            </para>
             
            <para>
             <a>ListStreams</a> has a limit of five transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListStreams service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListStreams service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/ListStreams">REST API Reference for ListStreams Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.ListTagsForStream(Amazon.Kinesis.Model.ListTagsForStreamRequest)">
            <summary>
            Lists the tags for the specified Kinesis data stream. This operation has a limit of
            five transactions per second per account.
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListTagsForStream service method.</param>
            
            <returns>The response from the ListTagsForStream service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/ListTagsForStream">REST API Reference for ListTagsForStream Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.ListTagsForStreamAsync(Amazon.Kinesis.Model.ListTagsForStreamRequest,System.Threading.CancellationToken)">
            <summary>
            Lists the tags for the specified Kinesis data stream. This operation has a limit of
            five transactions per second per account.
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListTagsForStream service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListTagsForStream service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/ListTagsForStream">REST API Reference for ListTagsForStream Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.MergeShards(Amazon.Kinesis.Model.MergeShardsRequest)">
            <summary>
            Merges two adjacent shards in a Kinesis data stream and combines them into a single
            shard to reduce the stream's capacity to ingest and transport data. Two shards are
            considered adjacent if the union of the hash key ranges for the two shards form a
            contiguous set with no gaps. For example, if you have two shards, one with a hash
            key range of 276...381 and the other with a hash key range of 382...454, then you
            could merge these two shards into a single shard that would have a hash key range
            of 276...454. After the merge, the single child shard receives data for all hash key
            values covered by the two parent shards.
            
             
            <para>
             <code>MergeShards</code> is called when there is a need to reduce the overall capacity
            of a stream because of excess capacity that is not being used. You must specify the
            shard to be merged and the adjacent shard for a stream. For more information about
            merging shards, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-resharding-merge.html">Merge
            Two Shards</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             
            <para>
            If the stream is in the <code>ACTIVE</code> state, you can call <code>MergeShards</code>.
            If a stream is in the <code>CREATING</code>, <code>UPDATING</code>, or <code>DELETING</code>
            state, <code>MergeShards</code> returns a <code>ResourceInUseException</code>. If
            the specified stream does not exist, <code>MergeShards</code> returns a <code>ResourceNotFoundException</code>.
            
            </para>
             
            <para>
            You can use <a>DescribeStream</a> to check the state of the stream, which is returned
            in <code>StreamStatus</code>.
            </para>
             
            <para>
             <code>MergeShards</code> is an asynchronous operation. Upon receiving a <code>MergeShards</code>
            request, Amazon Kinesis Data Streams immediately returns a response and sets the <code>StreamStatus</code>
            to <code>UPDATING</code>. After the operation is completed, Kinesis Data Streams sets
            the <code>StreamStatus</code> to <code>ACTIVE</code>. Read and write operations continue
            to work while the stream is in the <code>UPDATING</code> state. 
            </para>
             
            <para>
            You use <a>DescribeStream</a> to determine the shard IDs that are specified in the
            <code>MergeShards</code> request. 
            </para>
             
            <para>
            If you try to operate on too many streams in parallel using <a>CreateStream</a>, <a>DeleteStream</a>,
            <code>MergeShards</code>, or <a>SplitShard</a>, you receive a <code>LimitExceededException</code>.
            
            </para>
             
            <para>
             <code>MergeShards</code> has a limit of five transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the MergeShards service method.</param>
            
            <returns>The response from the MergeShards service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/MergeShards">REST API Reference for MergeShards Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.MergeShardsAsync(Amazon.Kinesis.Model.MergeShardsRequest,System.Threading.CancellationToken)">
            <summary>
            Merges two adjacent shards in a Kinesis data stream and combines them into a single
            shard to reduce the stream's capacity to ingest and transport data. Two shards are
            considered adjacent if the union of the hash key ranges for the two shards form a
            contiguous set with no gaps. For example, if you have two shards, one with a hash
            key range of 276...381 and the other with a hash key range of 382...454, then you
            could merge these two shards into a single shard that would have a hash key range
            of 276...454. After the merge, the single child shard receives data for all hash key
            values covered by the two parent shards.
            
             
            <para>
             <code>MergeShards</code> is called when there is a need to reduce the overall capacity
            of a stream because of excess capacity that is not being used. You must specify the
            shard to be merged and the adjacent shard for a stream. For more information about
            merging shards, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-resharding-merge.html">Merge
            Two Shards</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             
            <para>
            If the stream is in the <code>ACTIVE</code> state, you can call <code>MergeShards</code>.
            If a stream is in the <code>CREATING</code>, <code>UPDATING</code>, or <code>DELETING</code>
            state, <code>MergeShards</code> returns a <code>ResourceInUseException</code>. If
            the specified stream does not exist, <code>MergeShards</code> returns a <code>ResourceNotFoundException</code>.
            
            </para>
             
            <para>
            You can use <a>DescribeStream</a> to check the state of the stream, which is returned
            in <code>StreamStatus</code>.
            </para>
             
            <para>
             <code>MergeShards</code> is an asynchronous operation. Upon receiving a <code>MergeShards</code>
            request, Amazon Kinesis Data Streams immediately returns a response and sets the <code>StreamStatus</code>
            to <code>UPDATING</code>. After the operation is completed, Kinesis Data Streams sets
            the <code>StreamStatus</code> to <code>ACTIVE</code>. Read and write operations continue
            to work while the stream is in the <code>UPDATING</code> state. 
            </para>
             
            <para>
            You use <a>DescribeStream</a> to determine the shard IDs that are specified in the
            <code>MergeShards</code> request. 
            </para>
             
            <para>
            If you try to operate on too many streams in parallel using <a>CreateStream</a>, <a>DeleteStream</a>,
            <code>MergeShards</code>, or <a>SplitShard</a>, you receive a <code>LimitExceededException</code>.
            
            </para>
             
            <para>
             <code>MergeShards</code> has a limit of five transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the MergeShards service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the MergeShards service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/MergeShards">REST API Reference for MergeShards Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.PutRecord(Amazon.Kinesis.Model.PutRecordRequest)">
            <summary>
            Writes a single data record into an Amazon Kinesis data stream. Call <code>PutRecord</code>
            to send data into the stream for real-time ingestion and subsequent processing, one
            record at a time. Each shard can support writes up to 1,000 records per second, up
            to a maximum data write total of 1 MiB per second.
            
             
            <para>
            You must specify the name of the stream that captures, stores, and transports the
            data; a partition key; and the data blob itself.
            </para>
             
            <para>
            The data blob can be any type of data; for example, a segment from a log file, geographic/location
            data, website clickstream data, and so on.
            </para>
             
            <para>
            The partition key is used by Kinesis Data Streams to distribute data across shards.
            Kinesis Data Streams segregates the data records that belong to a stream into multiple
            shards, using the partition key associated with each data record to determine the
            shard to which a given data record belongs.
            </para>
             
            <para>
            Partition keys are Unicode strings, with a maximum length limit of 256 characters
            for each key. An MD5 hash function is used to map partition keys to 128-bit integer
            values and to map associated data records to shards using the hash key ranges of the
            shards. You can override hashing the partition key to determine the shard by explicitly
            specifying a hash value using the <code>ExplicitHashKey</code> parameter. For more
            information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-add-data-to-stream">Adding
            Data to a Stream</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             
            <para>
             <code>PutRecord</code> returns the shard ID of where the data record was placed and
            the sequence number that was assigned to the data record.
            </para>
             
            <para>
            Sequence numbers increase over time and are specific to a shard within a stream, not
            across all shards within a stream. To guarantee strictly increasing ordering, write
            serially to a shard and use the <code>SequenceNumberForOrdering</code> parameter.
            For more information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-add-data-to-stream">Adding
            Data to a Stream</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             <important> 
            <para>
            After you write a record to a stream, you cannot modify that record or its order within
            the stream.
            </para>
             </important> 
            <para>
            If a <code>PutRecord</code> request cannot be processed because of insufficient provisioned
            throughput on the shard involved in the request, <code>PutRecord</code> throws <code>ProvisionedThroughputExceededException</code>.
            
            </para>
             
            <para>
            By default, data records are accessible for 24 hours from the time that they are added
            to a stream. You can use <a>IncreaseStreamRetentionPeriod</a> or <a>DecreaseStreamRetentionPeriod</a>
            to modify this retention period.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutRecord service method.</param>
            
            <returns>The response from the PutRecord service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSAccessDeniedException">
            The ciphertext references a key that doesn't exist or that you don't have access to.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSDisabledException">
            The request was rejected because the specified customer master key (CMK) isn't enabled.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource isn't valid for
            this request. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">How
            Key State Affects Use of a Customer Master Key</a> in the <i>AWS Key Management Service
            Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSNotFoundException">
            The request was rejected because the specified entity or resource can't be found.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSOptInRequiredException">
            The AWS access key ID needs a subscription for the service.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSThrottlingException">
            The request was denied due to request throttling. For more information about throttling,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html#requests-per-second">Limits</a>
            in the <i>AWS Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ProvisionedThroughputExceededException">
            The request rate for the stream is too high, or the requested data is too large for
            the available throughput. Reduce the frequency or size of your requests. For more
            information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams
            Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>, and <a href="https://docs.aws.amazon.com/general/latest/gr/api-retries.html">Error
            Retries and Exponential Backoff in AWS</a> in the <i>AWS General Reference</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/PutRecord">REST API Reference for PutRecord Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.PutRecordAsync(Amazon.Kinesis.Model.PutRecordRequest,System.Threading.CancellationToken)">
            <summary>
            Writes a single data record into an Amazon Kinesis data stream. Call <code>PutRecord</code>
            to send data into the stream for real-time ingestion and subsequent processing, one
            record at a time. Each shard can support writes up to 1,000 records per second, up
            to a maximum data write total of 1 MiB per second.
            
             
            <para>
            You must specify the name of the stream that captures, stores, and transports the
            data; a partition key; and the data blob itself.
            </para>
             
            <para>
            The data blob can be any type of data; for example, a segment from a log file, geographic/location
            data, website clickstream data, and so on.
            </para>
             
            <para>
            The partition key is used by Kinesis Data Streams to distribute data across shards.
            Kinesis Data Streams segregates the data records that belong to a stream into multiple
            shards, using the partition key associated with each data record to determine the
            shard to which a given data record belongs.
            </para>
             
            <para>
            Partition keys are Unicode strings, with a maximum length limit of 256 characters
            for each key. An MD5 hash function is used to map partition keys to 128-bit integer
            values and to map associated data records to shards using the hash key ranges of the
            shards. You can override hashing the partition key to determine the shard by explicitly
            specifying a hash value using the <code>ExplicitHashKey</code> parameter. For more
            information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-add-data-to-stream">Adding
            Data to a Stream</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             
            <para>
             <code>PutRecord</code> returns the shard ID of where the data record was placed and
            the sequence number that was assigned to the data record.
            </para>
             
            <para>
            Sequence numbers increase over time and are specific to a shard within a stream, not
            across all shards within a stream. To guarantee strictly increasing ordering, write
            serially to a shard and use the <code>SequenceNumberForOrdering</code> parameter.
            For more information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-add-data-to-stream">Adding
            Data to a Stream</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             <important> 
            <para>
            After you write a record to a stream, you cannot modify that record or its order within
            the stream.
            </para>
             </important> 
            <para>
            If a <code>PutRecord</code> request cannot be processed because of insufficient provisioned
            throughput on the shard involved in the request, <code>PutRecord</code> throws <code>ProvisionedThroughputExceededException</code>.
            
            </para>
             
            <para>
            By default, data records are accessible for 24 hours from the time that they are added
            to a stream. You can use <a>IncreaseStreamRetentionPeriod</a> or <a>DecreaseStreamRetentionPeriod</a>
            to modify this retention period.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutRecord service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutRecord service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSAccessDeniedException">
            The ciphertext references a key that doesn't exist or that you don't have access to.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSDisabledException">
            The request was rejected because the specified customer master key (CMK) isn't enabled.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource isn't valid for
            this request. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">How
            Key State Affects Use of a Customer Master Key</a> in the <i>AWS Key Management Service
            Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSNotFoundException">
            The request was rejected because the specified entity or resource can't be found.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSOptInRequiredException">
            The AWS access key ID needs a subscription for the service.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSThrottlingException">
            The request was denied due to request throttling. For more information about throttling,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html#requests-per-second">Limits</a>
            in the <i>AWS Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ProvisionedThroughputExceededException">
            The request rate for the stream is too high, or the requested data is too large for
            the available throughput. Reduce the frequency or size of your requests. For more
            information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams
            Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>, and <a href="https://docs.aws.amazon.com/general/latest/gr/api-retries.html">Error
            Retries and Exponential Backoff in AWS</a> in the <i>AWS General Reference</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/PutRecord">REST API Reference for PutRecord Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.PutRecords(Amazon.Kinesis.Model.PutRecordsRequest)">
            <summary>
            Writes multiple data records into a Kinesis data stream in a single call (also referred
            to as a <code>PutRecords</code> request). Use this operation to send data into the
            stream for data ingestion and processing. 
            
             
            <para>
            Each <code>PutRecords</code> request can support up to 500 records. Each record in
            the request can be as large as 1 MiB, up to a limit of 5 MiB for the entire request,
            including partition keys. Each shard can support writes up to 1,000 records per second,
            up to a maximum data write total of 1 MiB per second.
            </para>
             
            <para>
            You must specify the name of the stream that captures, stores, and transports the
            data; and an array of request <code>Records</code>, with each record in the array
            requiring a partition key and data blob. The record size limit applies to the total
            size of the partition key and data blob.
            </para>
             
            <para>
            The data blob can be any type of data; for example, a segment from a log file, geographic/location
            data, website clickstream data, and so on.
            </para>
             
            <para>
            The partition key is used by Kinesis Data Streams as input to a hash function that
            maps the partition key and associated data to a specific shard. An MD5 hash function
            is used to map partition keys to 128-bit integer values and to map associated data
            records to shards. As a result of this hashing mechanism, all data records with the
            same partition key map to the same shard within the stream. For more information,
            see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-add-data-to-stream">Adding
            Data to a Stream</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             
            <para>
            Each record in the <code>Records</code> array may include an optional parameter, <code>ExplicitHashKey</code>,
            which overrides the partition key to shard mapping. This parameter allows a data producer
            to determine explicitly the shard where the record is stored. For more information,
            see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-putrecords">Adding
            Multiple Records with PutRecords</a> in the <i>Amazon Kinesis Data Streams Developer
            Guide</i>.
            </para>
             
            <para>
            The <code>PutRecords</code> response includes an array of response <code>Records</code>.
            Each record in the response array directly correlates with a record in the request
            array using natural ordering, from the top to the bottom of the request and response.
            The response <code>Records</code> array always includes the same number of records
            as the request array.
            </para>
             
            <para>
            The response <code>Records</code> array includes both successfully and unsuccessfully
            processed records. Kinesis Data Streams attempts to process all records in each <code>PutRecords</code>
            request. A single record failure does not stop the processing of subsequent records.
            As a result, PutRecords doesn't guarantee the ordering of records. If you need to
            read records in the same order they are written to the stream, use <a>PutRecord</a>
            instead of <code>PutRecords</code>, and write to the same shard.
            </para>
             
            <para>
            A successfully processed record includes <code>ShardId</code> and <code>SequenceNumber</code>
            values. The <code>ShardId</code> parameter identifies the shard in the stream where
            the record is stored. The <code>SequenceNumber</code> parameter is an identifier assigned
            to the put record, unique to all records in the stream.
            </para>
             
            <para>
            An unsuccessfully processed record includes <code>ErrorCode</code> and <code>ErrorMessage</code>
            values. <code>ErrorCode</code> reflects the type of error and can be one of the following
            values: <code>ProvisionedThroughputExceededException</code> or <code>InternalFailure</code>.
            <code>ErrorMessage</code> provides more detailed information about the <code>ProvisionedThroughputExceededException</code>
            exception including the account ID, stream name, and shard ID of the record that was
            throttled. For more information about partially successful responses, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-add-data-to-stream.html#kinesis-using-sdk-java-putrecords">Adding
            Multiple Records with PutRecords</a> in the <i>Amazon Kinesis Data Streams Developer
            Guide</i>.
            </para>
             <important> 
            <para>
            After you write a record to a stream, you cannot modify that record or its order within
            the stream.
            </para>
             </important> 
            <para>
            By default, data records are accessible for 24 hours from the time that they are added
            to a stream. You can use <a>IncreaseStreamRetentionPeriod</a> or <a>DecreaseStreamRetentionPeriod</a>
            to modify this retention period.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutRecords service method.</param>
            
            <returns>The response from the PutRecords service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSAccessDeniedException">
            The ciphertext references a key that doesn't exist or that you don't have access to.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSDisabledException">
            The request was rejected because the specified customer master key (CMK) isn't enabled.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource isn't valid for
            this request. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">How
            Key State Affects Use of a Customer Master Key</a> in the <i>AWS Key Management Service
            Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSNotFoundException">
            The request was rejected because the specified entity or resource can't be found.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSOptInRequiredException">
            The AWS access key ID needs a subscription for the service.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSThrottlingException">
            The request was denied due to request throttling. For more information about throttling,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html#requests-per-second">Limits</a>
            in the <i>AWS Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ProvisionedThroughputExceededException">
            The request rate for the stream is too high, or the requested data is too large for
            the available throughput. Reduce the frequency or size of your requests. For more
            information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams
            Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>, and <a href="https://docs.aws.amazon.com/general/latest/gr/api-retries.html">Error
            Retries and Exponential Backoff in AWS</a> in the <i>AWS General Reference</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/PutRecords">REST API Reference for PutRecords Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.PutRecordsAsync(Amazon.Kinesis.Model.PutRecordsRequest,System.Threading.CancellationToken)">
            <summary>
            Writes multiple data records into a Kinesis data stream in a single call (also referred
            to as a <code>PutRecords</code> request). Use this operation to send data into the
            stream for data ingestion and processing. 
            
             
            <para>
            Each <code>PutRecords</code> request can support up to 500 records. Each record in
            the request can be as large as 1 MiB, up to a limit of 5 MiB for the entire request,
            including partition keys. Each shard can support writes up to 1,000 records per second,
            up to a maximum data write total of 1 MiB per second.
            </para>
             
            <para>
            You must specify the name of the stream that captures, stores, and transports the
            data; and an array of request <code>Records</code>, with each record in the array
            requiring a partition key and data blob. The record size limit applies to the total
            size of the partition key and data blob.
            </para>
             
            <para>
            The data blob can be any type of data; for example, a segment from a log file, geographic/location
            data, website clickstream data, and so on.
            </para>
             
            <para>
            The partition key is used by Kinesis Data Streams as input to a hash function that
            maps the partition key and associated data to a specific shard. An MD5 hash function
            is used to map partition keys to 128-bit integer values and to map associated data
            records to shards. As a result of this hashing mechanism, all data records with the
            same partition key map to the same shard within the stream. For more information,
            see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-add-data-to-stream">Adding
            Data to a Stream</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             
            <para>
            Each record in the <code>Records</code> array may include an optional parameter, <code>ExplicitHashKey</code>,
            which overrides the partition key to shard mapping. This parameter allows a data producer
            to determine explicitly the shard where the record is stored. For more information,
            see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/developing-producers-with-sdk.html#kinesis-using-sdk-java-putrecords">Adding
            Multiple Records with PutRecords</a> in the <i>Amazon Kinesis Data Streams Developer
            Guide</i>.
            </para>
             
            <para>
            The <code>PutRecords</code> response includes an array of response <code>Records</code>.
            Each record in the response array directly correlates with a record in the request
            array using natural ordering, from the top to the bottom of the request and response.
            The response <code>Records</code> array always includes the same number of records
            as the request array.
            </para>
             
            <para>
            The response <code>Records</code> array includes both successfully and unsuccessfully
            processed records. Kinesis Data Streams attempts to process all records in each <code>PutRecords</code>
            request. A single record failure does not stop the processing of subsequent records.
            As a result, PutRecords doesn't guarantee the ordering of records. If you need to
            read records in the same order they are written to the stream, use <a>PutRecord</a>
            instead of <code>PutRecords</code>, and write to the same shard.
            </para>
             
            <para>
            A successfully processed record includes <code>ShardId</code> and <code>SequenceNumber</code>
            values. The <code>ShardId</code> parameter identifies the shard in the stream where
            the record is stored. The <code>SequenceNumber</code> parameter is an identifier assigned
            to the put record, unique to all records in the stream.
            </para>
             
            <para>
            An unsuccessfully processed record includes <code>ErrorCode</code> and <code>ErrorMessage</code>
            values. <code>ErrorCode</code> reflects the type of error and can be one of the following
            values: <code>ProvisionedThroughputExceededException</code> or <code>InternalFailure</code>.
            <code>ErrorMessage</code> provides more detailed information about the <code>ProvisionedThroughputExceededException</code>
            exception including the account ID, stream name, and shard ID of the record that was
            throttled. For more information about partially successful responses, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-add-data-to-stream.html#kinesis-using-sdk-java-putrecords">Adding
            Multiple Records with PutRecords</a> in the <i>Amazon Kinesis Data Streams Developer
            Guide</i>.
            </para>
             <important> 
            <para>
            After you write a record to a stream, you cannot modify that record or its order within
            the stream.
            </para>
             </important> 
            <para>
            By default, data records are accessible for 24 hours from the time that they are added
            to a stream. You can use <a>IncreaseStreamRetentionPeriod</a> or <a>DecreaseStreamRetentionPeriod</a>
            to modify this retention period.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutRecords service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutRecords service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSAccessDeniedException">
            The ciphertext references a key that doesn't exist or that you don't have access to.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSDisabledException">
            The request was rejected because the specified customer master key (CMK) isn't enabled.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource isn't valid for
            this request. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">How
            Key State Affects Use of a Customer Master Key</a> in the <i>AWS Key Management Service
            Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSNotFoundException">
            The request was rejected because the specified entity or resource can't be found.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSOptInRequiredException">
            The AWS access key ID needs a subscription for the service.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSThrottlingException">
            The request was denied due to request throttling. For more information about throttling,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html#requests-per-second">Limits</a>
            in the <i>AWS Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ProvisionedThroughputExceededException">
            The request rate for the stream is too high, or the requested data is too large for
            the available throughput. Reduce the frequency or size of your requests. For more
            information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams
            Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>, and <a href="https://docs.aws.amazon.com/general/latest/gr/api-retries.html">Error
            Retries and Exponential Backoff in AWS</a> in the <i>AWS General Reference</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/PutRecords">REST API Reference for PutRecords Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.RegisterStreamConsumer(Amazon.Kinesis.Model.RegisterStreamConsumerRequest)">
            <summary>
            Registers a consumer with a Kinesis data stream. When you use this operation, the
            consumer you register can then call <a>SubscribeToShard</a> to receive data from the
            stream using enhanced fan-out, at a rate of up to 2 MiB per second for every shard
            you subscribe to. This rate is unaffected by the total number of consumers that read
            from the same stream.
            
             
            <para>
            You can register up to 20 consumers per stream. A given consumer can only be registered
            with one stream at a time.
            </para>
             
            <para>
            For an example of how to use this operations, see <a href="/streams/latest/dev/building-enhanced-consumers-api.html">Enhanced
            Fan-Out Using the Kinesis Data Streams API</a>.
            </para>
             
            <para>
            The use of this operation has a limit of five transactions per second per account.
            Also, only 5 consumers can be created simultaneously. In other words, you cannot have
            more than 5 consumers in a <code>CREATING</code> status at the same time. Registering
            a 6th consumer while there are 5 in a <code>CREATING</code> status results in a <code>LimitExceededException</code>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the RegisterStreamConsumer service method.</param>
            
            <returns>The response from the RegisterStreamConsumer service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/RegisterStreamConsumer">REST API Reference for RegisterStreamConsumer Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.RegisterStreamConsumerAsync(Amazon.Kinesis.Model.RegisterStreamConsumerRequest,System.Threading.CancellationToken)">
            <summary>
            Registers a consumer with a Kinesis data stream. When you use this operation, the
            consumer you register can then call <a>SubscribeToShard</a> to receive data from the
            stream using enhanced fan-out, at a rate of up to 2 MiB per second for every shard
            you subscribe to. This rate is unaffected by the total number of consumers that read
            from the same stream.
            
             
            <para>
            You can register up to 20 consumers per stream. A given consumer can only be registered
            with one stream at a time.
            </para>
             
            <para>
            For an example of how to use this operations, see <a href="/streams/latest/dev/building-enhanced-consumers-api.html">Enhanced
            Fan-Out Using the Kinesis Data Streams API</a>.
            </para>
             
            <para>
            The use of this operation has a limit of five transactions per second per account.
            Also, only 5 consumers can be created simultaneously. In other words, you cannot have
            more than 5 consumers in a <code>CREATING</code> status at the same time. Registering
            a 6th consumer while there are 5 in a <code>CREATING</code> status results in a <code>LimitExceededException</code>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the RegisterStreamConsumer service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the RegisterStreamConsumer service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/RegisterStreamConsumer">REST API Reference for RegisterStreamConsumer Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.RemoveTagsFromStream(Amazon.Kinesis.Model.RemoveTagsFromStreamRequest)">
            <summary>
            Removes tags from the specified Kinesis data stream. Removed tags are deleted and
            cannot be recovered after this operation successfully completes.
            
             
            <para>
            If you specify a tag that does not exist, it is ignored.
            </para>
             
            <para>
             <a>RemoveTagsFromStream</a> has a limit of five transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the RemoveTagsFromStream service method.</param>
            
            <returns>The response from the RemoveTagsFromStream service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/RemoveTagsFromStream">REST API Reference for RemoveTagsFromStream Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.RemoveTagsFromStreamAsync(Amazon.Kinesis.Model.RemoveTagsFromStreamRequest,System.Threading.CancellationToken)">
            <summary>
            Removes tags from the specified Kinesis data stream. Removed tags are deleted and
            cannot be recovered after this operation successfully completes.
            
             
            <para>
            If you specify a tag that does not exist, it is ignored.
            </para>
             
            <para>
             <a>RemoveTagsFromStream</a> has a limit of five transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the RemoveTagsFromStream service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the RemoveTagsFromStream service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/RemoveTagsFromStream">REST API Reference for RemoveTagsFromStream Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.SplitShard(Amazon.Kinesis.Model.SplitShardRequest)">
            <summary>
            Splits a shard into two new shards in the Kinesis data stream, to increase the stream's
            capacity to ingest and transport data. <code>SplitShard</code> is called when there
            is a need to increase the overall capacity of a stream because of an expected increase
            in the volume of data records being ingested. 
            
             
            <para>
            You can also use <code>SplitShard</code> when a shard appears to be approaching its
            maximum utilization; for example, the producers sending data into the specific shard
            are suddenly sending more than previously anticipated. You can also call <code>SplitShard</code>
            to increase stream capacity, so that more Kinesis Data Streams applications can simultaneously
            read data from the stream for real-time processing. 
            </para>
             
            <para>
            You must specify the shard to be split and the new hash key, which is the position
            in the shard where the shard gets split in two. In many cases, the new hash key might
            be the average of the beginning and ending hash key, but it can be any hash key value
            in the range being mapped into the shard. For more information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-resharding-split.html">Split
            a Shard</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             
            <para>
            You can use <a>DescribeStream</a> to determine the shard ID and hash key values for
            the <code>ShardToSplit</code> and <code>NewStartingHashKey</code> parameters that
            are specified in the <code>SplitShard</code> request.
            </para>
             
            <para>
             <code>SplitShard</code> is an asynchronous operation. Upon receiving a <code>SplitShard</code>
            request, Kinesis Data Streams immediately returns a response and sets the stream status
            to <code>UPDATING</code>. After the operation is completed, Kinesis Data Streams sets
            the stream status to <code>ACTIVE</code>. Read and write operations continue to work
            while the stream is in the <code>UPDATING</code> state. 
            </para>
             
            <para>
            You can use <code>DescribeStream</code> to check the status of the stream, which is
            returned in <code>StreamStatus</code>. If the stream is in the <code>ACTIVE</code>
            state, you can call <code>SplitShard</code>. If a stream is in <code>CREATING</code>
            or <code>UPDATING</code> or <code>DELETING</code> states, <code>DescribeStream</code>
            returns a <code>ResourceInUseException</code>.
            </para>
             
            <para>
            If the specified stream does not exist, <code>DescribeStream</code> returns a <code>ResourceNotFoundException</code>.
            If you try to create more shards than are authorized for your account, you receive
            a <code>LimitExceededException</code>. 
            </para>
             
            <para>
            For the default shard limit for an AWS account, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Kinesis
            Data Streams Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            To increase this limit, <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html">contact
            AWS Support</a>.
            </para>
             
            <para>
            If you try to operate on too many streams simultaneously using <a>CreateStream</a>,
            <a>DeleteStream</a>, <a>MergeShards</a>, and/or <a>SplitShard</a>, you receive a <code>LimitExceededException</code>.
            
            </para>
             
            <para>
             <code>SplitShard</code> has a limit of five transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the SplitShard service method.</param>
            
            <returns>The response from the SplitShard service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/SplitShard">REST API Reference for SplitShard Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.SplitShardAsync(Amazon.Kinesis.Model.SplitShardRequest,System.Threading.CancellationToken)">
            <summary>
            Splits a shard into two new shards in the Kinesis data stream, to increase the stream's
            capacity to ingest and transport data. <code>SplitShard</code> is called when there
            is a need to increase the overall capacity of a stream because of an expected increase
            in the volume of data records being ingested. 
            
             
            <para>
            You can also use <code>SplitShard</code> when a shard appears to be approaching its
            maximum utilization; for example, the producers sending data into the specific shard
            are suddenly sending more than previously anticipated. You can also call <code>SplitShard</code>
            to increase stream capacity, so that more Kinesis Data Streams applications can simultaneously
            read data from the stream for real-time processing. 
            </para>
             
            <para>
            You must specify the shard to be split and the new hash key, which is the position
            in the shard where the shard gets split in two. In many cases, the new hash key might
            be the average of the beginning and ending hash key, but it can be any hash key value
            in the range being mapped into the shard. For more information, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/kinesis-using-sdk-java-resharding-split.html">Split
            a Shard</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            </para>
             
            <para>
            You can use <a>DescribeStream</a> to determine the shard ID and hash key values for
            the <code>ShardToSplit</code> and <code>NewStartingHashKey</code> parameters that
            are specified in the <code>SplitShard</code> request.
            </para>
             
            <para>
             <code>SplitShard</code> is an asynchronous operation. Upon receiving a <code>SplitShard</code>
            request, Kinesis Data Streams immediately returns a response and sets the stream status
            to <code>UPDATING</code>. After the operation is completed, Kinesis Data Streams sets
            the stream status to <code>ACTIVE</code>. Read and write operations continue to work
            while the stream is in the <code>UPDATING</code> state. 
            </para>
             
            <para>
            You can use <code>DescribeStream</code> to check the status of the stream, which is
            returned in <code>StreamStatus</code>. If the stream is in the <code>ACTIVE</code>
            state, you can call <code>SplitShard</code>. If a stream is in <code>CREATING</code>
            or <code>UPDATING</code> or <code>DELETING</code> states, <code>DescribeStream</code>
            returns a <code>ResourceInUseException</code>.
            </para>
             
            <para>
            If the specified stream does not exist, <code>DescribeStream</code> returns a <code>ResourceNotFoundException</code>.
            If you try to create more shards than are authorized for your account, you receive
            a <code>LimitExceededException</code>. 
            </para>
             
            <para>
            For the default shard limit for an AWS account, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Kinesis
            Data Streams Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.
            To increase this limit, <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html">contact
            AWS Support</a>.
            </para>
             
            <para>
            If you try to operate on too many streams simultaneously using <a>CreateStream</a>,
            <a>DeleteStream</a>, <a>MergeShards</a>, and/or <a>SplitShard</a>, you receive a <code>LimitExceededException</code>.
            
            </para>
             
            <para>
             <code>SplitShard</code> has a limit of five transactions per second per account.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the SplitShard service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the SplitShard service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/SplitShard">REST API Reference for SplitShard Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.StartStreamEncryption(Amazon.Kinesis.Model.StartStreamEncryptionRequest)">
            <summary>
            Enables or updates server-side encryption using an AWS KMS key for a specified stream.
            
            
             
            <para>
            Starting encryption is an asynchronous operation. Upon receiving the request, Kinesis
            Data Streams returns immediately and sets the status of the stream to <code>UPDATING</code>.
            After the update is complete, Kinesis Data Streams sets the status of the stream back
            to <code>ACTIVE</code>. Updating or applying encryption normally takes a few seconds
            to complete, but it can take minutes. You can continue to read and write data to your
            stream while its status is <code>UPDATING</code>. Once the status of the stream is
            <code>ACTIVE</code>, encryption begins for records written to the stream. 
            </para>
             
            <para>
            API Limits: You can successfully apply a new AWS KMS key for server-side encryption
            25 times in a rolling 24-hour period.
            </para>
             
            <para>
            Note: It can take up to 5 seconds after the stream is in an <code>ACTIVE</code> status
            before all records written to the stream are encrypted. After you enable encryption,
            you can verify that encryption is applied by inspecting the API response from <code>PutRecord</code>
            or <code>PutRecords</code>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the StartStreamEncryption service method.</param>
            
            <returns>The response from the StartStreamEncryption service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSAccessDeniedException">
            The ciphertext references a key that doesn't exist or that you don't have access to.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSDisabledException">
            The request was rejected because the specified customer master key (CMK) isn't enabled.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource isn't valid for
            this request. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">How
            Key State Affects Use of a Customer Master Key</a> in the <i>AWS Key Management Service
            Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSNotFoundException">
            The request was rejected because the specified entity or resource can't be found.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSOptInRequiredException">
            The AWS access key ID needs a subscription for the service.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSThrottlingException">
            The request was denied due to request throttling. For more information about throttling,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html#requests-per-second">Limits</a>
            in the <i>AWS Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/StartStreamEncryption">REST API Reference for StartStreamEncryption Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.StartStreamEncryptionAsync(Amazon.Kinesis.Model.StartStreamEncryptionRequest,System.Threading.CancellationToken)">
            <summary>
            Enables or updates server-side encryption using an AWS KMS key for a specified stream.
            
            
             
            <para>
            Starting encryption is an asynchronous operation. Upon receiving the request, Kinesis
            Data Streams returns immediately and sets the status of the stream to <code>UPDATING</code>.
            After the update is complete, Kinesis Data Streams sets the status of the stream back
            to <code>ACTIVE</code>. Updating or applying encryption normally takes a few seconds
            to complete, but it can take minutes. You can continue to read and write data to your
            stream while its status is <code>UPDATING</code>. Once the status of the stream is
            <code>ACTIVE</code>, encryption begins for records written to the stream. 
            </para>
             
            <para>
            API Limits: You can successfully apply a new AWS KMS key for server-side encryption
            25 times in a rolling 24-hour period.
            </para>
             
            <para>
            Note: It can take up to 5 seconds after the stream is in an <code>ACTIVE</code> status
            before all records written to the stream are encrypted. After you enable encryption,
            you can verify that encryption is applied by inspecting the API response from <code>PutRecord</code>
            or <code>PutRecords</code>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the StartStreamEncryption service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the StartStreamEncryption service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSAccessDeniedException">
            The ciphertext references a key that doesn't exist or that you don't have access to.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSDisabledException">
            The request was rejected because the specified customer master key (CMK) isn't enabled.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSInvalidStateException">
            The request was rejected because the state of the specified resource isn't valid for
            this request. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html">How
            Key State Affects Use of a Customer Master Key</a> in the <i>AWS Key Management Service
            Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSNotFoundException">
            The request was rejected because the specified entity or resource can't be found.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSOptInRequiredException">
            The AWS access key ID needs a subscription for the service.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.KMSThrottlingException">
            The request was denied due to request throttling. For more information about throttling,
            see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/limits.html#requests-per-second">Limits</a>
            in the <i>AWS Key Management Service Developer Guide</i>.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/StartStreamEncryption">REST API Reference for StartStreamEncryption Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.StopStreamEncryption(Amazon.Kinesis.Model.StopStreamEncryptionRequest)">
            <summary>
            Disables server-side encryption for a specified stream. 
            
             
            <para>
            Stopping encryption is an asynchronous operation. Upon receiving the request, Kinesis
            Data Streams returns immediately and sets the status of the stream to <code>UPDATING</code>.
            After the update is complete, Kinesis Data Streams sets the status of the stream back
            to <code>ACTIVE</code>. Stopping encryption normally takes a few seconds to complete,
            but it can take minutes. You can continue to read and write data to your stream while
            its status is <code>UPDATING</code>. Once the status of the stream is <code>ACTIVE</code>,
            records written to the stream are no longer encrypted by Kinesis Data Streams. 
            </para>
             
            <para>
            API Limits: You can successfully disable server-side encryption 25 times in a rolling
            24-hour period. 
            </para>
             
            <para>
            Note: It can take up to 5 seconds after the stream is in an <code>ACTIVE</code> status
            before all records written to the stream are no longer subject to encryption. After
            you disabled encryption, you can verify that encryption is not applied by inspecting
            the API response from <code>PutRecord</code> or <code>PutRecords</code>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the StopStreamEncryption service method.</param>
            
            <returns>The response from the StopStreamEncryption service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/StopStreamEncryption">REST API Reference for StopStreamEncryption Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.StopStreamEncryptionAsync(Amazon.Kinesis.Model.StopStreamEncryptionRequest,System.Threading.CancellationToken)">
            <summary>
            Disables server-side encryption for a specified stream. 
            
             
            <para>
            Stopping encryption is an asynchronous operation. Upon receiving the request, Kinesis
            Data Streams returns immediately and sets the status of the stream to <code>UPDATING</code>.
            After the update is complete, Kinesis Data Streams sets the status of the stream back
            to <code>ACTIVE</code>. Stopping encryption normally takes a few seconds to complete,
            but it can take minutes. You can continue to read and write data to your stream while
            its status is <code>UPDATING</code>. Once the status of the stream is <code>ACTIVE</code>,
            records written to the stream are no longer encrypted by Kinesis Data Streams. 
            </para>
             
            <para>
            API Limits: You can successfully disable server-side encryption 25 times in a rolling
            24-hour period. 
            </para>
             
            <para>
            Note: It can take up to 5 seconds after the stream is in an <code>ACTIVE</code> status
            before all records written to the stream are no longer subject to encryption. After
            you disabled encryption, you can verify that encryption is not applied by inspecting
            the API response from <code>PutRecord</code> or <code>PutRecords</code>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the StopStreamEncryption service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the StopStreamEncryption service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/StopStreamEncryption">REST API Reference for StopStreamEncryption Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.UpdateShardCount(Amazon.Kinesis.Model.UpdateShardCountRequest)">
            <summary>
            Updates the shard count of the specified stream to the specified number of shards.
            
             
            <para>
            Updating the shard count is an asynchronous operation. Upon receiving the request,
            Kinesis Data Streams returns immediately and sets the status of the stream to <code>UPDATING</code>.
            After the update is complete, Kinesis Data Streams sets the status of the stream back
            to <code>ACTIVE</code>. Depending on the size of the stream, the scaling action could
            take a few minutes to complete. You can continue to read and write data to your stream
            while its status is <code>UPDATING</code>.
            </para>
             
            <para>
            To update the shard count, Kinesis Data Streams performs splits or merges on individual
            shards. This can cause short-lived shards to be created, in addition to the final
            shards. These short-lived shards count towards your total shard limit for your account
            in the Region.
            </para>
             
            <para>
            When using this operation, we recommend that you specify a target shard count that
            is a multiple of 25% (25%, 50%, 75%, 100%). You can specify any target value within
            your shard limit. However, if you specify a target that isn't a multiple of 25%, the
            scaling action might take longer to complete. 
            </para>
             
            <para>
            This operation has the following default limits. By default, you cannot do the following:
            </para>
             <ul> <li> 
            <para>
            Scale more than ten times per rolling 24-hour period per stream
            </para>
             </li> <li> 
            <para>
            Scale up to more than double your current shard count for a stream
            </para>
             </li> <li> 
            <para>
            Scale down below half your current shard count for a stream
            </para>
             </li> <li> 
            <para>
            Scale up to more than 500 shards in a stream
            </para>
             </li> <li> 
            <para>
            Scale a stream with more than 500 shards down unless the result is less than 500 shards
            </para>
             </li> <li> 
            <para>
            Scale up to more than the shard limit for your account
            </para>
             </li> </ul> 
            <para>
            For the default limits for an AWS account, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams
            Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>. To request an
            increase in the call rate limit, the shard limit for this API, or your overall shard
            limit, use the <a href="https://console.aws.amazon.com/support/v1#/case/create?issueType=service-limit-increase&amp;limitType=service-code-kinesis">limits
            form</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the UpdateShardCount service method.</param>
            
            <returns>The response from the UpdateShardCount service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/UpdateShardCount">REST API Reference for UpdateShardCount Operation</seealso>
        </member>
        <member name="M:Amazon.Kinesis.IAmazonKinesis.UpdateShardCountAsync(Amazon.Kinesis.Model.UpdateShardCountRequest,System.Threading.CancellationToken)">
            <summary>
            Updates the shard count of the specified stream to the specified number of shards.
            
             
            <para>
            Updating the shard count is an asynchronous operation. Upon receiving the request,
            Kinesis Data Streams returns immediately and sets the status of the stream to <code>UPDATING</code>.
            After the update is complete, Kinesis Data Streams sets the status of the stream back
            to <code>ACTIVE</code>. Depending on the size of the stream, the scaling action could
            take a few minutes to complete. You can continue to read and write data to your stream
            while its status is <code>UPDATING</code>.
            </para>
             
            <para>
            To update the shard count, Kinesis Data Streams performs splits or merges on individual
            shards. This can cause short-lived shards to be created, in addition to the final
            shards. These short-lived shards count towards your total shard limit for your account
            in the Region.
            </para>
             
            <para>
            When using this operation, we recommend that you specify a target shard count that
            is a multiple of 25% (25%, 50%, 75%, 100%). You can specify any target value within
            your shard limit. However, if you specify a target that isn't a multiple of 25%, the
            scaling action might take longer to complete. 
            </para>
             
            <para>
            This operation has the following default limits. By default, you cannot do the following:
            </para>
             <ul> <li> 
            <para>
            Scale more than ten times per rolling 24-hour period per stream
            </para>
             </li> <li> 
            <para>
            Scale up to more than double your current shard count for a stream
            </para>
             </li> <li> 
            <para>
            Scale down below half your current shard count for a stream
            </para>
             </li> <li> 
            <para>
            Scale up to more than 500 shards in a stream
            </para>
             </li> <li> 
            <para>
            Scale a stream with more than 500 shards down unless the result is less than 500 shards
            </para>
             </li> <li> 
            <para>
            Scale up to more than the shard limit for your account
            </para>
             </li> </ul> 
            <para>
            For the default limits for an AWS account, see <a href="https://docs.aws.amazon.com/kinesis/latest/dev/service-sizes-and-limits.html">Streams
            Limits</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>. To request an
            increase in the call rate limit, the shard limit for this API, or your overall shard
            limit, use the <a href="https://console.aws.amazon.com/support/v1#/case/create?issueType=service-limit-increase&amp;limitType=service-code-kinesis">limits
            form</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the UpdateShardCount service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the UpdateShardCount service method, as returned by Kinesis.</returns>
            <exception cref="T:Amazon.Kinesis.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            For more information, see the returned message.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.LimitExceededException">
            The requested resource exceeds the maximum number allowed, or the number of concurrent
            stream requests exceeds the maximum number allowed.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceInUseException">
            The resource is not available for this operation. For successful operation, the resource
            must be in the <code>ACTIVE</code> state.
            </exception>
            <exception cref="T:Amazon.Kinesis.Model.ResourceNotFoundException">
            The requested resource could not be found. The stream might not be specified correctly.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-2013-12-02/UpdateShardCount">REST API Reference for UpdateShardCount Operation</seealso>
        </member>
    </members>
</doc>
